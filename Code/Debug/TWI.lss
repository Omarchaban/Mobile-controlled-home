
TWI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002cae  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001e2  00800060  00002cae  00002d42  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800242  00800242  00002f24  2**0
                  ALLOC
  3 .stab         00002808  00000000  00000000  00002f24  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001070  00000000  00000000  0000572c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  0000679c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001d1  00000000  00000000  0000691c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002010  00000000  00000000  00006aed  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001161  00000000  00000000  00008afd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001003  00000000  00000000  00009c5e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001a0  00000000  00000000  0000ac64  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002be  00000000  00000000  0000ae04  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000090e  00000000  00000000  0000b0c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b9d0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee ea       	ldi	r30, 0xAE	; 174
      68:	fc e2       	ldi	r31, 0x2C	; 44
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 34       	cpi	r26, 0x42	; 66
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	a2 e4       	ldi	r26, 0x42	; 66
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a3 34       	cpi	r26, 0x43	; 67
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 b1 0b 	call	0x1762	; 0x1762 <main>
      8a:	0c 94 55 16 	jmp	0x2caa	; 0x2caa <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 07 04 	call	0x80e	; 0x80e <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 07 04 	call	0x80e	; 0x80e <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 1e 16 	jmp	0x2c3c	; 0x2c3c <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a9 e3       	ldi	r26, 0x39	; 57
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 3a 16 	jmp	0x2c74	; 0x2c74 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 2a 16 	jmp	0x2c54	; 0x2c54 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 46 16 	jmp	0x2c8c	; 0x2c8c <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 2a 16 	jmp	0x2c54	; 0x2c54 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 46 16 	jmp	0x2c8c	; 0x2c8c <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 1e 16 	jmp	0x2c3c	; 0x2c3c <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	89 e3       	ldi	r24, 0x39	; 57
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 3a 16 	jmp	0x2c74	; 0x2c74 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 2a 16 	jmp	0x2c54	; 0x2c54 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 f7 05 	call	0xbee	; 0xbee <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 46 16 	jmp	0x2c8c	; 0x2c8c <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 2a 16 	jmp	0x2c54	; 0x2c54 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 f7 05 	call	0xbee	; 0xbee <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 46 16 	jmp	0x2c8c	; 0x2c8c <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 2a 16 	jmp	0x2c54	; 0x2c54 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 f7 05 	call	0xbee	; 0xbee <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 46 16 	jmp	0x2c8c	; 0x2c8c <__epilogue_restores__+0x18>

00000752 <__floatsisf>:
     752:	a8 e0       	ldi	r26, 0x08	; 8
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 27 16 	jmp	0x2c4e	; 0x2c4e <__prologue_saves__+0x12>
     75e:	9b 01       	movw	r18, r22
     760:	ac 01       	movw	r20, r24
     762:	83 e0       	ldi	r24, 0x03	; 3
     764:	89 83       	std	Y+1, r24	; 0x01
     766:	da 01       	movw	r26, r20
     768:	c9 01       	movw	r24, r18
     76a:	88 27       	eor	r24, r24
     76c:	b7 fd       	sbrc	r27, 7
     76e:	83 95       	inc	r24
     770:	99 27       	eor	r25, r25
     772:	aa 27       	eor	r26, r26
     774:	bb 27       	eor	r27, r27
     776:	b8 2e       	mov	r11, r24
     778:	21 15       	cp	r18, r1
     77a:	31 05       	cpc	r19, r1
     77c:	41 05       	cpc	r20, r1
     77e:	51 05       	cpc	r21, r1
     780:	19 f4       	brne	.+6      	; 0x788 <__floatsisf+0x36>
     782:	82 e0       	ldi	r24, 0x02	; 2
     784:	89 83       	std	Y+1, r24	; 0x01
     786:	3a c0       	rjmp	.+116    	; 0x7fc <__floatsisf+0xaa>
     788:	88 23       	and	r24, r24
     78a:	a9 f0       	breq	.+42     	; 0x7b6 <__floatsisf+0x64>
     78c:	20 30       	cpi	r18, 0x00	; 0
     78e:	80 e0       	ldi	r24, 0x00	; 0
     790:	38 07       	cpc	r19, r24
     792:	80 e0       	ldi	r24, 0x00	; 0
     794:	48 07       	cpc	r20, r24
     796:	80 e8       	ldi	r24, 0x80	; 128
     798:	58 07       	cpc	r21, r24
     79a:	29 f4       	brne	.+10     	; 0x7a6 <__floatsisf+0x54>
     79c:	60 e0       	ldi	r22, 0x00	; 0
     79e:	70 e0       	ldi	r23, 0x00	; 0
     7a0:	80 e0       	ldi	r24, 0x00	; 0
     7a2:	9f ec       	ldi	r25, 0xCF	; 207
     7a4:	30 c0       	rjmp	.+96     	; 0x806 <__floatsisf+0xb4>
     7a6:	ee 24       	eor	r14, r14
     7a8:	ff 24       	eor	r15, r15
     7aa:	87 01       	movw	r16, r14
     7ac:	e2 1a       	sub	r14, r18
     7ae:	f3 0a       	sbc	r15, r19
     7b0:	04 0b       	sbc	r16, r20
     7b2:	15 0b       	sbc	r17, r21
     7b4:	02 c0       	rjmp	.+4      	; 0x7ba <__floatsisf+0x68>
     7b6:	79 01       	movw	r14, r18
     7b8:	8a 01       	movw	r16, r20
     7ba:	8e e1       	ldi	r24, 0x1E	; 30
     7bc:	c8 2e       	mov	r12, r24
     7be:	d1 2c       	mov	r13, r1
     7c0:	dc 82       	std	Y+4, r13	; 0x04
     7c2:	cb 82       	std	Y+3, r12	; 0x03
     7c4:	ed 82       	std	Y+5, r14	; 0x05
     7c6:	fe 82       	std	Y+6, r15	; 0x06
     7c8:	0f 83       	std	Y+7, r16	; 0x07
     7ca:	18 87       	std	Y+8, r17	; 0x08
     7cc:	c8 01       	movw	r24, r16
     7ce:	b7 01       	movw	r22, r14
     7d0:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <__clzsi2>
     7d4:	01 97       	sbiw	r24, 0x01	; 1
     7d6:	18 16       	cp	r1, r24
     7d8:	19 06       	cpc	r1, r25
     7da:	84 f4       	brge	.+32     	; 0x7fc <__floatsisf+0xaa>
     7dc:	08 2e       	mov	r0, r24
     7de:	04 c0       	rjmp	.+8      	; 0x7e8 <__floatsisf+0x96>
     7e0:	ee 0c       	add	r14, r14
     7e2:	ff 1c       	adc	r15, r15
     7e4:	00 1f       	adc	r16, r16
     7e6:	11 1f       	adc	r17, r17
     7e8:	0a 94       	dec	r0
     7ea:	d2 f7       	brpl	.-12     	; 0x7e0 <__floatsisf+0x8e>
     7ec:	ed 82       	std	Y+5, r14	; 0x05
     7ee:	fe 82       	std	Y+6, r15	; 0x06
     7f0:	0f 83       	std	Y+7, r16	; 0x07
     7f2:	18 87       	std	Y+8, r17	; 0x08
     7f4:	c8 1a       	sub	r12, r24
     7f6:	d9 0a       	sbc	r13, r25
     7f8:	dc 82       	std	Y+4, r13	; 0x04
     7fa:	cb 82       	std	Y+3, r12	; 0x03
     7fc:	ba 82       	std	Y+2, r11	; 0x02
     7fe:	ce 01       	movw	r24, r28
     800:	01 96       	adiw	r24, 0x01	; 1
     802:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     806:	28 96       	adiw	r28, 0x08	; 8
     808:	e9 e0       	ldi	r30, 0x09	; 9
     80a:	0c 94 43 16 	jmp	0x2c86	; 0x2c86 <__epilogue_restores__+0x12>

0000080e <__fixsfsi>:
     80e:	ac e0       	ldi	r26, 0x0C	; 12
     810:	b0 e0       	ldi	r27, 0x00	; 0
     812:	ed e0       	ldi	r30, 0x0D	; 13
     814:	f4 e0       	ldi	r31, 0x04	; 4
     816:	0c 94 2e 16 	jmp	0x2c5c	; 0x2c5c <__prologue_saves__+0x20>
     81a:	69 83       	std	Y+1, r22	; 0x01
     81c:	7a 83       	std	Y+2, r23	; 0x02
     81e:	8b 83       	std	Y+3, r24	; 0x03
     820:	9c 83       	std	Y+4, r25	; 0x04
     822:	ce 01       	movw	r24, r28
     824:	01 96       	adiw	r24, 0x01	; 1
     826:	be 01       	movw	r22, r28
     828:	6b 5f       	subi	r22, 0xFB	; 251
     82a:	7f 4f       	sbci	r23, 0xFF	; 255
     82c:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     830:	8d 81       	ldd	r24, Y+5	; 0x05
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	61 f1       	breq	.+88     	; 0x88e <__fixsfsi+0x80>
     836:	82 30       	cpi	r24, 0x02	; 2
     838:	50 f1       	brcs	.+84     	; 0x88e <__fixsfsi+0x80>
     83a:	84 30       	cpi	r24, 0x04	; 4
     83c:	21 f4       	brne	.+8      	; 0x846 <__fixsfsi+0x38>
     83e:	8e 81       	ldd	r24, Y+6	; 0x06
     840:	88 23       	and	r24, r24
     842:	51 f1       	breq	.+84     	; 0x898 <__fixsfsi+0x8a>
     844:	2e c0       	rjmp	.+92     	; 0x8a2 <__fixsfsi+0x94>
     846:	2f 81       	ldd	r18, Y+7	; 0x07
     848:	38 85       	ldd	r19, Y+8	; 0x08
     84a:	37 fd       	sbrc	r19, 7
     84c:	20 c0       	rjmp	.+64     	; 0x88e <__fixsfsi+0x80>
     84e:	6e 81       	ldd	r22, Y+6	; 0x06
     850:	2f 31       	cpi	r18, 0x1F	; 31
     852:	31 05       	cpc	r19, r1
     854:	1c f0       	brlt	.+6      	; 0x85c <__fixsfsi+0x4e>
     856:	66 23       	and	r22, r22
     858:	f9 f0       	breq	.+62     	; 0x898 <__fixsfsi+0x8a>
     85a:	23 c0       	rjmp	.+70     	; 0x8a2 <__fixsfsi+0x94>
     85c:	8e e1       	ldi	r24, 0x1E	; 30
     85e:	90 e0       	ldi	r25, 0x00	; 0
     860:	82 1b       	sub	r24, r18
     862:	93 0b       	sbc	r25, r19
     864:	29 85       	ldd	r18, Y+9	; 0x09
     866:	3a 85       	ldd	r19, Y+10	; 0x0a
     868:	4b 85       	ldd	r20, Y+11	; 0x0b
     86a:	5c 85       	ldd	r21, Y+12	; 0x0c
     86c:	04 c0       	rjmp	.+8      	; 0x876 <__fixsfsi+0x68>
     86e:	56 95       	lsr	r21
     870:	47 95       	ror	r20
     872:	37 95       	ror	r19
     874:	27 95       	ror	r18
     876:	8a 95       	dec	r24
     878:	d2 f7       	brpl	.-12     	; 0x86e <__fixsfsi+0x60>
     87a:	66 23       	and	r22, r22
     87c:	b1 f0       	breq	.+44     	; 0x8aa <__fixsfsi+0x9c>
     87e:	50 95       	com	r21
     880:	40 95       	com	r20
     882:	30 95       	com	r19
     884:	21 95       	neg	r18
     886:	3f 4f       	sbci	r19, 0xFF	; 255
     888:	4f 4f       	sbci	r20, 0xFF	; 255
     88a:	5f 4f       	sbci	r21, 0xFF	; 255
     88c:	0e c0       	rjmp	.+28     	; 0x8aa <__fixsfsi+0x9c>
     88e:	20 e0       	ldi	r18, 0x00	; 0
     890:	30 e0       	ldi	r19, 0x00	; 0
     892:	40 e0       	ldi	r20, 0x00	; 0
     894:	50 e0       	ldi	r21, 0x00	; 0
     896:	09 c0       	rjmp	.+18     	; 0x8aa <__fixsfsi+0x9c>
     898:	2f ef       	ldi	r18, 0xFF	; 255
     89a:	3f ef       	ldi	r19, 0xFF	; 255
     89c:	4f ef       	ldi	r20, 0xFF	; 255
     89e:	5f e7       	ldi	r21, 0x7F	; 127
     8a0:	04 c0       	rjmp	.+8      	; 0x8aa <__fixsfsi+0x9c>
     8a2:	20 e0       	ldi	r18, 0x00	; 0
     8a4:	30 e0       	ldi	r19, 0x00	; 0
     8a6:	40 e0       	ldi	r20, 0x00	; 0
     8a8:	50 e8       	ldi	r21, 0x80	; 128
     8aa:	b9 01       	movw	r22, r18
     8ac:	ca 01       	movw	r24, r20
     8ae:	2c 96       	adiw	r28, 0x0c	; 12
     8b0:	e2 e0       	ldi	r30, 0x02	; 2
     8b2:	0c 94 4a 16 	jmp	0x2c94	; 0x2c94 <__epilogue_restores__+0x20>

000008b6 <__clzsi2>:
     8b6:	ef 92       	push	r14
     8b8:	ff 92       	push	r15
     8ba:	0f 93       	push	r16
     8bc:	1f 93       	push	r17
     8be:	7b 01       	movw	r14, r22
     8c0:	8c 01       	movw	r16, r24
     8c2:	80 e0       	ldi	r24, 0x00	; 0
     8c4:	e8 16       	cp	r14, r24
     8c6:	80 e0       	ldi	r24, 0x00	; 0
     8c8:	f8 06       	cpc	r15, r24
     8ca:	81 e0       	ldi	r24, 0x01	; 1
     8cc:	08 07       	cpc	r16, r24
     8ce:	80 e0       	ldi	r24, 0x00	; 0
     8d0:	18 07       	cpc	r17, r24
     8d2:	88 f4       	brcc	.+34     	; 0x8f6 <__clzsi2+0x40>
     8d4:	8f ef       	ldi	r24, 0xFF	; 255
     8d6:	e8 16       	cp	r14, r24
     8d8:	f1 04       	cpc	r15, r1
     8da:	01 05       	cpc	r16, r1
     8dc:	11 05       	cpc	r17, r1
     8de:	31 f0       	breq	.+12     	; 0x8ec <__clzsi2+0x36>
     8e0:	28 f0       	brcs	.+10     	; 0x8ec <__clzsi2+0x36>
     8e2:	88 e0       	ldi	r24, 0x08	; 8
     8e4:	90 e0       	ldi	r25, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	b0 e0       	ldi	r27, 0x00	; 0
     8ea:	17 c0       	rjmp	.+46     	; 0x91a <__clzsi2+0x64>
     8ec:	80 e0       	ldi	r24, 0x00	; 0
     8ee:	90 e0       	ldi	r25, 0x00	; 0
     8f0:	a0 e0       	ldi	r26, 0x00	; 0
     8f2:	b0 e0       	ldi	r27, 0x00	; 0
     8f4:	12 c0       	rjmp	.+36     	; 0x91a <__clzsi2+0x64>
     8f6:	80 e0       	ldi	r24, 0x00	; 0
     8f8:	e8 16       	cp	r14, r24
     8fa:	80 e0       	ldi	r24, 0x00	; 0
     8fc:	f8 06       	cpc	r15, r24
     8fe:	80 e0       	ldi	r24, 0x00	; 0
     900:	08 07       	cpc	r16, r24
     902:	81 e0       	ldi	r24, 0x01	; 1
     904:	18 07       	cpc	r17, r24
     906:	28 f0       	brcs	.+10     	; 0x912 <__clzsi2+0x5c>
     908:	88 e1       	ldi	r24, 0x18	; 24
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	a0 e0       	ldi	r26, 0x00	; 0
     90e:	b0 e0       	ldi	r27, 0x00	; 0
     910:	04 c0       	rjmp	.+8      	; 0x91a <__clzsi2+0x64>
     912:	80 e1       	ldi	r24, 0x10	; 16
     914:	90 e0       	ldi	r25, 0x00	; 0
     916:	a0 e0       	ldi	r26, 0x00	; 0
     918:	b0 e0       	ldi	r27, 0x00	; 0
     91a:	20 e2       	ldi	r18, 0x20	; 32
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	28 1b       	sub	r18, r24
     924:	39 0b       	sbc	r19, r25
     926:	4a 0b       	sbc	r20, r26
     928:	5b 0b       	sbc	r21, r27
     92a:	04 c0       	rjmp	.+8      	; 0x934 <__clzsi2+0x7e>
     92c:	16 95       	lsr	r17
     92e:	07 95       	ror	r16
     930:	f7 94       	ror	r15
     932:	e7 94       	ror	r14
     934:	8a 95       	dec	r24
     936:	d2 f7       	brpl	.-12     	; 0x92c <__clzsi2+0x76>
     938:	f7 01       	movw	r30, r14
     93a:	ef 5b       	subi	r30, 0xBF	; 191
     93c:	fe 4f       	sbci	r31, 0xFE	; 254
     93e:	80 81       	ld	r24, Z
     940:	28 1b       	sub	r18, r24
     942:	31 09       	sbc	r19, r1
     944:	41 09       	sbc	r20, r1
     946:	51 09       	sbc	r21, r1
     948:	c9 01       	movw	r24, r18
     94a:	1f 91       	pop	r17
     94c:	0f 91       	pop	r16
     94e:	ff 90       	pop	r15
     950:	ef 90       	pop	r14
     952:	08 95       	ret

00000954 <__pack_f>:
     954:	df 92       	push	r13
     956:	ef 92       	push	r14
     958:	ff 92       	push	r15
     95a:	0f 93       	push	r16
     95c:	1f 93       	push	r17
     95e:	fc 01       	movw	r30, r24
     960:	e4 80       	ldd	r14, Z+4	; 0x04
     962:	f5 80       	ldd	r15, Z+5	; 0x05
     964:	06 81       	ldd	r16, Z+6	; 0x06
     966:	17 81       	ldd	r17, Z+7	; 0x07
     968:	d1 80       	ldd	r13, Z+1	; 0x01
     96a:	80 81       	ld	r24, Z
     96c:	82 30       	cpi	r24, 0x02	; 2
     96e:	48 f4       	brcc	.+18     	; 0x982 <__pack_f+0x2e>
     970:	80 e0       	ldi	r24, 0x00	; 0
     972:	90 e0       	ldi	r25, 0x00	; 0
     974:	a0 e1       	ldi	r26, 0x10	; 16
     976:	b0 e0       	ldi	r27, 0x00	; 0
     978:	e8 2a       	or	r14, r24
     97a:	f9 2a       	or	r15, r25
     97c:	0a 2b       	or	r16, r26
     97e:	1b 2b       	or	r17, r27
     980:	a5 c0       	rjmp	.+330    	; 0xacc <__pack_f+0x178>
     982:	84 30       	cpi	r24, 0x04	; 4
     984:	09 f4       	brne	.+2      	; 0x988 <__pack_f+0x34>
     986:	9f c0       	rjmp	.+318    	; 0xac6 <__pack_f+0x172>
     988:	82 30       	cpi	r24, 0x02	; 2
     98a:	21 f4       	brne	.+8      	; 0x994 <__pack_f+0x40>
     98c:	ee 24       	eor	r14, r14
     98e:	ff 24       	eor	r15, r15
     990:	87 01       	movw	r16, r14
     992:	05 c0       	rjmp	.+10     	; 0x99e <__pack_f+0x4a>
     994:	e1 14       	cp	r14, r1
     996:	f1 04       	cpc	r15, r1
     998:	01 05       	cpc	r16, r1
     99a:	11 05       	cpc	r17, r1
     99c:	19 f4       	brne	.+6      	; 0x9a4 <__pack_f+0x50>
     99e:	e0 e0       	ldi	r30, 0x00	; 0
     9a0:	f0 e0       	ldi	r31, 0x00	; 0
     9a2:	96 c0       	rjmp	.+300    	; 0xad0 <__pack_f+0x17c>
     9a4:	62 81       	ldd	r22, Z+2	; 0x02
     9a6:	73 81       	ldd	r23, Z+3	; 0x03
     9a8:	9f ef       	ldi	r25, 0xFF	; 255
     9aa:	62 38       	cpi	r22, 0x82	; 130
     9ac:	79 07       	cpc	r23, r25
     9ae:	0c f0       	brlt	.+2      	; 0x9b2 <__pack_f+0x5e>
     9b0:	5b c0       	rjmp	.+182    	; 0xa68 <__pack_f+0x114>
     9b2:	22 e8       	ldi	r18, 0x82	; 130
     9b4:	3f ef       	ldi	r19, 0xFF	; 255
     9b6:	26 1b       	sub	r18, r22
     9b8:	37 0b       	sbc	r19, r23
     9ba:	2a 31       	cpi	r18, 0x1A	; 26
     9bc:	31 05       	cpc	r19, r1
     9be:	2c f0       	brlt	.+10     	; 0x9ca <__pack_f+0x76>
     9c0:	20 e0       	ldi	r18, 0x00	; 0
     9c2:	30 e0       	ldi	r19, 0x00	; 0
     9c4:	40 e0       	ldi	r20, 0x00	; 0
     9c6:	50 e0       	ldi	r21, 0x00	; 0
     9c8:	2a c0       	rjmp	.+84     	; 0xa1e <__pack_f+0xca>
     9ca:	b8 01       	movw	r22, r16
     9cc:	a7 01       	movw	r20, r14
     9ce:	02 2e       	mov	r0, r18
     9d0:	04 c0       	rjmp	.+8      	; 0x9da <__pack_f+0x86>
     9d2:	76 95       	lsr	r23
     9d4:	67 95       	ror	r22
     9d6:	57 95       	ror	r21
     9d8:	47 95       	ror	r20
     9da:	0a 94       	dec	r0
     9dc:	d2 f7       	brpl	.-12     	; 0x9d2 <__pack_f+0x7e>
     9de:	81 e0       	ldi	r24, 0x01	; 1
     9e0:	90 e0       	ldi	r25, 0x00	; 0
     9e2:	a0 e0       	ldi	r26, 0x00	; 0
     9e4:	b0 e0       	ldi	r27, 0x00	; 0
     9e6:	04 c0       	rjmp	.+8      	; 0x9f0 <__pack_f+0x9c>
     9e8:	88 0f       	add	r24, r24
     9ea:	99 1f       	adc	r25, r25
     9ec:	aa 1f       	adc	r26, r26
     9ee:	bb 1f       	adc	r27, r27
     9f0:	2a 95       	dec	r18
     9f2:	d2 f7       	brpl	.-12     	; 0x9e8 <__pack_f+0x94>
     9f4:	01 97       	sbiw	r24, 0x01	; 1
     9f6:	a1 09       	sbc	r26, r1
     9f8:	b1 09       	sbc	r27, r1
     9fa:	8e 21       	and	r24, r14
     9fc:	9f 21       	and	r25, r15
     9fe:	a0 23       	and	r26, r16
     a00:	b1 23       	and	r27, r17
     a02:	00 97       	sbiw	r24, 0x00	; 0
     a04:	a1 05       	cpc	r26, r1
     a06:	b1 05       	cpc	r27, r1
     a08:	21 f0       	breq	.+8      	; 0xa12 <__pack_f+0xbe>
     a0a:	81 e0       	ldi	r24, 0x01	; 1
     a0c:	90 e0       	ldi	r25, 0x00	; 0
     a0e:	a0 e0       	ldi	r26, 0x00	; 0
     a10:	b0 e0       	ldi	r27, 0x00	; 0
     a12:	9a 01       	movw	r18, r20
     a14:	ab 01       	movw	r20, r22
     a16:	28 2b       	or	r18, r24
     a18:	39 2b       	or	r19, r25
     a1a:	4a 2b       	or	r20, r26
     a1c:	5b 2b       	or	r21, r27
     a1e:	da 01       	movw	r26, r20
     a20:	c9 01       	movw	r24, r18
     a22:	8f 77       	andi	r24, 0x7F	; 127
     a24:	90 70       	andi	r25, 0x00	; 0
     a26:	a0 70       	andi	r26, 0x00	; 0
     a28:	b0 70       	andi	r27, 0x00	; 0
     a2a:	80 34       	cpi	r24, 0x40	; 64
     a2c:	91 05       	cpc	r25, r1
     a2e:	a1 05       	cpc	r26, r1
     a30:	b1 05       	cpc	r27, r1
     a32:	39 f4       	brne	.+14     	; 0xa42 <__pack_f+0xee>
     a34:	27 ff       	sbrs	r18, 7
     a36:	09 c0       	rjmp	.+18     	; 0xa4a <__pack_f+0xf6>
     a38:	20 5c       	subi	r18, 0xC0	; 192
     a3a:	3f 4f       	sbci	r19, 0xFF	; 255
     a3c:	4f 4f       	sbci	r20, 0xFF	; 255
     a3e:	5f 4f       	sbci	r21, 0xFF	; 255
     a40:	04 c0       	rjmp	.+8      	; 0xa4a <__pack_f+0xf6>
     a42:	21 5c       	subi	r18, 0xC1	; 193
     a44:	3f 4f       	sbci	r19, 0xFF	; 255
     a46:	4f 4f       	sbci	r20, 0xFF	; 255
     a48:	5f 4f       	sbci	r21, 0xFF	; 255
     a4a:	e0 e0       	ldi	r30, 0x00	; 0
     a4c:	f0 e0       	ldi	r31, 0x00	; 0
     a4e:	20 30       	cpi	r18, 0x00	; 0
     a50:	a0 e0       	ldi	r26, 0x00	; 0
     a52:	3a 07       	cpc	r19, r26
     a54:	a0 e0       	ldi	r26, 0x00	; 0
     a56:	4a 07       	cpc	r20, r26
     a58:	a0 e4       	ldi	r26, 0x40	; 64
     a5a:	5a 07       	cpc	r21, r26
     a5c:	10 f0       	brcs	.+4      	; 0xa62 <__pack_f+0x10e>
     a5e:	e1 e0       	ldi	r30, 0x01	; 1
     a60:	f0 e0       	ldi	r31, 0x00	; 0
     a62:	79 01       	movw	r14, r18
     a64:	8a 01       	movw	r16, r20
     a66:	27 c0       	rjmp	.+78     	; 0xab6 <__pack_f+0x162>
     a68:	60 38       	cpi	r22, 0x80	; 128
     a6a:	71 05       	cpc	r23, r1
     a6c:	64 f5       	brge	.+88     	; 0xac6 <__pack_f+0x172>
     a6e:	fb 01       	movw	r30, r22
     a70:	e1 58       	subi	r30, 0x81	; 129
     a72:	ff 4f       	sbci	r31, 0xFF	; 255
     a74:	d8 01       	movw	r26, r16
     a76:	c7 01       	movw	r24, r14
     a78:	8f 77       	andi	r24, 0x7F	; 127
     a7a:	90 70       	andi	r25, 0x00	; 0
     a7c:	a0 70       	andi	r26, 0x00	; 0
     a7e:	b0 70       	andi	r27, 0x00	; 0
     a80:	80 34       	cpi	r24, 0x40	; 64
     a82:	91 05       	cpc	r25, r1
     a84:	a1 05       	cpc	r26, r1
     a86:	b1 05       	cpc	r27, r1
     a88:	39 f4       	brne	.+14     	; 0xa98 <__pack_f+0x144>
     a8a:	e7 fe       	sbrs	r14, 7
     a8c:	0d c0       	rjmp	.+26     	; 0xaa8 <__pack_f+0x154>
     a8e:	80 e4       	ldi	r24, 0x40	; 64
     a90:	90 e0       	ldi	r25, 0x00	; 0
     a92:	a0 e0       	ldi	r26, 0x00	; 0
     a94:	b0 e0       	ldi	r27, 0x00	; 0
     a96:	04 c0       	rjmp	.+8      	; 0xaa0 <__pack_f+0x14c>
     a98:	8f e3       	ldi	r24, 0x3F	; 63
     a9a:	90 e0       	ldi	r25, 0x00	; 0
     a9c:	a0 e0       	ldi	r26, 0x00	; 0
     a9e:	b0 e0       	ldi	r27, 0x00	; 0
     aa0:	e8 0e       	add	r14, r24
     aa2:	f9 1e       	adc	r15, r25
     aa4:	0a 1f       	adc	r16, r26
     aa6:	1b 1f       	adc	r17, r27
     aa8:	17 ff       	sbrs	r17, 7
     aaa:	05 c0       	rjmp	.+10     	; 0xab6 <__pack_f+0x162>
     aac:	16 95       	lsr	r17
     aae:	07 95       	ror	r16
     ab0:	f7 94       	ror	r15
     ab2:	e7 94       	ror	r14
     ab4:	31 96       	adiw	r30, 0x01	; 1
     ab6:	87 e0       	ldi	r24, 0x07	; 7
     ab8:	16 95       	lsr	r17
     aba:	07 95       	ror	r16
     abc:	f7 94       	ror	r15
     abe:	e7 94       	ror	r14
     ac0:	8a 95       	dec	r24
     ac2:	d1 f7       	brne	.-12     	; 0xab8 <__pack_f+0x164>
     ac4:	05 c0       	rjmp	.+10     	; 0xad0 <__pack_f+0x17c>
     ac6:	ee 24       	eor	r14, r14
     ac8:	ff 24       	eor	r15, r15
     aca:	87 01       	movw	r16, r14
     acc:	ef ef       	ldi	r30, 0xFF	; 255
     ace:	f0 e0       	ldi	r31, 0x00	; 0
     ad0:	6e 2f       	mov	r22, r30
     ad2:	67 95       	ror	r22
     ad4:	66 27       	eor	r22, r22
     ad6:	67 95       	ror	r22
     ad8:	90 2f       	mov	r25, r16
     ada:	9f 77       	andi	r25, 0x7F	; 127
     adc:	d7 94       	ror	r13
     ade:	dd 24       	eor	r13, r13
     ae0:	d7 94       	ror	r13
     ae2:	8e 2f       	mov	r24, r30
     ae4:	86 95       	lsr	r24
     ae6:	49 2f       	mov	r20, r25
     ae8:	46 2b       	or	r20, r22
     aea:	58 2f       	mov	r21, r24
     aec:	5d 29       	or	r21, r13
     aee:	b7 01       	movw	r22, r14
     af0:	ca 01       	movw	r24, r20
     af2:	1f 91       	pop	r17
     af4:	0f 91       	pop	r16
     af6:	ff 90       	pop	r15
     af8:	ef 90       	pop	r14
     afa:	df 90       	pop	r13
     afc:	08 95       	ret

00000afe <__unpack_f>:
     afe:	fc 01       	movw	r30, r24
     b00:	db 01       	movw	r26, r22
     b02:	40 81       	ld	r20, Z
     b04:	51 81       	ldd	r21, Z+1	; 0x01
     b06:	22 81       	ldd	r18, Z+2	; 0x02
     b08:	62 2f       	mov	r22, r18
     b0a:	6f 77       	andi	r22, 0x7F	; 127
     b0c:	70 e0       	ldi	r23, 0x00	; 0
     b0e:	22 1f       	adc	r18, r18
     b10:	22 27       	eor	r18, r18
     b12:	22 1f       	adc	r18, r18
     b14:	93 81       	ldd	r25, Z+3	; 0x03
     b16:	89 2f       	mov	r24, r25
     b18:	88 0f       	add	r24, r24
     b1a:	82 2b       	or	r24, r18
     b1c:	28 2f       	mov	r18, r24
     b1e:	30 e0       	ldi	r19, 0x00	; 0
     b20:	99 1f       	adc	r25, r25
     b22:	99 27       	eor	r25, r25
     b24:	99 1f       	adc	r25, r25
     b26:	11 96       	adiw	r26, 0x01	; 1
     b28:	9c 93       	st	X, r25
     b2a:	11 97       	sbiw	r26, 0x01	; 1
     b2c:	21 15       	cp	r18, r1
     b2e:	31 05       	cpc	r19, r1
     b30:	a9 f5       	brne	.+106    	; 0xb9c <__unpack_f+0x9e>
     b32:	41 15       	cp	r20, r1
     b34:	51 05       	cpc	r21, r1
     b36:	61 05       	cpc	r22, r1
     b38:	71 05       	cpc	r23, r1
     b3a:	11 f4       	brne	.+4      	; 0xb40 <__unpack_f+0x42>
     b3c:	82 e0       	ldi	r24, 0x02	; 2
     b3e:	37 c0       	rjmp	.+110    	; 0xbae <__unpack_f+0xb0>
     b40:	82 e8       	ldi	r24, 0x82	; 130
     b42:	9f ef       	ldi	r25, 0xFF	; 255
     b44:	13 96       	adiw	r26, 0x03	; 3
     b46:	9c 93       	st	X, r25
     b48:	8e 93       	st	-X, r24
     b4a:	12 97       	sbiw	r26, 0x02	; 2
     b4c:	9a 01       	movw	r18, r20
     b4e:	ab 01       	movw	r20, r22
     b50:	67 e0       	ldi	r22, 0x07	; 7
     b52:	22 0f       	add	r18, r18
     b54:	33 1f       	adc	r19, r19
     b56:	44 1f       	adc	r20, r20
     b58:	55 1f       	adc	r21, r21
     b5a:	6a 95       	dec	r22
     b5c:	d1 f7       	brne	.-12     	; 0xb52 <__unpack_f+0x54>
     b5e:	83 e0       	ldi	r24, 0x03	; 3
     b60:	8c 93       	st	X, r24
     b62:	0d c0       	rjmp	.+26     	; 0xb7e <__unpack_f+0x80>
     b64:	22 0f       	add	r18, r18
     b66:	33 1f       	adc	r19, r19
     b68:	44 1f       	adc	r20, r20
     b6a:	55 1f       	adc	r21, r21
     b6c:	12 96       	adiw	r26, 0x02	; 2
     b6e:	8d 91       	ld	r24, X+
     b70:	9c 91       	ld	r25, X
     b72:	13 97       	sbiw	r26, 0x03	; 3
     b74:	01 97       	sbiw	r24, 0x01	; 1
     b76:	13 96       	adiw	r26, 0x03	; 3
     b78:	9c 93       	st	X, r25
     b7a:	8e 93       	st	-X, r24
     b7c:	12 97       	sbiw	r26, 0x02	; 2
     b7e:	20 30       	cpi	r18, 0x00	; 0
     b80:	80 e0       	ldi	r24, 0x00	; 0
     b82:	38 07       	cpc	r19, r24
     b84:	80 e0       	ldi	r24, 0x00	; 0
     b86:	48 07       	cpc	r20, r24
     b88:	80 e4       	ldi	r24, 0x40	; 64
     b8a:	58 07       	cpc	r21, r24
     b8c:	58 f3       	brcs	.-42     	; 0xb64 <__unpack_f+0x66>
     b8e:	14 96       	adiw	r26, 0x04	; 4
     b90:	2d 93       	st	X+, r18
     b92:	3d 93       	st	X+, r19
     b94:	4d 93       	st	X+, r20
     b96:	5c 93       	st	X, r21
     b98:	17 97       	sbiw	r26, 0x07	; 7
     b9a:	08 95       	ret
     b9c:	2f 3f       	cpi	r18, 0xFF	; 255
     b9e:	31 05       	cpc	r19, r1
     ba0:	79 f4       	brne	.+30     	; 0xbc0 <__unpack_f+0xc2>
     ba2:	41 15       	cp	r20, r1
     ba4:	51 05       	cpc	r21, r1
     ba6:	61 05       	cpc	r22, r1
     ba8:	71 05       	cpc	r23, r1
     baa:	19 f4       	brne	.+6      	; 0xbb2 <__unpack_f+0xb4>
     bac:	84 e0       	ldi	r24, 0x04	; 4
     bae:	8c 93       	st	X, r24
     bb0:	08 95       	ret
     bb2:	64 ff       	sbrs	r22, 4
     bb4:	03 c0       	rjmp	.+6      	; 0xbbc <__unpack_f+0xbe>
     bb6:	81 e0       	ldi	r24, 0x01	; 1
     bb8:	8c 93       	st	X, r24
     bba:	12 c0       	rjmp	.+36     	; 0xbe0 <__unpack_f+0xe2>
     bbc:	1c 92       	st	X, r1
     bbe:	10 c0       	rjmp	.+32     	; 0xbe0 <__unpack_f+0xe2>
     bc0:	2f 57       	subi	r18, 0x7F	; 127
     bc2:	30 40       	sbci	r19, 0x00	; 0
     bc4:	13 96       	adiw	r26, 0x03	; 3
     bc6:	3c 93       	st	X, r19
     bc8:	2e 93       	st	-X, r18
     bca:	12 97       	sbiw	r26, 0x02	; 2
     bcc:	83 e0       	ldi	r24, 0x03	; 3
     bce:	8c 93       	st	X, r24
     bd0:	87 e0       	ldi	r24, 0x07	; 7
     bd2:	44 0f       	add	r20, r20
     bd4:	55 1f       	adc	r21, r21
     bd6:	66 1f       	adc	r22, r22
     bd8:	77 1f       	adc	r23, r23
     bda:	8a 95       	dec	r24
     bdc:	d1 f7       	brne	.-12     	; 0xbd2 <__unpack_f+0xd4>
     bde:	70 64       	ori	r23, 0x40	; 64
     be0:	14 96       	adiw	r26, 0x04	; 4
     be2:	4d 93       	st	X+, r20
     be4:	5d 93       	st	X+, r21
     be6:	6d 93       	st	X+, r22
     be8:	7c 93       	st	X, r23
     bea:	17 97       	sbiw	r26, 0x07	; 7
     bec:	08 95       	ret

00000bee <__fpcmp_parts_f>:
     bee:	1f 93       	push	r17
     bf0:	dc 01       	movw	r26, r24
     bf2:	fb 01       	movw	r30, r22
     bf4:	9c 91       	ld	r25, X
     bf6:	92 30       	cpi	r25, 0x02	; 2
     bf8:	08 f4       	brcc	.+2      	; 0xbfc <__fpcmp_parts_f+0xe>
     bfa:	47 c0       	rjmp	.+142    	; 0xc8a <__fpcmp_parts_f+0x9c>
     bfc:	80 81       	ld	r24, Z
     bfe:	82 30       	cpi	r24, 0x02	; 2
     c00:	08 f4       	brcc	.+2      	; 0xc04 <__fpcmp_parts_f+0x16>
     c02:	43 c0       	rjmp	.+134    	; 0xc8a <__fpcmp_parts_f+0x9c>
     c04:	94 30       	cpi	r25, 0x04	; 4
     c06:	51 f4       	brne	.+20     	; 0xc1c <__fpcmp_parts_f+0x2e>
     c08:	11 96       	adiw	r26, 0x01	; 1
     c0a:	1c 91       	ld	r17, X
     c0c:	84 30       	cpi	r24, 0x04	; 4
     c0e:	99 f5       	brne	.+102    	; 0xc76 <__fpcmp_parts_f+0x88>
     c10:	81 81       	ldd	r24, Z+1	; 0x01
     c12:	68 2f       	mov	r22, r24
     c14:	70 e0       	ldi	r23, 0x00	; 0
     c16:	61 1b       	sub	r22, r17
     c18:	71 09       	sbc	r23, r1
     c1a:	3f c0       	rjmp	.+126    	; 0xc9a <__fpcmp_parts_f+0xac>
     c1c:	84 30       	cpi	r24, 0x04	; 4
     c1e:	21 f0       	breq	.+8      	; 0xc28 <__fpcmp_parts_f+0x3a>
     c20:	92 30       	cpi	r25, 0x02	; 2
     c22:	31 f4       	brne	.+12     	; 0xc30 <__fpcmp_parts_f+0x42>
     c24:	82 30       	cpi	r24, 0x02	; 2
     c26:	b9 f1       	breq	.+110    	; 0xc96 <__fpcmp_parts_f+0xa8>
     c28:	81 81       	ldd	r24, Z+1	; 0x01
     c2a:	88 23       	and	r24, r24
     c2c:	89 f1       	breq	.+98     	; 0xc90 <__fpcmp_parts_f+0xa2>
     c2e:	2d c0       	rjmp	.+90     	; 0xc8a <__fpcmp_parts_f+0x9c>
     c30:	11 96       	adiw	r26, 0x01	; 1
     c32:	1c 91       	ld	r17, X
     c34:	11 97       	sbiw	r26, 0x01	; 1
     c36:	82 30       	cpi	r24, 0x02	; 2
     c38:	f1 f0       	breq	.+60     	; 0xc76 <__fpcmp_parts_f+0x88>
     c3a:	81 81       	ldd	r24, Z+1	; 0x01
     c3c:	18 17       	cp	r17, r24
     c3e:	d9 f4       	brne	.+54     	; 0xc76 <__fpcmp_parts_f+0x88>
     c40:	12 96       	adiw	r26, 0x02	; 2
     c42:	2d 91       	ld	r18, X+
     c44:	3c 91       	ld	r19, X
     c46:	13 97       	sbiw	r26, 0x03	; 3
     c48:	82 81       	ldd	r24, Z+2	; 0x02
     c4a:	93 81       	ldd	r25, Z+3	; 0x03
     c4c:	82 17       	cp	r24, r18
     c4e:	93 07       	cpc	r25, r19
     c50:	94 f0       	brlt	.+36     	; 0xc76 <__fpcmp_parts_f+0x88>
     c52:	28 17       	cp	r18, r24
     c54:	39 07       	cpc	r19, r25
     c56:	bc f0       	brlt	.+46     	; 0xc86 <__fpcmp_parts_f+0x98>
     c58:	14 96       	adiw	r26, 0x04	; 4
     c5a:	8d 91       	ld	r24, X+
     c5c:	9d 91       	ld	r25, X+
     c5e:	0d 90       	ld	r0, X+
     c60:	bc 91       	ld	r27, X
     c62:	a0 2d       	mov	r26, r0
     c64:	24 81       	ldd	r18, Z+4	; 0x04
     c66:	35 81       	ldd	r19, Z+5	; 0x05
     c68:	46 81       	ldd	r20, Z+6	; 0x06
     c6a:	57 81       	ldd	r21, Z+7	; 0x07
     c6c:	28 17       	cp	r18, r24
     c6e:	39 07       	cpc	r19, r25
     c70:	4a 07       	cpc	r20, r26
     c72:	5b 07       	cpc	r21, r27
     c74:	18 f4       	brcc	.+6      	; 0xc7c <__fpcmp_parts_f+0x8e>
     c76:	11 23       	and	r17, r17
     c78:	41 f0       	breq	.+16     	; 0xc8a <__fpcmp_parts_f+0x9c>
     c7a:	0a c0       	rjmp	.+20     	; 0xc90 <__fpcmp_parts_f+0xa2>
     c7c:	82 17       	cp	r24, r18
     c7e:	93 07       	cpc	r25, r19
     c80:	a4 07       	cpc	r26, r20
     c82:	b5 07       	cpc	r27, r21
     c84:	40 f4       	brcc	.+16     	; 0xc96 <__fpcmp_parts_f+0xa8>
     c86:	11 23       	and	r17, r17
     c88:	19 f0       	breq	.+6      	; 0xc90 <__fpcmp_parts_f+0xa2>
     c8a:	61 e0       	ldi	r22, 0x01	; 1
     c8c:	70 e0       	ldi	r23, 0x00	; 0
     c8e:	05 c0       	rjmp	.+10     	; 0xc9a <__fpcmp_parts_f+0xac>
     c90:	6f ef       	ldi	r22, 0xFF	; 255
     c92:	7f ef       	ldi	r23, 0xFF	; 255
     c94:	02 c0       	rjmp	.+4      	; 0xc9a <__fpcmp_parts_f+0xac>
     c96:	60 e0       	ldi	r22, 0x00	; 0
     c98:	70 e0       	ldi	r23, 0x00	; 0
     c9a:	cb 01       	movw	r24, r22
     c9c:	1f 91       	pop	r17
     c9e:	08 95       	ret

00000ca0 <SetPinDirection>:
#include "STD_TYPES.h"
#include "BIT_MATH.h"
#include "DIO_reg2.h"

u8 SetPinDirection(u8 Copy_u8Port,u8 Copy_u8Pin,u8 Copy_u8Direction)
{
     ca0:	df 93       	push	r29
     ca2:	cf 93       	push	r28
     ca4:	cd b7       	in	r28, 0x3d	; 61
     ca6:	de b7       	in	r29, 0x3e	; 62
     ca8:	28 97       	sbiw	r28, 0x08	; 8
     caa:	0f b6       	in	r0, 0x3f	; 63
     cac:	f8 94       	cli
     cae:	de bf       	out	0x3e, r29	; 62
     cb0:	0f be       	out	0x3f, r0	; 63
     cb2:	cd bf       	out	0x3d, r28	; 61
     cb4:	8a 83       	std	Y+2, r24	; 0x02
     cb6:	6b 83       	std	Y+3, r22	; 0x03
     cb8:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_Error =0;
     cba:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Port <= DIO_PORTD && Copy_u8Pin <= PIN7)
     cbc:	8a 81       	ldd	r24, Y+2	; 0x02
     cbe:	84 30       	cpi	r24, 0x04	; 4
     cc0:	08 f0       	brcs	.+2      	; 0xcc4 <SetPinDirection+0x24>
     cc2:	f5 c0       	rjmp	.+490    	; 0xeae <SetPinDirection+0x20e>
     cc4:	8b 81       	ldd	r24, Y+3	; 0x03
     cc6:	88 30       	cpi	r24, 0x08	; 8
     cc8:	08 f0       	brcs	.+2      	; 0xccc <SetPinDirection+0x2c>
     cca:	f1 c0       	rjmp	.+482    	; 0xeae <SetPinDirection+0x20e>
	{
		if(Copy_u8Direction ==0 )
     ccc:	8c 81       	ldd	r24, Y+4	; 0x04
     cce:	88 23       	and	r24, r24
     cd0:	09 f0       	breq	.+2      	; 0xcd4 <SetPinDirection+0x34>
     cd2:	77 c0       	rjmp	.+238    	; 0xdc2 <SetPinDirection+0x122>
		{
			switch(Copy_u8Port)
     cd4:	8a 81       	ldd	r24, Y+2	; 0x02
     cd6:	28 2f       	mov	r18, r24
     cd8:	30 e0       	ldi	r19, 0x00	; 0
     cda:	38 87       	std	Y+8, r19	; 0x08
     cdc:	2f 83       	std	Y+7, r18	; 0x07
     cde:	8f 81       	ldd	r24, Y+7	; 0x07
     ce0:	98 85       	ldd	r25, Y+8	; 0x08
     ce2:	81 30       	cpi	r24, 0x01	; 1
     ce4:	91 05       	cpc	r25, r1
     ce6:	59 f1       	breq	.+86     	; 0xd3e <SetPinDirection+0x9e>
     ce8:	2f 81       	ldd	r18, Y+7	; 0x07
     cea:	38 85       	ldd	r19, Y+8	; 0x08
     cec:	22 30       	cpi	r18, 0x02	; 2
     cee:	31 05       	cpc	r19, r1
     cf0:	2c f4       	brge	.+10     	; 0xcfc <SetPinDirection+0x5c>
     cf2:	8f 81       	ldd	r24, Y+7	; 0x07
     cf4:	98 85       	ldd	r25, Y+8	; 0x08
     cf6:	00 97       	sbiw	r24, 0x00	; 0
     cf8:	69 f0       	breq	.+26     	; 0xd14 <SetPinDirection+0x74>
     cfa:	60 c0       	rjmp	.+192    	; 0xdbc <SetPinDirection+0x11c>
     cfc:	2f 81       	ldd	r18, Y+7	; 0x07
     cfe:	38 85       	ldd	r19, Y+8	; 0x08
     d00:	22 30       	cpi	r18, 0x02	; 2
     d02:	31 05       	cpc	r19, r1
     d04:	89 f1       	breq	.+98     	; 0xd68 <SetPinDirection+0xc8>
     d06:	8f 81       	ldd	r24, Y+7	; 0x07
     d08:	98 85       	ldd	r25, Y+8	; 0x08
     d0a:	83 30       	cpi	r24, 0x03	; 3
     d0c:	91 05       	cpc	r25, r1
     d0e:	09 f4       	brne	.+2      	; 0xd12 <SetPinDirection+0x72>
     d10:	40 c0       	rjmp	.+128    	; 0xd92 <SetPinDirection+0xf2>
     d12:	54 c0       	rjmp	.+168    	; 0xdbc <SetPinDirection+0x11c>
			{
			case DIO_PORTA : CLR_BIT(DDRA,Copy_u8Pin); break;
     d14:	aa e3       	ldi	r26, 0x3A	; 58
     d16:	b0 e0       	ldi	r27, 0x00	; 0
     d18:	ea e3       	ldi	r30, 0x3A	; 58
     d1a:	f0 e0       	ldi	r31, 0x00	; 0
     d1c:	80 81       	ld	r24, Z
     d1e:	48 2f       	mov	r20, r24
     d20:	8b 81       	ldd	r24, Y+3	; 0x03
     d22:	28 2f       	mov	r18, r24
     d24:	30 e0       	ldi	r19, 0x00	; 0
     d26:	81 e0       	ldi	r24, 0x01	; 1
     d28:	90 e0       	ldi	r25, 0x00	; 0
     d2a:	02 2e       	mov	r0, r18
     d2c:	02 c0       	rjmp	.+4      	; 0xd32 <SetPinDirection+0x92>
     d2e:	88 0f       	add	r24, r24
     d30:	99 1f       	adc	r25, r25
     d32:	0a 94       	dec	r0
     d34:	e2 f7       	brpl	.-8      	; 0xd2e <SetPinDirection+0x8e>
     d36:	80 95       	com	r24
     d38:	84 23       	and	r24, r20
     d3a:	8c 93       	st	X, r24
     d3c:	ba c0       	rjmp	.+372    	; 0xeb2 <SetPinDirection+0x212>
			case DIO_PORTB : CLR_BIT(DDRB,Copy_u8Pin); break;
     d3e:	a7 e3       	ldi	r26, 0x37	; 55
     d40:	b0 e0       	ldi	r27, 0x00	; 0
     d42:	e7 e3       	ldi	r30, 0x37	; 55
     d44:	f0 e0       	ldi	r31, 0x00	; 0
     d46:	80 81       	ld	r24, Z
     d48:	48 2f       	mov	r20, r24
     d4a:	8b 81       	ldd	r24, Y+3	; 0x03
     d4c:	28 2f       	mov	r18, r24
     d4e:	30 e0       	ldi	r19, 0x00	; 0
     d50:	81 e0       	ldi	r24, 0x01	; 1
     d52:	90 e0       	ldi	r25, 0x00	; 0
     d54:	02 2e       	mov	r0, r18
     d56:	02 c0       	rjmp	.+4      	; 0xd5c <SetPinDirection+0xbc>
     d58:	88 0f       	add	r24, r24
     d5a:	99 1f       	adc	r25, r25
     d5c:	0a 94       	dec	r0
     d5e:	e2 f7       	brpl	.-8      	; 0xd58 <SetPinDirection+0xb8>
     d60:	80 95       	com	r24
     d62:	84 23       	and	r24, r20
     d64:	8c 93       	st	X, r24
     d66:	a5 c0       	rjmp	.+330    	; 0xeb2 <SetPinDirection+0x212>
			case DIO_PORTC : CLR_BIT(DDRC,Copy_u8Pin); break;
     d68:	a4 e3       	ldi	r26, 0x34	; 52
     d6a:	b0 e0       	ldi	r27, 0x00	; 0
     d6c:	e4 e3       	ldi	r30, 0x34	; 52
     d6e:	f0 e0       	ldi	r31, 0x00	; 0
     d70:	80 81       	ld	r24, Z
     d72:	48 2f       	mov	r20, r24
     d74:	8b 81       	ldd	r24, Y+3	; 0x03
     d76:	28 2f       	mov	r18, r24
     d78:	30 e0       	ldi	r19, 0x00	; 0
     d7a:	81 e0       	ldi	r24, 0x01	; 1
     d7c:	90 e0       	ldi	r25, 0x00	; 0
     d7e:	02 2e       	mov	r0, r18
     d80:	02 c0       	rjmp	.+4      	; 0xd86 <SetPinDirection+0xe6>
     d82:	88 0f       	add	r24, r24
     d84:	99 1f       	adc	r25, r25
     d86:	0a 94       	dec	r0
     d88:	e2 f7       	brpl	.-8      	; 0xd82 <SetPinDirection+0xe2>
     d8a:	80 95       	com	r24
     d8c:	84 23       	and	r24, r20
     d8e:	8c 93       	st	X, r24
     d90:	90 c0       	rjmp	.+288    	; 0xeb2 <SetPinDirection+0x212>
			case DIO_PORTD : CLR_BIT(DDRD,Copy_u8Pin); break;
     d92:	a1 e3       	ldi	r26, 0x31	; 49
     d94:	b0 e0       	ldi	r27, 0x00	; 0
     d96:	e1 e3       	ldi	r30, 0x31	; 49
     d98:	f0 e0       	ldi	r31, 0x00	; 0
     d9a:	80 81       	ld	r24, Z
     d9c:	48 2f       	mov	r20, r24
     d9e:	8b 81       	ldd	r24, Y+3	; 0x03
     da0:	28 2f       	mov	r18, r24
     da2:	30 e0       	ldi	r19, 0x00	; 0
     da4:	81 e0       	ldi	r24, 0x01	; 1
     da6:	90 e0       	ldi	r25, 0x00	; 0
     da8:	02 2e       	mov	r0, r18
     daa:	02 c0       	rjmp	.+4      	; 0xdb0 <SetPinDirection+0x110>
     dac:	88 0f       	add	r24, r24
     dae:	99 1f       	adc	r25, r25
     db0:	0a 94       	dec	r0
     db2:	e2 f7       	brpl	.-8      	; 0xdac <SetPinDirection+0x10c>
     db4:	80 95       	com	r24
     db6:	84 23       	and	r24, r20
     db8:	8c 93       	st	X, r24
     dba:	7b c0       	rjmp	.+246    	; 0xeb2 <SetPinDirection+0x212>
			default: Local_Error =1; break;
     dbc:	81 e0       	ldi	r24, 0x01	; 1
     dbe:	89 83       	std	Y+1, r24	; 0x01
     dc0:	78 c0       	rjmp	.+240    	; 0xeb2 <SetPinDirection+0x212>

			}

		}
		else if (Copy_u8Direction ==1)
     dc2:	8c 81       	ldd	r24, Y+4	; 0x04
     dc4:	81 30       	cpi	r24, 0x01	; 1
     dc6:	09 f0       	breq	.+2      	; 0xdca <SetPinDirection+0x12a>
     dc8:	74 c0       	rjmp	.+232    	; 0xeb2 <SetPinDirection+0x212>
		{
			switch(Copy_u8Port)
     dca:	8a 81       	ldd	r24, Y+2	; 0x02
     dcc:	28 2f       	mov	r18, r24
     dce:	30 e0       	ldi	r19, 0x00	; 0
     dd0:	3e 83       	std	Y+6, r19	; 0x06
     dd2:	2d 83       	std	Y+5, r18	; 0x05
     dd4:	8d 81       	ldd	r24, Y+5	; 0x05
     dd6:	9e 81       	ldd	r25, Y+6	; 0x06
     dd8:	81 30       	cpi	r24, 0x01	; 1
     dda:	91 05       	cpc	r25, r1
     ddc:	49 f1       	breq	.+82     	; 0xe30 <SetPinDirection+0x190>
     dde:	2d 81       	ldd	r18, Y+5	; 0x05
     de0:	3e 81       	ldd	r19, Y+6	; 0x06
     de2:	22 30       	cpi	r18, 0x02	; 2
     de4:	31 05       	cpc	r19, r1
     de6:	2c f4       	brge	.+10     	; 0xdf2 <SetPinDirection+0x152>
     de8:	8d 81       	ldd	r24, Y+5	; 0x05
     dea:	9e 81       	ldd	r25, Y+6	; 0x06
     dec:	00 97       	sbiw	r24, 0x00	; 0
     dee:	61 f0       	breq	.+24     	; 0xe08 <SetPinDirection+0x168>
     df0:	5b c0       	rjmp	.+182    	; 0xea8 <SetPinDirection+0x208>
     df2:	2d 81       	ldd	r18, Y+5	; 0x05
     df4:	3e 81       	ldd	r19, Y+6	; 0x06
     df6:	22 30       	cpi	r18, 0x02	; 2
     df8:	31 05       	cpc	r19, r1
     dfa:	71 f1       	breq	.+92     	; 0xe58 <SetPinDirection+0x1b8>
     dfc:	8d 81       	ldd	r24, Y+5	; 0x05
     dfe:	9e 81       	ldd	r25, Y+6	; 0x06
     e00:	83 30       	cpi	r24, 0x03	; 3
     e02:	91 05       	cpc	r25, r1
     e04:	e9 f1       	breq	.+122    	; 0xe80 <SetPinDirection+0x1e0>
     e06:	50 c0       	rjmp	.+160    	; 0xea8 <SetPinDirection+0x208>
			{
			case DIO_PORTA : SET_BIT(DDRA,Copy_u8Pin); break;
     e08:	aa e3       	ldi	r26, 0x3A	; 58
     e0a:	b0 e0       	ldi	r27, 0x00	; 0
     e0c:	ea e3       	ldi	r30, 0x3A	; 58
     e0e:	f0 e0       	ldi	r31, 0x00	; 0
     e10:	80 81       	ld	r24, Z
     e12:	48 2f       	mov	r20, r24
     e14:	8b 81       	ldd	r24, Y+3	; 0x03
     e16:	28 2f       	mov	r18, r24
     e18:	30 e0       	ldi	r19, 0x00	; 0
     e1a:	81 e0       	ldi	r24, 0x01	; 1
     e1c:	90 e0       	ldi	r25, 0x00	; 0
     e1e:	02 2e       	mov	r0, r18
     e20:	02 c0       	rjmp	.+4      	; 0xe26 <SetPinDirection+0x186>
     e22:	88 0f       	add	r24, r24
     e24:	99 1f       	adc	r25, r25
     e26:	0a 94       	dec	r0
     e28:	e2 f7       	brpl	.-8      	; 0xe22 <SetPinDirection+0x182>
     e2a:	84 2b       	or	r24, r20
     e2c:	8c 93       	st	X, r24
     e2e:	41 c0       	rjmp	.+130    	; 0xeb2 <SetPinDirection+0x212>
			case DIO_PORTB : SET_BIT(DDRB,Copy_u8Pin); break;
     e30:	a7 e3       	ldi	r26, 0x37	; 55
     e32:	b0 e0       	ldi	r27, 0x00	; 0
     e34:	e7 e3       	ldi	r30, 0x37	; 55
     e36:	f0 e0       	ldi	r31, 0x00	; 0
     e38:	80 81       	ld	r24, Z
     e3a:	48 2f       	mov	r20, r24
     e3c:	8b 81       	ldd	r24, Y+3	; 0x03
     e3e:	28 2f       	mov	r18, r24
     e40:	30 e0       	ldi	r19, 0x00	; 0
     e42:	81 e0       	ldi	r24, 0x01	; 1
     e44:	90 e0       	ldi	r25, 0x00	; 0
     e46:	02 2e       	mov	r0, r18
     e48:	02 c0       	rjmp	.+4      	; 0xe4e <SetPinDirection+0x1ae>
     e4a:	88 0f       	add	r24, r24
     e4c:	99 1f       	adc	r25, r25
     e4e:	0a 94       	dec	r0
     e50:	e2 f7       	brpl	.-8      	; 0xe4a <SetPinDirection+0x1aa>
     e52:	84 2b       	or	r24, r20
     e54:	8c 93       	st	X, r24
     e56:	2d c0       	rjmp	.+90     	; 0xeb2 <SetPinDirection+0x212>
			case DIO_PORTC : SET_BIT(DDRC,Copy_u8Pin); break;
     e58:	a4 e3       	ldi	r26, 0x34	; 52
     e5a:	b0 e0       	ldi	r27, 0x00	; 0
     e5c:	e4 e3       	ldi	r30, 0x34	; 52
     e5e:	f0 e0       	ldi	r31, 0x00	; 0
     e60:	80 81       	ld	r24, Z
     e62:	48 2f       	mov	r20, r24
     e64:	8b 81       	ldd	r24, Y+3	; 0x03
     e66:	28 2f       	mov	r18, r24
     e68:	30 e0       	ldi	r19, 0x00	; 0
     e6a:	81 e0       	ldi	r24, 0x01	; 1
     e6c:	90 e0       	ldi	r25, 0x00	; 0
     e6e:	02 2e       	mov	r0, r18
     e70:	02 c0       	rjmp	.+4      	; 0xe76 <SetPinDirection+0x1d6>
     e72:	88 0f       	add	r24, r24
     e74:	99 1f       	adc	r25, r25
     e76:	0a 94       	dec	r0
     e78:	e2 f7       	brpl	.-8      	; 0xe72 <SetPinDirection+0x1d2>
     e7a:	84 2b       	or	r24, r20
     e7c:	8c 93       	st	X, r24
     e7e:	19 c0       	rjmp	.+50     	; 0xeb2 <SetPinDirection+0x212>
			case DIO_PORTD : SET_BIT(DDRD,Copy_u8Pin); break;
     e80:	a1 e3       	ldi	r26, 0x31	; 49
     e82:	b0 e0       	ldi	r27, 0x00	; 0
     e84:	e1 e3       	ldi	r30, 0x31	; 49
     e86:	f0 e0       	ldi	r31, 0x00	; 0
     e88:	80 81       	ld	r24, Z
     e8a:	48 2f       	mov	r20, r24
     e8c:	8b 81       	ldd	r24, Y+3	; 0x03
     e8e:	28 2f       	mov	r18, r24
     e90:	30 e0       	ldi	r19, 0x00	; 0
     e92:	81 e0       	ldi	r24, 0x01	; 1
     e94:	90 e0       	ldi	r25, 0x00	; 0
     e96:	02 2e       	mov	r0, r18
     e98:	02 c0       	rjmp	.+4      	; 0xe9e <SetPinDirection+0x1fe>
     e9a:	88 0f       	add	r24, r24
     e9c:	99 1f       	adc	r25, r25
     e9e:	0a 94       	dec	r0
     ea0:	e2 f7       	brpl	.-8      	; 0xe9a <SetPinDirection+0x1fa>
     ea2:	84 2b       	or	r24, r20
     ea4:	8c 93       	st	X, r24
     ea6:	05 c0       	rjmp	.+10     	; 0xeb2 <SetPinDirection+0x212>
			default: Local_Error =1; break;
     ea8:	81 e0       	ldi	r24, 0x01	; 1
     eaa:	89 83       	std	Y+1, r24	; 0x01
     eac:	02 c0       	rjmp	.+4      	; 0xeb2 <SetPinDirection+0x212>
			}
		}
	}
		else
		{
			Local_Error =1;
     eae:	81 e0       	ldi	r24, 0x01	; 1
     eb0:	89 83       	std	Y+1, r24	; 0x01
		}

	return Local_Error;
     eb2:	89 81       	ldd	r24, Y+1	; 0x01

}
     eb4:	28 96       	adiw	r28, 0x08	; 8
     eb6:	0f b6       	in	r0, 0x3f	; 63
     eb8:	f8 94       	cli
     eba:	de bf       	out	0x3e, r29	; 62
     ebc:	0f be       	out	0x3f, r0	; 63
     ebe:	cd bf       	out	0x3d, r28	; 61
     ec0:	cf 91       	pop	r28
     ec2:	df 91       	pop	r29
     ec4:	08 95       	ret

00000ec6 <SetPortDirection>:

u8 SetPortDirection(u8 Copy_u8Port,u8 Copy_u8Value)
{ u8 Local_Error =0;
     ec6:	df 93       	push	r29
     ec8:	cf 93       	push	r28
     eca:	00 d0       	rcall	.+0      	; 0xecc <SetPortDirection+0x6>
     ecc:	00 d0       	rcall	.+0      	; 0xece <SetPortDirection+0x8>
     ece:	0f 92       	push	r0
     ed0:	cd b7       	in	r28, 0x3d	; 61
     ed2:	de b7       	in	r29, 0x3e	; 62
     ed4:	8a 83       	std	Y+2, r24	; 0x02
     ed6:	6b 83       	std	Y+3, r22	; 0x03
     ed8:	19 82       	std	Y+1, r1	; 0x01
if(Copy_u8Port <= DIO_PORTD )
     eda:	8a 81       	ldd	r24, Y+2	; 0x02
     edc:	84 30       	cpi	r24, 0x04	; 4
     ede:	b0 f5       	brcc	.+108    	; 0xf4c <SetPortDirection+0x86>
{
	switch(Copy_u8Port)
     ee0:	8a 81       	ldd	r24, Y+2	; 0x02
     ee2:	28 2f       	mov	r18, r24
     ee4:	30 e0       	ldi	r19, 0x00	; 0
     ee6:	3d 83       	std	Y+5, r19	; 0x05
     ee8:	2c 83       	std	Y+4, r18	; 0x04
     eea:	8c 81       	ldd	r24, Y+4	; 0x04
     eec:	9d 81       	ldd	r25, Y+5	; 0x05
     eee:	81 30       	cpi	r24, 0x01	; 1
     ef0:	91 05       	cpc	r25, r1
     ef2:	d1 f0       	breq	.+52     	; 0xf28 <SetPortDirection+0x62>
     ef4:	2c 81       	ldd	r18, Y+4	; 0x04
     ef6:	3d 81       	ldd	r19, Y+5	; 0x05
     ef8:	22 30       	cpi	r18, 0x02	; 2
     efa:	31 05       	cpc	r19, r1
     efc:	2c f4       	brge	.+10     	; 0xf08 <SetPortDirection+0x42>
     efe:	8c 81       	ldd	r24, Y+4	; 0x04
     f00:	9d 81       	ldd	r25, Y+5	; 0x05
     f02:	00 97       	sbiw	r24, 0x00	; 0
     f04:	61 f0       	breq	.+24     	; 0xf1e <SetPortDirection+0x58>
     f06:	1f c0       	rjmp	.+62     	; 0xf46 <SetPortDirection+0x80>
     f08:	2c 81       	ldd	r18, Y+4	; 0x04
     f0a:	3d 81       	ldd	r19, Y+5	; 0x05
     f0c:	22 30       	cpi	r18, 0x02	; 2
     f0e:	31 05       	cpc	r19, r1
     f10:	81 f0       	breq	.+32     	; 0xf32 <SetPortDirection+0x6c>
     f12:	8c 81       	ldd	r24, Y+4	; 0x04
     f14:	9d 81       	ldd	r25, Y+5	; 0x05
     f16:	83 30       	cpi	r24, 0x03	; 3
     f18:	91 05       	cpc	r25, r1
     f1a:	81 f0       	breq	.+32     	; 0xf3c <SetPortDirection+0x76>
     f1c:	14 c0       	rjmp	.+40     	; 0xf46 <SetPortDirection+0x80>
	{
	case DIO_PORTA : DDRA = Copy_u8Value; break;
     f1e:	ea e3       	ldi	r30, 0x3A	; 58
     f20:	f0 e0       	ldi	r31, 0x00	; 0
     f22:	8b 81       	ldd	r24, Y+3	; 0x03
     f24:	80 83       	st	Z, r24
     f26:	13 c0       	rjmp	.+38     	; 0xf4e <SetPortDirection+0x88>
	case DIO_PORTB : DDRB = Copy_u8Value; break;
     f28:	e7 e3       	ldi	r30, 0x37	; 55
     f2a:	f0 e0       	ldi	r31, 0x00	; 0
     f2c:	8b 81       	ldd	r24, Y+3	; 0x03
     f2e:	80 83       	st	Z, r24
     f30:	0e c0       	rjmp	.+28     	; 0xf4e <SetPortDirection+0x88>
	case DIO_PORTC : DDRC = Copy_u8Value; break;
     f32:	e4 e3       	ldi	r30, 0x34	; 52
     f34:	f0 e0       	ldi	r31, 0x00	; 0
     f36:	8b 81       	ldd	r24, Y+3	; 0x03
     f38:	80 83       	st	Z, r24
     f3a:	09 c0       	rjmp	.+18     	; 0xf4e <SetPortDirection+0x88>
	case DIO_PORTD : DDRD = Copy_u8Value; break;
     f3c:	e1 e3       	ldi	r30, 0x31	; 49
     f3e:	f0 e0       	ldi	r31, 0x00	; 0
     f40:	8b 81       	ldd	r24, Y+3	; 0x03
     f42:	80 83       	st	Z, r24
     f44:	04 c0       	rjmp	.+8      	; 0xf4e <SetPortDirection+0x88>
	default: Local_Error =1; break;
     f46:	81 e0       	ldi	r24, 0x01	; 1
     f48:	89 83       	std	Y+1, r24	; 0x01
     f4a:	01 c0       	rjmp	.+2      	; 0xf4e <SetPortDirection+0x88>


}
else
{
	Local_Error =0;
     f4c:	19 82       	std	Y+1, r1	; 0x01
}
return Local_Error;
     f4e:	89 81       	ldd	r24, Y+1	; 0x01
}
     f50:	0f 90       	pop	r0
     f52:	0f 90       	pop	r0
     f54:	0f 90       	pop	r0
     f56:	0f 90       	pop	r0
     f58:	0f 90       	pop	r0
     f5a:	cf 91       	pop	r28
     f5c:	df 91       	pop	r29
     f5e:	08 95       	ret

00000f60 <SetPinValue>:
u8 SetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin,u8 Copy_u8Value)
{
     f60:	df 93       	push	r29
     f62:	cf 93       	push	r28
     f64:	cd b7       	in	r28, 0x3d	; 61
     f66:	de b7       	in	r29, 0x3e	; 62
     f68:	28 97       	sbiw	r28, 0x08	; 8
     f6a:	0f b6       	in	r0, 0x3f	; 63
     f6c:	f8 94       	cli
     f6e:	de bf       	out	0x3e, r29	; 62
     f70:	0f be       	out	0x3f, r0	; 63
     f72:	cd bf       	out	0x3d, r28	; 61
     f74:	8a 83       	std	Y+2, r24	; 0x02
     f76:	6b 83       	std	Y+3, r22	; 0x03
     f78:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_Error =0;
     f7a:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Port <= DIO_PORTD && Copy_u8Pin <= PIN7)
     f7c:	8a 81       	ldd	r24, Y+2	; 0x02
     f7e:	84 30       	cpi	r24, 0x04	; 4
     f80:	08 f0       	brcs	.+2      	; 0xf84 <SetPinValue+0x24>
     f82:	f5 c0       	rjmp	.+490    	; 0x116e <SetPinValue+0x20e>
     f84:	8b 81       	ldd	r24, Y+3	; 0x03
     f86:	88 30       	cpi	r24, 0x08	; 8
     f88:	08 f0       	brcs	.+2      	; 0xf8c <SetPinValue+0x2c>
     f8a:	f1 c0       	rjmp	.+482    	; 0x116e <SetPinValue+0x20e>
	{
		if(Copy_u8Value ==HIGH)
     f8c:	8c 81       	ldd	r24, Y+4	; 0x04
     f8e:	81 30       	cpi	r24, 0x01	; 1
     f90:	09 f0       	breq	.+2      	; 0xf94 <SetPinValue+0x34>
     f92:	72 c0       	rjmp	.+228    	; 0x1078 <SetPinValue+0x118>
		{
			switch(Copy_u8Port)
     f94:	8a 81       	ldd	r24, Y+2	; 0x02
     f96:	28 2f       	mov	r18, r24
     f98:	30 e0       	ldi	r19, 0x00	; 0
     f9a:	38 87       	std	Y+8, r19	; 0x08
     f9c:	2f 83       	std	Y+7, r18	; 0x07
     f9e:	8f 81       	ldd	r24, Y+7	; 0x07
     fa0:	98 85       	ldd	r25, Y+8	; 0x08
     fa2:	81 30       	cpi	r24, 0x01	; 1
     fa4:	91 05       	cpc	r25, r1
     fa6:	49 f1       	breq	.+82     	; 0xffa <SetPinValue+0x9a>
     fa8:	2f 81       	ldd	r18, Y+7	; 0x07
     faa:	38 85       	ldd	r19, Y+8	; 0x08
     fac:	22 30       	cpi	r18, 0x02	; 2
     fae:	31 05       	cpc	r19, r1
     fb0:	2c f4       	brge	.+10     	; 0xfbc <SetPinValue+0x5c>
     fb2:	8f 81       	ldd	r24, Y+7	; 0x07
     fb4:	98 85       	ldd	r25, Y+8	; 0x08
     fb6:	00 97       	sbiw	r24, 0x00	; 0
     fb8:	61 f0       	breq	.+24     	; 0xfd2 <SetPinValue+0x72>
     fba:	5b c0       	rjmp	.+182    	; 0x1072 <SetPinValue+0x112>
     fbc:	2f 81       	ldd	r18, Y+7	; 0x07
     fbe:	38 85       	ldd	r19, Y+8	; 0x08
     fc0:	22 30       	cpi	r18, 0x02	; 2
     fc2:	31 05       	cpc	r19, r1
     fc4:	71 f1       	breq	.+92     	; 0x1022 <SetPinValue+0xc2>
     fc6:	8f 81       	ldd	r24, Y+7	; 0x07
     fc8:	98 85       	ldd	r25, Y+8	; 0x08
     fca:	83 30       	cpi	r24, 0x03	; 3
     fcc:	91 05       	cpc	r25, r1
     fce:	e9 f1       	breq	.+122    	; 0x104a <SetPinValue+0xea>
     fd0:	50 c0       	rjmp	.+160    	; 0x1072 <SetPinValue+0x112>
			{
			case DIO_PORTA : SET_BIT(PORTA ,Copy_u8Pin); break;
     fd2:	ab e3       	ldi	r26, 0x3B	; 59
     fd4:	b0 e0       	ldi	r27, 0x00	; 0
     fd6:	eb e3       	ldi	r30, 0x3B	; 59
     fd8:	f0 e0       	ldi	r31, 0x00	; 0
     fda:	80 81       	ld	r24, Z
     fdc:	48 2f       	mov	r20, r24
     fde:	8b 81       	ldd	r24, Y+3	; 0x03
     fe0:	28 2f       	mov	r18, r24
     fe2:	30 e0       	ldi	r19, 0x00	; 0
     fe4:	81 e0       	ldi	r24, 0x01	; 1
     fe6:	90 e0       	ldi	r25, 0x00	; 0
     fe8:	02 2e       	mov	r0, r18
     fea:	02 c0       	rjmp	.+4      	; 0xff0 <SetPinValue+0x90>
     fec:	88 0f       	add	r24, r24
     fee:	99 1f       	adc	r25, r25
     ff0:	0a 94       	dec	r0
     ff2:	e2 f7       	brpl	.-8      	; 0xfec <SetPinValue+0x8c>
     ff4:	84 2b       	or	r24, r20
     ff6:	8c 93       	st	X, r24
     ff8:	bc c0       	rjmp	.+376    	; 0x1172 <SetPinValue+0x212>
			case DIO_PORTB : SET_BIT(PORTB ,Copy_u8Pin); break;
     ffa:	a8 e3       	ldi	r26, 0x38	; 56
     ffc:	b0 e0       	ldi	r27, 0x00	; 0
     ffe:	e8 e3       	ldi	r30, 0x38	; 56
    1000:	f0 e0       	ldi	r31, 0x00	; 0
    1002:	80 81       	ld	r24, Z
    1004:	48 2f       	mov	r20, r24
    1006:	8b 81       	ldd	r24, Y+3	; 0x03
    1008:	28 2f       	mov	r18, r24
    100a:	30 e0       	ldi	r19, 0x00	; 0
    100c:	81 e0       	ldi	r24, 0x01	; 1
    100e:	90 e0       	ldi	r25, 0x00	; 0
    1010:	02 2e       	mov	r0, r18
    1012:	02 c0       	rjmp	.+4      	; 0x1018 <SetPinValue+0xb8>
    1014:	88 0f       	add	r24, r24
    1016:	99 1f       	adc	r25, r25
    1018:	0a 94       	dec	r0
    101a:	e2 f7       	brpl	.-8      	; 0x1014 <SetPinValue+0xb4>
    101c:	84 2b       	or	r24, r20
    101e:	8c 93       	st	X, r24
    1020:	a8 c0       	rjmp	.+336    	; 0x1172 <SetPinValue+0x212>
			case DIO_PORTC : SET_BIT(PORTC ,Copy_u8Pin); break;
    1022:	a5 e3       	ldi	r26, 0x35	; 53
    1024:	b0 e0       	ldi	r27, 0x00	; 0
    1026:	e5 e3       	ldi	r30, 0x35	; 53
    1028:	f0 e0       	ldi	r31, 0x00	; 0
    102a:	80 81       	ld	r24, Z
    102c:	48 2f       	mov	r20, r24
    102e:	8b 81       	ldd	r24, Y+3	; 0x03
    1030:	28 2f       	mov	r18, r24
    1032:	30 e0       	ldi	r19, 0x00	; 0
    1034:	81 e0       	ldi	r24, 0x01	; 1
    1036:	90 e0       	ldi	r25, 0x00	; 0
    1038:	02 2e       	mov	r0, r18
    103a:	02 c0       	rjmp	.+4      	; 0x1040 <SetPinValue+0xe0>
    103c:	88 0f       	add	r24, r24
    103e:	99 1f       	adc	r25, r25
    1040:	0a 94       	dec	r0
    1042:	e2 f7       	brpl	.-8      	; 0x103c <SetPinValue+0xdc>
    1044:	84 2b       	or	r24, r20
    1046:	8c 93       	st	X, r24
    1048:	94 c0       	rjmp	.+296    	; 0x1172 <SetPinValue+0x212>
			case DIO_PORTD : SET_BIT(PORTD ,Copy_u8Pin); break;
    104a:	a2 e3       	ldi	r26, 0x32	; 50
    104c:	b0 e0       	ldi	r27, 0x00	; 0
    104e:	e2 e3       	ldi	r30, 0x32	; 50
    1050:	f0 e0       	ldi	r31, 0x00	; 0
    1052:	80 81       	ld	r24, Z
    1054:	48 2f       	mov	r20, r24
    1056:	8b 81       	ldd	r24, Y+3	; 0x03
    1058:	28 2f       	mov	r18, r24
    105a:	30 e0       	ldi	r19, 0x00	; 0
    105c:	81 e0       	ldi	r24, 0x01	; 1
    105e:	90 e0       	ldi	r25, 0x00	; 0
    1060:	02 2e       	mov	r0, r18
    1062:	02 c0       	rjmp	.+4      	; 0x1068 <SetPinValue+0x108>
    1064:	88 0f       	add	r24, r24
    1066:	99 1f       	adc	r25, r25
    1068:	0a 94       	dec	r0
    106a:	e2 f7       	brpl	.-8      	; 0x1064 <SetPinValue+0x104>
    106c:	84 2b       	or	r24, r20
    106e:	8c 93       	st	X, r24
    1070:	80 c0       	rjmp	.+256    	; 0x1172 <SetPinValue+0x212>
			default : Local_Error =1; break;
    1072:	81 e0       	ldi	r24, 0x01	; 1
    1074:	89 83       	std	Y+1, r24	; 0x01
    1076:	7d c0       	rjmp	.+250    	; 0x1172 <SetPinValue+0x212>
			}
		}
		else if(Copy_u8Value ==LOW)
    1078:	8c 81       	ldd	r24, Y+4	; 0x04
    107a:	88 23       	and	r24, r24
    107c:	09 f0       	breq	.+2      	; 0x1080 <SetPinValue+0x120>
    107e:	79 c0       	rjmp	.+242    	; 0x1172 <SetPinValue+0x212>
		{switch(Copy_u8Port){
    1080:	8a 81       	ldd	r24, Y+2	; 0x02
    1082:	28 2f       	mov	r18, r24
    1084:	30 e0       	ldi	r19, 0x00	; 0
    1086:	3e 83       	std	Y+6, r19	; 0x06
    1088:	2d 83       	std	Y+5, r18	; 0x05
    108a:	8d 81       	ldd	r24, Y+5	; 0x05
    108c:	9e 81       	ldd	r25, Y+6	; 0x06
    108e:	81 30       	cpi	r24, 0x01	; 1
    1090:	91 05       	cpc	r25, r1
    1092:	59 f1       	breq	.+86     	; 0x10ea <SetPinValue+0x18a>
    1094:	2d 81       	ldd	r18, Y+5	; 0x05
    1096:	3e 81       	ldd	r19, Y+6	; 0x06
    1098:	22 30       	cpi	r18, 0x02	; 2
    109a:	31 05       	cpc	r19, r1
    109c:	2c f4       	brge	.+10     	; 0x10a8 <SetPinValue+0x148>
    109e:	8d 81       	ldd	r24, Y+5	; 0x05
    10a0:	9e 81       	ldd	r25, Y+6	; 0x06
    10a2:	00 97       	sbiw	r24, 0x00	; 0
    10a4:	69 f0       	breq	.+26     	; 0x10c0 <SetPinValue+0x160>
    10a6:	60 c0       	rjmp	.+192    	; 0x1168 <SetPinValue+0x208>
    10a8:	2d 81       	ldd	r18, Y+5	; 0x05
    10aa:	3e 81       	ldd	r19, Y+6	; 0x06
    10ac:	22 30       	cpi	r18, 0x02	; 2
    10ae:	31 05       	cpc	r19, r1
    10b0:	89 f1       	breq	.+98     	; 0x1114 <SetPinValue+0x1b4>
    10b2:	8d 81       	ldd	r24, Y+5	; 0x05
    10b4:	9e 81       	ldd	r25, Y+6	; 0x06
    10b6:	83 30       	cpi	r24, 0x03	; 3
    10b8:	91 05       	cpc	r25, r1
    10ba:	09 f4       	brne	.+2      	; 0x10be <SetPinValue+0x15e>
    10bc:	40 c0       	rjmp	.+128    	; 0x113e <SetPinValue+0x1de>
    10be:	54 c0       	rjmp	.+168    	; 0x1168 <SetPinValue+0x208>
case DIO_PORTA : CLR_BIT(PORTA ,Copy_u8Pin); break;
    10c0:	ab e3       	ldi	r26, 0x3B	; 59
    10c2:	b0 e0       	ldi	r27, 0x00	; 0
    10c4:	eb e3       	ldi	r30, 0x3B	; 59
    10c6:	f0 e0       	ldi	r31, 0x00	; 0
    10c8:	80 81       	ld	r24, Z
    10ca:	48 2f       	mov	r20, r24
    10cc:	8b 81       	ldd	r24, Y+3	; 0x03
    10ce:	28 2f       	mov	r18, r24
    10d0:	30 e0       	ldi	r19, 0x00	; 0
    10d2:	81 e0       	ldi	r24, 0x01	; 1
    10d4:	90 e0       	ldi	r25, 0x00	; 0
    10d6:	02 2e       	mov	r0, r18
    10d8:	02 c0       	rjmp	.+4      	; 0x10de <SetPinValue+0x17e>
    10da:	88 0f       	add	r24, r24
    10dc:	99 1f       	adc	r25, r25
    10de:	0a 94       	dec	r0
    10e0:	e2 f7       	brpl	.-8      	; 0x10da <SetPinValue+0x17a>
    10e2:	80 95       	com	r24
    10e4:	84 23       	and	r24, r20
    10e6:	8c 93       	st	X, r24
    10e8:	44 c0       	rjmp	.+136    	; 0x1172 <SetPinValue+0x212>
case DIO_PORTB : CLR_BIT(PORTB ,Copy_u8Pin); break;
    10ea:	a8 e3       	ldi	r26, 0x38	; 56
    10ec:	b0 e0       	ldi	r27, 0x00	; 0
    10ee:	e8 e3       	ldi	r30, 0x38	; 56
    10f0:	f0 e0       	ldi	r31, 0x00	; 0
    10f2:	80 81       	ld	r24, Z
    10f4:	48 2f       	mov	r20, r24
    10f6:	8b 81       	ldd	r24, Y+3	; 0x03
    10f8:	28 2f       	mov	r18, r24
    10fa:	30 e0       	ldi	r19, 0x00	; 0
    10fc:	81 e0       	ldi	r24, 0x01	; 1
    10fe:	90 e0       	ldi	r25, 0x00	; 0
    1100:	02 2e       	mov	r0, r18
    1102:	02 c0       	rjmp	.+4      	; 0x1108 <SetPinValue+0x1a8>
    1104:	88 0f       	add	r24, r24
    1106:	99 1f       	adc	r25, r25
    1108:	0a 94       	dec	r0
    110a:	e2 f7       	brpl	.-8      	; 0x1104 <SetPinValue+0x1a4>
    110c:	80 95       	com	r24
    110e:	84 23       	and	r24, r20
    1110:	8c 93       	st	X, r24
    1112:	2f c0       	rjmp	.+94     	; 0x1172 <SetPinValue+0x212>
case DIO_PORTC : CLR_BIT(PORTC ,Copy_u8Pin); break;
    1114:	a5 e3       	ldi	r26, 0x35	; 53
    1116:	b0 e0       	ldi	r27, 0x00	; 0
    1118:	e5 e3       	ldi	r30, 0x35	; 53
    111a:	f0 e0       	ldi	r31, 0x00	; 0
    111c:	80 81       	ld	r24, Z
    111e:	48 2f       	mov	r20, r24
    1120:	8b 81       	ldd	r24, Y+3	; 0x03
    1122:	28 2f       	mov	r18, r24
    1124:	30 e0       	ldi	r19, 0x00	; 0
    1126:	81 e0       	ldi	r24, 0x01	; 1
    1128:	90 e0       	ldi	r25, 0x00	; 0
    112a:	02 2e       	mov	r0, r18
    112c:	02 c0       	rjmp	.+4      	; 0x1132 <SetPinValue+0x1d2>
    112e:	88 0f       	add	r24, r24
    1130:	99 1f       	adc	r25, r25
    1132:	0a 94       	dec	r0
    1134:	e2 f7       	brpl	.-8      	; 0x112e <SetPinValue+0x1ce>
    1136:	80 95       	com	r24
    1138:	84 23       	and	r24, r20
    113a:	8c 93       	st	X, r24
    113c:	1a c0       	rjmp	.+52     	; 0x1172 <SetPinValue+0x212>
case DIO_PORTD : CLR_BIT(PORTD ,Copy_u8Pin); break;
    113e:	a2 e3       	ldi	r26, 0x32	; 50
    1140:	b0 e0       	ldi	r27, 0x00	; 0
    1142:	e2 e3       	ldi	r30, 0x32	; 50
    1144:	f0 e0       	ldi	r31, 0x00	; 0
    1146:	80 81       	ld	r24, Z
    1148:	48 2f       	mov	r20, r24
    114a:	8b 81       	ldd	r24, Y+3	; 0x03
    114c:	28 2f       	mov	r18, r24
    114e:	30 e0       	ldi	r19, 0x00	; 0
    1150:	81 e0       	ldi	r24, 0x01	; 1
    1152:	90 e0       	ldi	r25, 0x00	; 0
    1154:	02 2e       	mov	r0, r18
    1156:	02 c0       	rjmp	.+4      	; 0x115c <SetPinValue+0x1fc>
    1158:	88 0f       	add	r24, r24
    115a:	99 1f       	adc	r25, r25
    115c:	0a 94       	dec	r0
    115e:	e2 f7       	brpl	.-8      	; 0x1158 <SetPinValue+0x1f8>
    1160:	80 95       	com	r24
    1162:	84 23       	and	r24, r20
    1164:	8c 93       	st	X, r24
    1166:	05 c0       	rjmp	.+10     	; 0x1172 <SetPinValue+0x212>
default : Local_Error=1; break;
    1168:	81 e0       	ldi	r24, 0x01	; 1
    116a:	89 83       	std	Y+1, r24	; 0x01
    116c:	02 c0       	rjmp	.+4      	; 0x1172 <SetPinValue+0x212>
		}
		}
	}
	else
	{
		Local_Error =1;
    116e:	81 e0       	ldi	r24, 0x01	; 1
    1170:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_Error;
    1172:	89 81       	ldd	r24, Y+1	; 0x01
}
    1174:	28 96       	adiw	r28, 0x08	; 8
    1176:	0f b6       	in	r0, 0x3f	; 63
    1178:	f8 94       	cli
    117a:	de bf       	out	0x3e, r29	; 62
    117c:	0f be       	out	0x3f, r0	; 63
    117e:	cd bf       	out	0x3d, r28	; 61
    1180:	cf 91       	pop	r28
    1182:	df 91       	pop	r29
    1184:	08 95       	ret

00001186 <SetPortValue>:
u8 SetPortValue(u8 Copy_u8Port,u8 Copy_u8Value){
    1186:	df 93       	push	r29
    1188:	cf 93       	push	r28
    118a:	00 d0       	rcall	.+0      	; 0x118c <SetPortValue+0x6>
    118c:	00 d0       	rcall	.+0      	; 0x118e <SetPortValue+0x8>
    118e:	0f 92       	push	r0
    1190:	cd b7       	in	r28, 0x3d	; 61
    1192:	de b7       	in	r29, 0x3e	; 62
    1194:	8a 83       	std	Y+2, r24	; 0x02
    1196:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_Error =0;
    1198:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Port <= DIO_PORTD)
    119a:	8a 81       	ldd	r24, Y+2	; 0x02
    119c:	84 30       	cpi	r24, 0x04	; 4
    119e:	b0 f5       	brcc	.+108    	; 0x120c <SetPortValue+0x86>
	{


		switch(Copy_u8Port)
    11a0:	8a 81       	ldd	r24, Y+2	; 0x02
    11a2:	28 2f       	mov	r18, r24
    11a4:	30 e0       	ldi	r19, 0x00	; 0
    11a6:	3d 83       	std	Y+5, r19	; 0x05
    11a8:	2c 83       	std	Y+4, r18	; 0x04
    11aa:	8c 81       	ldd	r24, Y+4	; 0x04
    11ac:	9d 81       	ldd	r25, Y+5	; 0x05
    11ae:	81 30       	cpi	r24, 0x01	; 1
    11b0:	91 05       	cpc	r25, r1
    11b2:	d1 f0       	breq	.+52     	; 0x11e8 <SetPortValue+0x62>
    11b4:	2c 81       	ldd	r18, Y+4	; 0x04
    11b6:	3d 81       	ldd	r19, Y+5	; 0x05
    11b8:	22 30       	cpi	r18, 0x02	; 2
    11ba:	31 05       	cpc	r19, r1
    11bc:	2c f4       	brge	.+10     	; 0x11c8 <SetPortValue+0x42>
    11be:	8c 81       	ldd	r24, Y+4	; 0x04
    11c0:	9d 81       	ldd	r25, Y+5	; 0x05
    11c2:	00 97       	sbiw	r24, 0x00	; 0
    11c4:	61 f0       	breq	.+24     	; 0x11de <SetPortValue+0x58>
    11c6:	1f c0       	rjmp	.+62     	; 0x1206 <SetPortValue+0x80>
    11c8:	2c 81       	ldd	r18, Y+4	; 0x04
    11ca:	3d 81       	ldd	r19, Y+5	; 0x05
    11cc:	22 30       	cpi	r18, 0x02	; 2
    11ce:	31 05       	cpc	r19, r1
    11d0:	81 f0       	breq	.+32     	; 0x11f2 <SetPortValue+0x6c>
    11d2:	8c 81       	ldd	r24, Y+4	; 0x04
    11d4:	9d 81       	ldd	r25, Y+5	; 0x05
    11d6:	83 30       	cpi	r24, 0x03	; 3
    11d8:	91 05       	cpc	r25, r1
    11da:	81 f0       	breq	.+32     	; 0x11fc <SetPortValue+0x76>
    11dc:	14 c0       	rjmp	.+40     	; 0x1206 <SetPortValue+0x80>
		{
		case DIO_PORTA : PORTA = Copy_u8Value; break;
    11de:	eb e3       	ldi	r30, 0x3B	; 59
    11e0:	f0 e0       	ldi	r31, 0x00	; 0
    11e2:	8b 81       	ldd	r24, Y+3	; 0x03
    11e4:	80 83       	st	Z, r24
    11e6:	14 c0       	rjmp	.+40     	; 0x1210 <SetPortValue+0x8a>
		case DIO_PORTB : PORTB = Copy_u8Value; break;
    11e8:	e8 e3       	ldi	r30, 0x38	; 56
    11ea:	f0 e0       	ldi	r31, 0x00	; 0
    11ec:	8b 81       	ldd	r24, Y+3	; 0x03
    11ee:	80 83       	st	Z, r24
    11f0:	0f c0       	rjmp	.+30     	; 0x1210 <SetPortValue+0x8a>
		case DIO_PORTC : PORTC = Copy_u8Value; break;
    11f2:	e5 e3       	ldi	r30, 0x35	; 53
    11f4:	f0 e0       	ldi	r31, 0x00	; 0
    11f6:	8b 81       	ldd	r24, Y+3	; 0x03
    11f8:	80 83       	st	Z, r24
    11fa:	0a c0       	rjmp	.+20     	; 0x1210 <SetPortValue+0x8a>
		case DIO_PORTD : PORTD = Copy_u8Value; break;
    11fc:	e2 e3       	ldi	r30, 0x32	; 50
    11fe:	f0 e0       	ldi	r31, 0x00	; 0
    1200:	8b 81       	ldd	r24, Y+3	; 0x03
    1202:	80 83       	st	Z, r24
    1204:	05 c0       	rjmp	.+10     	; 0x1210 <SetPortValue+0x8a>
		default : Local_Error =1; break;
    1206:	81 e0       	ldi	r24, 0x01	; 1
    1208:	89 83       	std	Y+1, r24	; 0x01
    120a:	02 c0       	rjmp	.+4      	; 0x1210 <SetPortValue+0x8a>
		}
	}

	else
	{
		Local_Error = 1;
    120c:	81 e0       	ldi	r24, 0x01	; 1
    120e:	89 83       	std	Y+1, r24	; 0x01
	}

		return Local_Error;
    1210:	89 81       	ldd	r24, Y+1	; 0x01
}
    1212:	0f 90       	pop	r0
    1214:	0f 90       	pop	r0
    1216:	0f 90       	pop	r0
    1218:	0f 90       	pop	r0
    121a:	0f 90       	pop	r0
    121c:	cf 91       	pop	r28
    121e:	df 91       	pop	r29
    1220:	08 95       	ret

00001222 <GetPinValue>:
u8 GetPinValue(u8 u8PortIdCopy, u8 u8PinIdCopy)
{
    1222:	df 93       	push	r29
    1224:	cf 93       	push	r28
    1226:	00 d0       	rcall	.+0      	; 0x1228 <GetPinValue+0x6>
    1228:	00 d0       	rcall	.+0      	; 0x122a <GetPinValue+0x8>
    122a:	0f 92       	push	r0
    122c:	cd b7       	in	r28, 0x3d	; 61
    122e:	de b7       	in	r29, 0x3e	; 62
    1230:	8a 83       	std	Y+2, r24	; 0x02
    1232:	6b 83       	std	Y+3, r22	; 0x03
	/* Define Local Variable to get the BIT Value */
	u8 u8ResultLocal;
	/* Make sure that the Port ID and Pin ID are in the valid range */
	if ((u8PortIdCopy <= PORTD) && (u8PinIdCopy <= PIN7))
    1234:	e2 e3       	ldi	r30, 0x32	; 50
    1236:	f0 e0       	ldi	r31, 0x00	; 0
    1238:	90 81       	ld	r25, Z
    123a:	8a 81       	ldd	r24, Y+2	; 0x02
    123c:	98 17       	cp	r25, r24
    123e:	08 f4       	brcc	.+2      	; 0x1242 <GetPinValue+0x20>
    1240:	6c c0       	rjmp	.+216    	; 0x131a <GetPinValue+0xf8>
    1242:	8b 81       	ldd	r24, Y+3	; 0x03
    1244:	88 30       	cpi	r24, 0x08	; 8
    1246:	08 f0       	brcs	.+2      	; 0x124a <GetPinValue+0x28>
    1248:	68 c0       	rjmp	.+208    	; 0x131a <GetPinValue+0xf8>
	{
		/* Check on the Required PORT Number */
		switch (u8PortIdCopy)
    124a:	8a 81       	ldd	r24, Y+2	; 0x02
    124c:	28 2f       	mov	r18, r24
    124e:	30 e0       	ldi	r19, 0x00	; 0
    1250:	3d 83       	std	Y+5, r19	; 0x05
    1252:	2c 83       	std	Y+4, r18	; 0x04
    1254:	4c 81       	ldd	r20, Y+4	; 0x04
    1256:	5d 81       	ldd	r21, Y+5	; 0x05
    1258:	41 30       	cpi	r20, 0x01	; 1
    125a:	51 05       	cpc	r21, r1
    125c:	41 f1       	breq	.+80     	; 0x12ae <GetPinValue+0x8c>
    125e:	8c 81       	ldd	r24, Y+4	; 0x04
    1260:	9d 81       	ldd	r25, Y+5	; 0x05
    1262:	82 30       	cpi	r24, 0x02	; 2
    1264:	91 05       	cpc	r25, r1
    1266:	34 f4       	brge	.+12     	; 0x1274 <GetPinValue+0x52>
    1268:	2c 81       	ldd	r18, Y+4	; 0x04
    126a:	3d 81       	ldd	r19, Y+5	; 0x05
    126c:	21 15       	cp	r18, r1
    126e:	31 05       	cpc	r19, r1
    1270:	61 f0       	breq	.+24     	; 0x128a <GetPinValue+0x68>
    1272:	55 c0       	rjmp	.+170    	; 0x131e <GetPinValue+0xfc>
    1274:	4c 81       	ldd	r20, Y+4	; 0x04
    1276:	5d 81       	ldd	r21, Y+5	; 0x05
    1278:	42 30       	cpi	r20, 0x02	; 2
    127a:	51 05       	cpc	r21, r1
    127c:	51 f1       	breq	.+84     	; 0x12d2 <GetPinValue+0xb0>
    127e:	8c 81       	ldd	r24, Y+4	; 0x04
    1280:	9d 81       	ldd	r25, Y+5	; 0x05
    1282:	83 30       	cpi	r24, 0x03	; 3
    1284:	91 05       	cpc	r25, r1
    1286:	b9 f1       	breq	.+110    	; 0x12f6 <GetPinValue+0xd4>
    1288:	4a c0       	rjmp	.+148    	; 0x131e <GetPinValue+0xfc>
		{
			case DIO_PORTA: u8ResultLocal= GET_BIT(PORTA,u8PinIdCopy); break;
    128a:	eb e3       	ldi	r30, 0x3B	; 59
    128c:	f0 e0       	ldi	r31, 0x00	; 0
    128e:	80 81       	ld	r24, Z
    1290:	28 2f       	mov	r18, r24
    1292:	30 e0       	ldi	r19, 0x00	; 0
    1294:	8b 81       	ldd	r24, Y+3	; 0x03
    1296:	88 2f       	mov	r24, r24
    1298:	90 e0       	ldi	r25, 0x00	; 0
    129a:	a9 01       	movw	r20, r18
    129c:	02 c0       	rjmp	.+4      	; 0x12a2 <GetPinValue+0x80>
    129e:	55 95       	asr	r21
    12a0:	47 95       	ror	r20
    12a2:	8a 95       	dec	r24
    12a4:	e2 f7       	brpl	.-8      	; 0x129e <GetPinValue+0x7c>
    12a6:	ca 01       	movw	r24, r20
    12a8:	81 70       	andi	r24, 0x01	; 1
    12aa:	89 83       	std	Y+1, r24	; 0x01
    12ac:	38 c0       	rjmp	.+112    	; 0x131e <GetPinValue+0xfc>
			case DIO_PORTB: u8ResultLocal= GET_BIT(PORTB,u8PinIdCopy); break;
    12ae:	e8 e3       	ldi	r30, 0x38	; 56
    12b0:	f0 e0       	ldi	r31, 0x00	; 0
    12b2:	80 81       	ld	r24, Z
    12b4:	28 2f       	mov	r18, r24
    12b6:	30 e0       	ldi	r19, 0x00	; 0
    12b8:	8b 81       	ldd	r24, Y+3	; 0x03
    12ba:	88 2f       	mov	r24, r24
    12bc:	90 e0       	ldi	r25, 0x00	; 0
    12be:	a9 01       	movw	r20, r18
    12c0:	02 c0       	rjmp	.+4      	; 0x12c6 <GetPinValue+0xa4>
    12c2:	55 95       	asr	r21
    12c4:	47 95       	ror	r20
    12c6:	8a 95       	dec	r24
    12c8:	e2 f7       	brpl	.-8      	; 0x12c2 <GetPinValue+0xa0>
    12ca:	ca 01       	movw	r24, r20
    12cc:	81 70       	andi	r24, 0x01	; 1
    12ce:	89 83       	std	Y+1, r24	; 0x01
    12d0:	26 c0       	rjmp	.+76     	; 0x131e <GetPinValue+0xfc>
			case DIO_PORTC: u8ResultLocal= GET_BIT(PORTC,u8PinIdCopy); break;
    12d2:	e5 e3       	ldi	r30, 0x35	; 53
    12d4:	f0 e0       	ldi	r31, 0x00	; 0
    12d6:	80 81       	ld	r24, Z
    12d8:	28 2f       	mov	r18, r24
    12da:	30 e0       	ldi	r19, 0x00	; 0
    12dc:	8b 81       	ldd	r24, Y+3	; 0x03
    12de:	88 2f       	mov	r24, r24
    12e0:	90 e0       	ldi	r25, 0x00	; 0
    12e2:	a9 01       	movw	r20, r18
    12e4:	02 c0       	rjmp	.+4      	; 0x12ea <GetPinValue+0xc8>
    12e6:	55 95       	asr	r21
    12e8:	47 95       	ror	r20
    12ea:	8a 95       	dec	r24
    12ec:	e2 f7       	brpl	.-8      	; 0x12e6 <GetPinValue+0xc4>
    12ee:	ca 01       	movw	r24, r20
    12f0:	81 70       	andi	r24, 0x01	; 1
    12f2:	89 83       	std	Y+1, r24	; 0x01
    12f4:	14 c0       	rjmp	.+40     	; 0x131e <GetPinValue+0xfc>
			case DIO_PORTD: u8ResultLocal= GET_BIT(PORTD,u8PinIdCopy); break;
    12f6:	e2 e3       	ldi	r30, 0x32	; 50
    12f8:	f0 e0       	ldi	r31, 0x00	; 0
    12fa:	80 81       	ld	r24, Z
    12fc:	28 2f       	mov	r18, r24
    12fe:	30 e0       	ldi	r19, 0x00	; 0
    1300:	8b 81       	ldd	r24, Y+3	; 0x03
    1302:	88 2f       	mov	r24, r24
    1304:	90 e0       	ldi	r25, 0x00	; 0
    1306:	a9 01       	movw	r20, r18
    1308:	02 c0       	rjmp	.+4      	; 0x130e <GetPinValue+0xec>
    130a:	55 95       	asr	r21
    130c:	47 95       	ror	r20
    130e:	8a 95       	dec	r24
    1310:	e2 f7       	brpl	.-8      	; 0x130a <GetPinValue+0xe8>
    1312:	ca 01       	movw	r24, r20
    1314:	81 70       	andi	r24, 0x01	; 1
    1316:	89 83       	std	Y+1, r24	; 0x01
    1318:	02 c0       	rjmp	.+4      	; 0x131e <GetPinValue+0xfc>
	}

	else
	{
		/* return 0xff in case of error in the Pin ID or PORT ID */
		u8ResultLocal = 0xFF;
    131a:	8f ef       	ldi	r24, 0xFF	; 255
    131c:	89 83       	std	Y+1, r24	; 0x01
	}

	return u8ResultLocal;
    131e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1320:	0f 90       	pop	r0
    1322:	0f 90       	pop	r0
    1324:	0f 90       	pop	r0
    1326:	0f 90       	pop	r0
    1328:	0f 90       	pop	r0
    132a:	cf 91       	pop	r28
    132c:	df 91       	pop	r29
    132e:	08 95       	ret

00001330 <EEPROM_SendUserName>:
#include "EEPROM.h"
#include "TWI.h"


void EEPROM_SendUserName(u8 Data,u8 Byte_Address)
{
    1330:	df 93       	push	r29
    1332:	cf 93       	push	r28
    1334:	00 d0       	rcall	.+0      	; 0x1336 <EEPROM_SendUserName+0x6>
    1336:	cd b7       	in	r28, 0x3d	; 61
    1338:	de b7       	in	r29, 0x3e	; 62
    133a:	89 83       	std	Y+1, r24	; 0x01
    133c:	6a 83       	std	Y+2, r22	; 0x02
	/*Send start bit to start communication*/
	TWI_SendStart();
    133e:	0e 94 b4 0a 	call	0x1568	; 0x1568 <TWI_SendStart>
	/*Send the username to the first page in eeprom*/
	TWI_MasterSendData(0xA8);
    1342:	88 ea       	ldi	r24, 0xA8	; 168
    1344:	0e 94 c4 0a 	call	0x1588	; 0x1588 <TWI_MasterSendData>
	/*sending the address where the data will be stored in*/
	TWI_MasterSendData(Byte_Address);
    1348:	8a 81       	ldd	r24, Y+2	; 0x02
    134a:	0e 94 c4 0a 	call	0x1588	; 0x1588 <TWI_MasterSendData>
	/*Send the data*/
	TWI_MasterSendData(Data);
    134e:	89 81       	ldd	r24, Y+1	; 0x01
    1350:	0e 94 c4 0a 	call	0x1588	; 0x1588 <TWI_MasterSendData>
	/*Stop the communication*/
	TWI_SendStop();
    1354:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <TWI_SendStop>

}
    1358:	0f 90       	pop	r0
    135a:	0f 90       	pop	r0
    135c:	cf 91       	pop	r28
    135e:	df 91       	pop	r29
    1360:	08 95       	ret

00001362 <EEPROM_SendPassWord>:
void EEPROM_SendPassWord(u8 Data,u8 Byte_Address)
{
    1362:	df 93       	push	r29
    1364:	cf 93       	push	r28
    1366:	00 d0       	rcall	.+0      	; 0x1368 <EEPROM_SendPassWord+0x6>
    1368:	cd b7       	in	r28, 0x3d	; 61
    136a:	de b7       	in	r29, 0x3e	; 62
    136c:	89 83       	std	Y+1, r24	; 0x01
    136e:	6a 83       	std	Y+2, r22	; 0x02
	/*Send start bit to start communication*/
	TWI_SendStart();
    1370:	0e 94 b4 0a 	call	0x1568	; 0x1568 <TWI_SendStart>
	/*Send the Password to the second page in eeprom*/
	TWI_MasterSendData(0xAA);
    1374:	8a ea       	ldi	r24, 0xAA	; 170
    1376:	0e 94 c4 0a 	call	0x1588	; 0x1588 <TWI_MasterSendData>
	/*sending the address where the data will be stored in*/
	TWI_MasterSendData(Byte_Address);
    137a:	8a 81       	ldd	r24, Y+2	; 0x02
    137c:	0e 94 c4 0a 	call	0x1588	; 0x1588 <TWI_MasterSendData>
	/*Sending the data*/
	TWI_MasterSendData(Data);
    1380:	89 81       	ldd	r24, Y+1	; 0x01
    1382:	0e 94 c4 0a 	call	0x1588	; 0x1588 <TWI_MasterSendData>
	/*Stop the communication*/
	TWI_SendStop();
    1386:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <TWI_SendStop>

}
    138a:	0f 90       	pop	r0
    138c:	0f 90       	pop	r0
    138e:	cf 91       	pop	r28
    1390:	df 91       	pop	r29
    1392:	08 95       	ret

00001394 <EEPROM_ReadUserName>:
void EEPROM_ReadUserName(char Byte_Adress,u8 *reading)
{
    1394:	df 93       	push	r29
    1396:	cf 93       	push	r28
    1398:	00 d0       	rcall	.+0      	; 0x139a <EEPROM_ReadUserName+0x6>
    139a:	0f 92       	push	r0
    139c:	cd b7       	in	r28, 0x3d	; 61
    139e:	de b7       	in	r29, 0x3e	; 62
    13a0:	89 83       	std	Y+1, r24	; 0x01
    13a2:	7b 83       	std	Y+3, r23	; 0x03
    13a4:	6a 83       	std	Y+2, r22	; 0x02
	/*Send start bit to start communication*/
	TWI_SendStart();
    13a6:	0e 94 b4 0a 	call	0x1568	; 0x1568 <TWI_SendStart>
	/*Send the username to the first page in eeprom*/
	TWI_MasterSendData(0xA8);
    13aa:	88 ea       	ldi	r24, 0xA8	; 168
    13ac:	0e 94 c4 0a 	call	0x1588	; 0x1588 <TWI_MasterSendData>
	/*sending the address where the data will be stored in*/
	TWI_MasterSendData(Byte_Adress);
    13b0:	89 81       	ldd	r24, Y+1	; 0x01
    13b2:	0e 94 c4 0a 	call	0x1588	; 0x1588 <TWI_MasterSendData>
	/*Send repeating start*/
	TWI_SendStart();
    13b6:	0e 94 b4 0a 	call	0x1568	; 0x1568 <TWI_SendStart>

	TWI_MasterSendData(0xA9);
    13ba:	89 ea       	ldi	r24, 0xA9	; 169
    13bc:	0e 94 c4 0a 	call	0x1588	; 0x1588 <TWI_MasterSendData>

	*reading=TWI_MasterReadData();
    13c0:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <TWI_MasterReadData>
    13c4:	ea 81       	ldd	r30, Y+2	; 0x02
    13c6:	fb 81       	ldd	r31, Y+3	; 0x03
    13c8:	80 83       	st	Z, r24

	TWI_SendStop();
    13ca:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <TWI_SendStop>

}
    13ce:	0f 90       	pop	r0
    13d0:	0f 90       	pop	r0
    13d2:	0f 90       	pop	r0
    13d4:	cf 91       	pop	r28
    13d6:	df 91       	pop	r29
    13d8:	08 95       	ret

000013da <EEPROM_ReadPassWord>:
void EEPROM_ReadPassWord(char Byte_Adress,u8 *reading)
{
    13da:	df 93       	push	r29
    13dc:	cf 93       	push	r28
    13de:	00 d0       	rcall	.+0      	; 0x13e0 <EEPROM_ReadPassWord+0x6>
    13e0:	0f 92       	push	r0
    13e2:	cd b7       	in	r28, 0x3d	; 61
    13e4:	de b7       	in	r29, 0x3e	; 62
    13e6:	89 83       	std	Y+1, r24	; 0x01
    13e8:	7b 83       	std	Y+3, r23	; 0x03
    13ea:	6a 83       	std	Y+2, r22	; 0x02
		/*Send start bit to start communication*/
		TWI_SendStart();
    13ec:	0e 94 b4 0a 	call	0x1568	; 0x1568 <TWI_SendStart>
		/*Send the password to the second page in eeprom*/
		TWI_MasterSendData(0xAA);
    13f0:	8a ea       	ldi	r24, 0xAA	; 170
    13f2:	0e 94 c4 0a 	call	0x1588	; 0x1588 <TWI_MasterSendData>
		/*sending the address where the data will be stored in*/
		TWI_MasterSendData(Byte_Adress);
    13f6:	89 81       	ldd	r24, Y+1	; 0x01
    13f8:	0e 94 c4 0a 	call	0x1588	; 0x1588 <TWI_MasterSendData>
		/*Send repeating start*/
		TWI_SendStart();
    13fc:	0e 94 b4 0a 	call	0x1568	; 0x1568 <TWI_SendStart>
		/*Send the address of the eeprom but this time with read request*/
		TWI_MasterSendData(0xAB);
    1400:	8b ea       	ldi	r24, 0xAB	; 171
    1402:	0e 94 c4 0a 	call	0x1588	; 0x1588 <TWI_MasterSendData>

		*reading=TWI_MasterReadData();
    1406:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <TWI_MasterReadData>
    140a:	ea 81       	ldd	r30, Y+2	; 0x02
    140c:	fb 81       	ldd	r31, Y+3	; 0x03
    140e:	80 83       	st	Z, r24

		TWI_SendStop();
    1410:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <TWI_SendStop>
}
    1414:	0f 90       	pop	r0
    1416:	0f 90       	pop	r0
    1418:	0f 90       	pop	r0
    141a:	cf 91       	pop	r28
    141c:	df 91       	pop	r29
    141e:	08 95       	ret

00001420 <TIMER_init>:


#include "TIMER.h"

void TIMER_init()
{
    1420:	df 93       	push	r29
    1422:	cf 93       	push	r28
    1424:	cd b7       	in	r28, 0x3d	; 61
    1426:	de b7       	in	r29, 0x3e	; 62
/*for operating in PWM mode*/
SET_BIT(TCCR0,3);
    1428:	a3 e5       	ldi	r26, 0x53	; 83
    142a:	b0 e0       	ldi	r27, 0x00	; 0
    142c:	e3 e5       	ldi	r30, 0x53	; 83
    142e:	f0 e0       	ldi	r31, 0x00	; 0
    1430:	80 81       	ld	r24, Z
    1432:	88 60       	ori	r24, 0x08	; 8
    1434:	8c 93       	st	X, r24
SET_BIT(TCCR0,6);
    1436:	a3 e5       	ldi	r26, 0x53	; 83
    1438:	b0 e0       	ldi	r27, 0x00	; 0
    143a:	e3 e5       	ldi	r30, 0x53	; 83
    143c:	f0 e0       	ldi	r31, 0x00	; 0
    143e:	80 81       	ld	r24, Z
    1440:	80 64       	ori	r24, 0x40	; 64
    1442:	8c 93       	st	X, r24

/**/
CLR_BIT(TCCR0,4);
    1444:	a3 e5       	ldi	r26, 0x53	; 83
    1446:	b0 e0       	ldi	r27, 0x00	; 0
    1448:	e3 e5       	ldi	r30, 0x53	; 83
    144a:	f0 e0       	ldi	r31, 0x00	; 0
    144c:	80 81       	ld	r24, Z
    144e:	8f 7e       	andi	r24, 0xEF	; 239
    1450:	8c 93       	st	X, r24
SET_BIT(TCCR0,5);
    1452:	a3 e5       	ldi	r26, 0x53	; 83
    1454:	b0 e0       	ldi	r27, 0x00	; 0
    1456:	e3 e5       	ldi	r30, 0x53	; 83
    1458:	f0 e0       	ldi	r31, 0x00	; 0
    145a:	80 81       	ld	r24, Z
    145c:	80 62       	ori	r24, 0x20	; 32
    145e:	8c 93       	st	X, r24

/*setting value for comparison*/
//OCR0 =250;

/*setting OCR0 interrupt enable*/
SET_BIT(TIMSK,1);
    1460:	a9 e5       	ldi	r26, 0x59	; 89
    1462:	b0 e0       	ldi	r27, 0x00	; 0
    1464:	e9 e5       	ldi	r30, 0x59	; 89
    1466:	f0 e0       	ldi	r31, 0x00	; 0
    1468:	80 81       	ld	r24, Z
    146a:	82 60       	ori	r24, 0x02	; 2
    146c:	8c 93       	st	X, r24
/*setting prescaler*/
SET_BIT(TCCR0,1);
    146e:	a3 e5       	ldi	r26, 0x53	; 83
    1470:	b0 e0       	ldi	r27, 0x00	; 0
    1472:	e3 e5       	ldi	r30, 0x53	; 83
    1474:	f0 e0       	ldi	r31, 0x00	; 0
    1476:	80 81       	ld	r24, Z
    1478:	82 60       	ori	r24, 0x02	; 2
    147a:	8c 93       	st	X, r24
CLR_BIT(TCCR0,2);
    147c:	a3 e5       	ldi	r26, 0x53	; 83
    147e:	b0 e0       	ldi	r27, 0x00	; 0
    1480:	e3 e5       	ldi	r30, 0x53	; 83
    1482:	f0 e0       	ldi	r31, 0x00	; 0
    1484:	80 81       	ld	r24, Z
    1486:	8b 7f       	andi	r24, 0xFB	; 251
    1488:	8c 93       	st	X, r24
CLR_BIT(TCCR0,0);
    148a:	a3 e5       	ldi	r26, 0x53	; 83
    148c:	b0 e0       	ldi	r27, 0x00	; 0
    148e:	e3 e5       	ldi	r30, 0x53	; 83
    1490:	f0 e0       	ldi	r31, 0x00	; 0
    1492:	80 81       	ld	r24, Z
    1494:	8e 7f       	andi	r24, 0xFE	; 254
    1496:	8c 93       	st	X, r24
}
    1498:	cf 91       	pop	r28
    149a:	df 91       	pop	r29
    149c:	08 95       	ret

0000149e <Timer0_PWM_Init>:
void Timer0_PWM_Init( u8 speed)
{
    149e:	0f 93       	push	r16
    14a0:	1f 93       	push	r17
    14a2:	df 93       	push	r29
    14a4:	cf 93       	push	r28
    14a6:	0f 92       	push	r0
    14a8:	cd b7       	in	r28, 0x3d	; 61
    14aa:	de b7       	in	r29, 0x3e	; 62
    14ac:	89 83       	std	Y+1, r24	; 0x01

	OCR0 = speed *2.55;
    14ae:	0c e5       	ldi	r16, 0x5C	; 92
    14b0:	10 e0       	ldi	r17, 0x00	; 0
    14b2:	89 81       	ldd	r24, Y+1	; 0x01
    14b4:	88 2f       	mov	r24, r24
    14b6:	90 e0       	ldi	r25, 0x00	; 0
    14b8:	aa 27       	eor	r26, r26
    14ba:	97 fd       	sbrc	r25, 7
    14bc:	a0 95       	com	r26
    14be:	ba 2f       	mov	r27, r26
    14c0:	bc 01       	movw	r22, r24
    14c2:	cd 01       	movw	r24, r26
    14c4:	0e 94 a9 03 	call	0x752	; 0x752 <__floatsisf>
    14c8:	dc 01       	movw	r26, r24
    14ca:	cb 01       	movw	r24, r22
    14cc:	bc 01       	movw	r22, r24
    14ce:	cd 01       	movw	r24, r26
    14d0:	23 e3       	ldi	r18, 0x33	; 51
    14d2:	33 e3       	ldi	r19, 0x33	; 51
    14d4:	43 e2       	ldi	r20, 0x23	; 35
    14d6:	50 e4       	ldi	r21, 0x40	; 64
    14d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14dc:	dc 01       	movw	r26, r24
    14de:	cb 01       	movw	r24, r22
    14e0:	bc 01       	movw	r22, r24
    14e2:	cd 01       	movw	r24, r26
    14e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14e8:	dc 01       	movw	r26, r24
    14ea:	cb 01       	movw	r24, r22
    14ec:	f8 01       	movw	r30, r16
    14ee:	80 83       	st	Z, r24

}
    14f0:	0f 90       	pop	r0
    14f2:	cf 91       	pop	r28
    14f4:	df 91       	pop	r29
    14f6:	1f 91       	pop	r17
    14f8:	0f 91       	pop	r16
    14fa:	08 95       	ret

000014fc <TWI_MasterInit>:
#include "TWI.h"
//#include <avr/io.h>


void TWI_MasterInit(void)
{
    14fc:	df 93       	push	r29
    14fe:	cf 93       	push	r28
    1500:	cd b7       	in	r28, 0x3d	; 61
    1502:	de b7       	in	r29, 0x3e	; 62
	/*setting prescaler to 1*/
	CLR_BIT(TWSR,TWSR_TWPS1);
    1504:	a1 e2       	ldi	r26, 0x21	; 33
    1506:	b0 e0       	ldi	r27, 0x00	; 0
    1508:	e1 e2       	ldi	r30, 0x21	; 33
    150a:	f0 e0       	ldi	r31, 0x00	; 0
    150c:	80 81       	ld	r24, Z
    150e:	8d 7f       	andi	r24, 0xFD	; 253
    1510:	8c 93       	st	X, r24
	CLR_BIT(TWSR,TWSR_TWPS0);
    1512:	a1 e2       	ldi	r26, 0x21	; 33
    1514:	b0 e0       	ldi	r27, 0x00	; 0
    1516:	e1 e2       	ldi	r30, 0x21	; 33
    1518:	f0 e0       	ldi	r31, 0x00	; 0
    151a:	80 81       	ld	r24, Z
    151c:	8e 7f       	andi	r24, 0xFE	; 254
    151e:	8c 93       	st	X, r24
	/*setting bit rate to 2*/
	TWBR =0x02;
    1520:	e0 e2       	ldi	r30, 0x20	; 32
    1522:	f0 e0       	ldi	r31, 0x00	; 0
    1524:	82 e0       	ldi	r24, 0x02	; 2
    1526:	80 83       	st	Z, r24
	/*Enabling TWI*/
	SET_BIT(TWCR,TWCR_TWEN);
    1528:	a6 e5       	ldi	r26, 0x56	; 86
    152a:	b0 e0       	ldi	r27, 0x00	; 0
    152c:	e6 e5       	ldi	r30, 0x56	; 86
    152e:	f0 e0       	ldi	r31, 0x00	; 0
    1530:	80 81       	ld	r24, Z
    1532:	84 60       	ori	r24, 0x04	; 4
    1534:	8c 93       	st	X, r24

}
    1536:	cf 91       	pop	r28
    1538:	df 91       	pop	r29
    153a:	08 95       	ret

0000153c <TWI_SlaveInit>:
void TWI_SlaveInit(u8 Address)
{
    153c:	df 93       	push	r29
    153e:	cf 93       	push	r28
    1540:	0f 92       	push	r0
    1542:	cd b7       	in	r28, 0x3d	; 61
    1544:	de b7       	in	r29, 0x3e	; 62
    1546:	89 83       	std	Y+1, r24	; 0x01
	/*Set the slave address*/
	TWAR =Address<<1;
    1548:	e2 e2       	ldi	r30, 0x22	; 34
    154a:	f0 e0       	ldi	r31, 0x00	; 0
    154c:	89 81       	ldd	r24, Y+1	; 0x01
    154e:	88 0f       	add	r24, r24
    1550:	80 83       	st	Z, r24

	/*Enabling TWI*/
	SET_BIT(TWCR,TWCR_TWEA);
    1552:	a6 e5       	ldi	r26, 0x56	; 86
    1554:	b0 e0       	ldi	r27, 0x00	; 0
    1556:	e6 e5       	ldi	r30, 0x56	; 86
    1558:	f0 e0       	ldi	r31, 0x00	; 0
    155a:	80 81       	ld	r24, Z
    155c:	80 64       	ori	r24, 0x40	; 64
    155e:	8c 93       	st	X, r24

}
    1560:	0f 90       	pop	r0
    1562:	cf 91       	pop	r28
    1564:	df 91       	pop	r29
    1566:	08 95       	ret

00001568 <TWI_SendStart>:
void TWI_SendStart(void)
{
    1568:	df 93       	push	r29
    156a:	cf 93       	push	r28
    156c:	cd b7       	in	r28, 0x3d	; 61
    156e:	de b7       	in	r29, 0x3e	; 62
//	/*clear the interrupt flag to make the previous operation*/
TWCR = (1 << TWCR_TWINT) | (1 << TWCR_TWSTA) | (1 << TWCR_TWEN);
    1570:	e6 e5       	ldi	r30, 0x56	; 86
    1572:	f0 e0       	ldi	r31, 0x00	; 0
    1574:	84 ea       	ldi	r24, 0xA4	; 164
    1576:	80 83       	st	Z, r24
	/*Wait till the interrupt flag is raised */
	while(GET_BIT(TWCR,TWCR_TWINT) ==0);
    1578:	e6 e5       	ldi	r30, 0x56	; 86
    157a:	f0 e0       	ldi	r31, 0x00	; 0
    157c:	80 81       	ld	r24, Z
    157e:	88 23       	and	r24, r24
    1580:	dc f7       	brge	.-10     	; 0x1578 <TWI_SendStart+0x10>



}
    1582:	cf 91       	pop	r28
    1584:	df 91       	pop	r29
    1586:	08 95       	ret

00001588 <TWI_MasterSendData>:


void TWI_MasterSendData(u8 Data)
{
    1588:	df 93       	push	r29
    158a:	cf 93       	push	r28
    158c:	0f 92       	push	r0
    158e:	cd b7       	in	r28, 0x3d	; 61
    1590:	de b7       	in	r29, 0x3e	; 62
    1592:	89 83       	std	Y+1, r24	; 0x01
//
	/*Put data in data register*/
	TWDR =Data;
    1594:	e3 e2       	ldi	r30, 0x23	; 35
    1596:	f0 e0       	ldi	r31, 0x00	; 0
    1598:	89 81       	ldd	r24, Y+1	; 0x01
    159a:	80 83       	st	Z, r24
	TWCR = (1 << TWCR_TWINT) | (1 << TWCR_TWEN);
    159c:	e6 e5       	ldi	r30, 0x56	; 86
    159e:	f0 e0       	ldi	r31, 0x00	; 0
    15a0:	84 e8       	ldi	r24, 0x84	; 132
    15a2:	80 83       	st	Z, r24
	/*clear the interrupt flag to make the previous operation*/
	/*Wait till the interrupt flag is raised */
	while(GET_BIT(TWCR,TWCR_TWINT) ==0);
    15a4:	e6 e5       	ldi	r30, 0x56	; 86
    15a6:	f0 e0       	ldi	r31, 0x00	; 0
    15a8:	80 81       	ld	r24, Z
    15aa:	88 23       	and	r24, r24
    15ac:	dc f7       	brge	.-10     	; 0x15a4 <TWI_MasterSendData+0x1c>

}
    15ae:	0f 90       	pop	r0
    15b0:	cf 91       	pop	r28
    15b2:	df 91       	pop	r29
    15b4:	08 95       	ret

000015b6 <TWI_MasterReadData>:

u8 TWI_MasterReadData(void)
{
    15b6:	df 93       	push	r29
    15b8:	cf 93       	push	r28
    15ba:	cd b7       	in	r28, 0x3d	; 61
    15bc:	de b7       	in	r29, 0x3e	; 62

	TWCR = (1 << TWCR_TWINT) | (1 << TWCR_TWEN);
    15be:	e6 e5       	ldi	r30, 0x56	; 86
    15c0:	f0 e0       	ldi	r31, 0x00	; 0
    15c2:	84 e8       	ldi	r24, 0x84	; 132
    15c4:	80 83       	st	Z, r24
	/*clear the interrupt flag to make the previous operation*/

	/*Wait till the interrupt flag is raised */
	while(GET_BIT(TWCR,TWCR_TWINT) ==0);
    15c6:	e6 e5       	ldi	r30, 0x56	; 86
    15c8:	f0 e0       	ldi	r31, 0x00	; 0
    15ca:	80 81       	ld	r24, Z
    15cc:	88 23       	and	r24, r24
    15ce:	dc f7       	brge	.-10     	; 0x15c6 <TWI_MasterReadData+0x10>



	return TWDR;
    15d0:	e3 e2       	ldi	r30, 0x23	; 35
    15d2:	f0 e0       	ldi	r31, 0x00	; 0
    15d4:	80 81       	ld	r24, Z

}
    15d6:	cf 91       	pop	r28
    15d8:	df 91       	pop	r29
    15da:	08 95       	ret

000015dc <TWI_SendStop>:

void TWI_SendStop(void)
{
    15dc:	df 93       	push	r29
    15de:	cf 93       	push	r28
    15e0:	cd b7       	in	r28, 0x3d	; 61
    15e2:	de b7       	in	r29, 0x3e	; 62
//	/*clear the interrupt flag to make the previous operation*/
TWCR = (1 << TWCR_TWINT) | (1 << TWCR_TWSTO) | (1 << TWCR_TWEN);
    15e4:	e6 e5       	ldi	r30, 0x56	; 86
    15e6:	f0 e0       	ldi	r31, 0x00	; 0
    15e8:	84 e9       	ldi	r24, 0x94	; 148
    15ea:	80 83       	st	Z, r24
}
    15ec:	cf 91       	pop	r28
    15ee:	df 91       	pop	r29
    15f0:	08 95       	ret

000015f2 <UART_init>:
#include"DIO.h"
#include"UART.h"


void UART_init()
{
    15f2:	df 93       	push	r29
    15f4:	cf 93       	push	r28
    15f6:	0f 92       	push	r0
    15f8:	cd b7       	in	r28, 0x3d	; 61
    15fa:	de b7       	in	r29, 0x3e	; 62
	u8 var;
	SET_BIT(var,UCSRC_URSEL);
    15fc:	89 81       	ldd	r24, Y+1	; 0x01
    15fe:	80 68       	ori	r24, 0x80	; 128
    1600:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(var,UCSRC_UCSZ1);
    1602:	89 81       	ldd	r24, Y+1	; 0x01
    1604:	84 60       	ori	r24, 0x04	; 4
    1606:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(var,UCSRC_UCSZ0);
    1608:	89 81       	ldd	r24, Y+1	; 0x01
    160a:	82 60       	ori	r24, 0x02	; 2
    160c:	89 83       	std	Y+1, r24	; 0x01
	/*Setting Baud rate to 9600*/
	UBRRL=12;
    160e:	e9 e2       	ldi	r30, 0x29	; 41
    1610:	f0 e0       	ldi	r31, 0x00	; 0
    1612:	8c e0       	ldi	r24, 0x0C	; 12
    1614:	80 83       	st	Z, r24
	/*1-Selecting UCSRC
	  2- Choosing Asynchronous mode
	  3-Disable Parity mode
	  4-Selecting 1 stop bit
	  5-Choosing 8-bit data*/
	UCSRC=var;
    1616:	e0 e4       	ldi	r30, 0x40	; 64
    1618:	f0 e0       	ldi	r31, 0x00	; 0
    161a:	89 81       	ldd	r24, Y+1	; 0x01
    161c:	80 83       	st	Z, r24


	/*Rx Enable*/
	SET_BIT(UCSRB,UCSRB_RXEN);
    161e:	aa e2       	ldi	r26, 0x2A	; 42
    1620:	b0 e0       	ldi	r27, 0x00	; 0
    1622:	ea e2       	ldi	r30, 0x2A	; 42
    1624:	f0 e0       	ldi	r31, 0x00	; 0
    1626:	80 81       	ld	r24, Z
    1628:	80 61       	ori	r24, 0x10	; 16
    162a:	8c 93       	st	X, r24
	/*Tx Enable*/
	SET_BIT(UCSRB,UCSRB_TXEN);
    162c:	aa e2       	ldi	r26, 0x2A	; 42
    162e:	b0 e0       	ldi	r27, 0x00	; 0
    1630:	ea e2       	ldi	r30, 0x2A	; 42
    1632:	f0 e0       	ldi	r31, 0x00	; 0
    1634:	80 81       	ld	r24, Z
    1636:	88 60       	ori	r24, 0x08	; 8
    1638:	8c 93       	st	X, r24

}
    163a:	0f 90       	pop	r0
    163c:	cf 91       	pop	r28
    163e:	df 91       	pop	r29
    1640:	08 95       	ret

00001642 <UART_ReceiveByte>:

u8 UART_ReceiveByte()
{
    1642:	df 93       	push	r29
    1644:	cf 93       	push	r28
    1646:	cd b7       	in	r28, 0x3d	; 61
    1648:	de b7       	in	r29, 0x3e	; 62
	while(GET_BIT(UCSRA,UCSRA_RXC) ==0);
    164a:	eb e2       	ldi	r30, 0x2B	; 43
    164c:	f0 e0       	ldi	r31, 0x00	; 0
    164e:	80 81       	ld	r24, Z
    1650:	88 23       	and	r24, r24
    1652:	dc f7       	brge	.-10     	; 0x164a <UART_ReceiveByte+0x8>
	return UDR;
    1654:	ec e2       	ldi	r30, 0x2C	; 44
    1656:	f0 e0       	ldi	r31, 0x00	; 0
    1658:	80 81       	ld	r24, Z
}
    165a:	cf 91       	pop	r28
    165c:	df 91       	pop	r29
    165e:	08 95       	ret

00001660 <UART_SendByte>:

void UART_SendByte(u8 Data)
{
    1660:	df 93       	push	r29
    1662:	cf 93       	push	r28
    1664:	0f 92       	push	r0
    1666:	cd b7       	in	r28, 0x3d	; 61
    1668:	de b7       	in	r29, 0x3e	; 62
    166a:	89 83       	std	Y+1, r24	; 0x01
	while(GET_BIT(UCSRA,UCSRA_UDRE) ==0);
    166c:	eb e2       	ldi	r30, 0x2B	; 43
    166e:	f0 e0       	ldi	r31, 0x00	; 0
    1670:	80 81       	ld	r24, Z
    1672:	82 95       	swap	r24
    1674:	86 95       	lsr	r24
    1676:	87 70       	andi	r24, 0x07	; 7
    1678:	88 2f       	mov	r24, r24
    167a:	90 e0       	ldi	r25, 0x00	; 0
    167c:	81 70       	andi	r24, 0x01	; 1
    167e:	90 70       	andi	r25, 0x00	; 0
    1680:	00 97       	sbiw	r24, 0x00	; 0
    1682:	a1 f3       	breq	.-24     	; 0x166c <UART_SendByte+0xc>
    UDR =Data;
    1684:	ec e2       	ldi	r30, 0x2C	; 44
    1686:	f0 e0       	ldi	r31, 0x00	; 0
    1688:	89 81       	ldd	r24, Y+1	; 0x01
    168a:	80 83       	st	Z, r24

}
    168c:	0f 90       	pop	r0
    168e:	cf 91       	pop	r28
    1690:	df 91       	pop	r29
    1692:	08 95       	ret

00001694 <UART_SendSting>:


void UART_SendSting(const char *string)
{
    1694:	df 93       	push	r29
    1696:	cf 93       	push	r28
    1698:	00 d0       	rcall	.+0      	; 0x169a <UART_SendSting+0x6>
    169a:	00 d0       	rcall	.+0      	; 0x169c <UART_SendSting+0x8>
    169c:	cd b7       	in	r28, 0x3d	; 61
    169e:	de b7       	in	r29, 0x3e	; 62
    16a0:	9c 83       	std	Y+4, r25	; 0x04
    16a2:	8b 83       	std	Y+3, r24	; 0x03
	u16 counter=0;
    16a4:	1a 82       	std	Y+2, r1	; 0x02
    16a6:	19 82       	std	Y+1, r1	; 0x01
    16a8:	0f c0       	rjmp	.+30     	; 0x16c8 <UART_SendSting+0x34>
	while(string[counter] != '\0')
	{
		UART_SendByte(string[counter]);
    16aa:	2b 81       	ldd	r18, Y+3	; 0x03
    16ac:	3c 81       	ldd	r19, Y+4	; 0x04
    16ae:	89 81       	ldd	r24, Y+1	; 0x01
    16b0:	9a 81       	ldd	r25, Y+2	; 0x02
    16b2:	f9 01       	movw	r30, r18
    16b4:	e8 0f       	add	r30, r24
    16b6:	f9 1f       	adc	r31, r25
    16b8:	80 81       	ld	r24, Z
    16ba:	0e 94 30 0b 	call	0x1660	; 0x1660 <UART_SendByte>
		counter++;
    16be:	89 81       	ldd	r24, Y+1	; 0x01
    16c0:	9a 81       	ldd	r25, Y+2	; 0x02
    16c2:	01 96       	adiw	r24, 0x01	; 1
    16c4:	9a 83       	std	Y+2, r25	; 0x02
    16c6:	89 83       	std	Y+1, r24	; 0x01


void UART_SendSting(const char *string)
{
	u16 counter=0;
	while(string[counter] != '\0')
    16c8:	2b 81       	ldd	r18, Y+3	; 0x03
    16ca:	3c 81       	ldd	r19, Y+4	; 0x04
    16cc:	89 81       	ldd	r24, Y+1	; 0x01
    16ce:	9a 81       	ldd	r25, Y+2	; 0x02
    16d0:	f9 01       	movw	r30, r18
    16d2:	e8 0f       	add	r30, r24
    16d4:	f9 1f       	adc	r31, r25
    16d6:	80 81       	ld	r24, Z
    16d8:	88 23       	and	r24, r24
    16da:	39 f7       	brne	.-50     	; 0x16aa <UART_SendSting+0x16>

	}



}
    16dc:	0f 90       	pop	r0
    16de:	0f 90       	pop	r0
    16e0:	0f 90       	pop	r0
    16e2:	0f 90       	pop	r0
    16e4:	cf 91       	pop	r28
    16e6:	df 91       	pop	r29
    16e8:	08 95       	ret

000016ea <EEPROM_writeByte>:
#include "twi2.h"
#include "STD_TYPES.h"
void EEPROM_writeByte(u8 u16addr, u8 u8data)
{
    16ea:	df 93       	push	r29
    16ec:	cf 93       	push	r28
    16ee:	00 d0       	rcall	.+0      	; 0x16f0 <EEPROM_writeByte+0x6>
    16f0:	cd b7       	in	r28, 0x3d	; 61
    16f2:	de b7       	in	r29, 0x3e	; 62
    16f4:	89 83       	std	Y+1, r24	; 0x01
    16f6:	6a 83       	std	Y+2, r22	; 0x02
	/* Send the Start Bit */
    TWI_start();
    16f8:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <TWI_start>


    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte(0xA8);
    16fc:	88 ea       	ldi	r24, 0xA8	; 168
    16fe:	0e 94 b0 15 	call	0x2b60	; 0x2b60 <TWI_writeByte>


    /* Send the required memory location address */
    TWI_writeByte(u16addr);
    1702:	89 81       	ldd	r24, Y+1	; 0x01
    1704:	0e 94 b0 15 	call	0x2b60	; 0x2b60 <TWI_writeByte>


    /* write byte to eeprom */
    TWI_writeByte(u8data);
    1708:	8a 81       	ldd	r24, Y+2	; 0x02
    170a:	0e 94 b0 15 	call	0x2b60	; 0x2b60 <TWI_writeByte>

    /* Send the Stop Bit */
    TWI_stop();
    170e:	0e 94 a5 15 	call	0x2b4a	; 0x2b4a <TWI_stop>


}
    1712:	0f 90       	pop	r0
    1714:	0f 90       	pop	r0
    1716:	cf 91       	pop	r28
    1718:	df 91       	pop	r29
    171a:	08 95       	ret

0000171c <EEPROM_readByte>:

void EEPROM_readByte(u8 u16addr, u8 *u8data)
{
    171c:	df 93       	push	r29
    171e:	cf 93       	push	r28
    1720:	00 d0       	rcall	.+0      	; 0x1722 <EEPROM_readByte+0x6>
    1722:	0f 92       	push	r0
    1724:	cd b7       	in	r28, 0x3d	; 61
    1726:	de b7       	in	r29, 0x3e	; 62
    1728:	89 83       	std	Y+1, r24	; 0x01
    172a:	7b 83       	std	Y+3, r23	; 0x03
    172c:	6a 83       	std	Y+2, r22	; 0x02
	/* Send the Start Bit */
    TWI_start();
    172e:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <TWI_start>


    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte(0xA8);
    1732:	88 ea       	ldi	r24, 0xA8	; 168
    1734:	0e 94 b0 15 	call	0x2b60	; 0x2b60 <TWI_writeByte>


    /* Send the required memory location address */
    TWI_writeByte(u16addr);
    1738:	89 81       	ldd	r24, Y+1	; 0x01
    173a:	0e 94 b0 15 	call	0x2b60	; 0x2b60 <TWI_writeByte>


    /* Send the Repeated Start Bit */
    TWI_start();
    173e:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <TWI_start>


    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte(0xA9);
    1742:	89 ea       	ldi	r24, 0xA9	; 169
    1744:	0e 94 b0 15 	call	0x2b60	; 0x2b60 <TWI_writeByte>


    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
    1748:	0e 94 da 15 	call	0x2bb4	; 0x2bb4 <TWI_readByteWithNACK>
    174c:	ea 81       	ldd	r30, Y+2	; 0x02
    174e:	fb 81       	ldd	r31, Y+3	; 0x03
    1750:	80 83       	st	Z, r24

    /* Send the Stop Bit */
    TWI_stop();
    1752:	0e 94 a5 15 	call	0x2b4a	; 0x2b4a <TWI_stop>


}
    1756:	0f 90       	pop	r0
    1758:	0f 90       	pop	r0
    175a:	0f 90       	pop	r0
    175c:	cf 91       	pop	r28
    175e:	df 91       	pop	r29
    1760:	08 95       	ret

00001762 <main>:
#define MOTOR	'3'
u8 ForLoopCounter=0;								/*Global counter for for loops*/

u8 stringcmp(u8 *UserName,u8 *ConfirmedUserName);	/*Function to compare two strings*/
void main()
{
    1762:	0f 93       	push	r16
    1764:	1f 93       	push	r17
    1766:	df 93       	push	r29
    1768:	cf 93       	push	r28
    176a:	cd b7       	in	r28, 0x3d	; 61
    176c:	de b7       	in	r29, 0x3e	; 62
    176e:	c3 5b       	subi	r28, 0xB3	; 179
    1770:	d0 40       	sbci	r29, 0x00	; 0
    1772:	0f b6       	in	r0, 0x3f	; 63
    1774:	f8 94       	cli
    1776:	de bf       	out	0x3e, r29	; 62
    1778:	0f be       	out	0x3f, r0	; 63
    177a:	cd bf       	out	0x3d, r28	; 61
	u8 UserName[5];									/*Array to store the username*/
	u8 PassWord[5];									/*Array to store the password*/

	u8 state; 										//for login or signing in

	u8 UserNameCounter=0x00;						/*Counter to know the index of the last entered username to avoid overwriting*/
    177c:	fe 01       	movw	r30, r28
    177e:	e8 56       	subi	r30, 0x68	; 104
    1780:	ff 4f       	sbci	r31, 0xFF	; 255
    1782:	10 82       	st	Z, r1
	u8 PassWordCounter=0x00;						/*Counter to know the index of the last entered password to avoid overwriting*/
    1784:	fe 01       	movw	r30, r28
    1786:	e9 56       	subi	r30, 0x69	; 105
    1788:	ff 4f       	sbci	r31, 0xFF	; 255
    178a:	10 82       	st	Z, r1
	u8 UserNameCounterRead;							/*Variable to read the username counter*/
	u8 PassWordCounterRead;							/*Variable to read the password counter*/
	u8 ConfirmedUserName[5];
	u8 ConfirmedPassWord[5];
	u8 UserNameFlag=0;								/*To check if the username exists or not*/
    178c:	fe 01       	movw	r30, r28
    178e:	ea 56       	subi	r30, 0x6A	; 106
    1790:	ff 4f       	sbci	r31, 0xFF	; 255
    1792:	10 82       	st	Z, r1
	EEPROM_SendUserName(0b11111111,UserNameCounter);	/*Send the UserNameCounter to eeprom to store it*/
    1794:	fe 01       	movw	r30, r28
    1796:	e8 56       	subi	r30, 0x68	; 104
    1798:	ff 4f       	sbci	r31, 0xFF	; 255
    179a:	8f ef       	ldi	r24, 0xFF	; 255
    179c:	60 81       	ld	r22, Z
    179e:	0e 94 98 09 	call	0x1330	; 0x1330 <EEPROM_SendUserName>
    17a2:	fe 01       	movw	r30, r28
    17a4:	e7 57       	subi	r30, 0x77	; 119
    17a6:	ff 4f       	sbci	r31, 0xFF	; 255
    17a8:	80 e0       	ldi	r24, 0x00	; 0
    17aa:	90 e0       	ldi	r25, 0x00	; 0
    17ac:	aa e7       	ldi	r26, 0x7A	; 122
    17ae:	b4 e4       	ldi	r27, 0x44	; 68
    17b0:	80 83       	st	Z, r24
    17b2:	91 83       	std	Z+1, r25	; 0x01
    17b4:	a2 83       	std	Z+2, r26	; 0x02
    17b6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17b8:	8e 01       	movw	r16, r28
    17ba:	0b 57       	subi	r16, 0x7B	; 123
    17bc:	1f 4f       	sbci	r17, 0xFF	; 255
    17be:	fe 01       	movw	r30, r28
    17c0:	e7 57       	subi	r30, 0x77	; 119
    17c2:	ff 4f       	sbci	r31, 0xFF	; 255
    17c4:	60 81       	ld	r22, Z
    17c6:	71 81       	ldd	r23, Z+1	; 0x01
    17c8:	82 81       	ldd	r24, Z+2	; 0x02
    17ca:	93 81       	ldd	r25, Z+3	; 0x03
    17cc:	20 e0       	ldi	r18, 0x00	; 0
    17ce:	30 e0       	ldi	r19, 0x00	; 0
    17d0:	4a e7       	ldi	r20, 0x7A	; 122
    17d2:	53 e4       	ldi	r21, 0x43	; 67
    17d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17d8:	dc 01       	movw	r26, r24
    17da:	cb 01       	movw	r24, r22
    17dc:	f8 01       	movw	r30, r16
    17de:	80 83       	st	Z, r24
    17e0:	91 83       	std	Z+1, r25	; 0x01
    17e2:	a2 83       	std	Z+2, r26	; 0x02
    17e4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    17e6:	fe 01       	movw	r30, r28
    17e8:	eb 57       	subi	r30, 0x7B	; 123
    17ea:	ff 4f       	sbci	r31, 0xFF	; 255
    17ec:	60 81       	ld	r22, Z
    17ee:	71 81       	ldd	r23, Z+1	; 0x01
    17f0:	82 81       	ldd	r24, Z+2	; 0x02
    17f2:	93 81       	ldd	r25, Z+3	; 0x03
    17f4:	20 e0       	ldi	r18, 0x00	; 0
    17f6:	30 e0       	ldi	r19, 0x00	; 0
    17f8:	40 e8       	ldi	r20, 0x80	; 128
    17fa:	5f e3       	ldi	r21, 0x3F	; 63
    17fc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1800:	88 23       	and	r24, r24
    1802:	44 f4       	brge	.+16     	; 0x1814 <main+0xb2>
		__ticks = 1;
    1804:	fe 01       	movw	r30, r28
    1806:	ed 57       	subi	r30, 0x7D	; 125
    1808:	ff 4f       	sbci	r31, 0xFF	; 255
    180a:	81 e0       	ldi	r24, 0x01	; 1
    180c:	90 e0       	ldi	r25, 0x00	; 0
    180e:	91 83       	std	Z+1, r25	; 0x01
    1810:	80 83       	st	Z, r24
    1812:	64 c0       	rjmp	.+200    	; 0x18dc <main+0x17a>
	else if (__tmp > 65535)
    1814:	fe 01       	movw	r30, r28
    1816:	eb 57       	subi	r30, 0x7B	; 123
    1818:	ff 4f       	sbci	r31, 0xFF	; 255
    181a:	60 81       	ld	r22, Z
    181c:	71 81       	ldd	r23, Z+1	; 0x01
    181e:	82 81       	ldd	r24, Z+2	; 0x02
    1820:	93 81       	ldd	r25, Z+3	; 0x03
    1822:	20 e0       	ldi	r18, 0x00	; 0
    1824:	3f ef       	ldi	r19, 0xFF	; 255
    1826:	4f e7       	ldi	r20, 0x7F	; 127
    1828:	57 e4       	ldi	r21, 0x47	; 71
    182a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    182e:	18 16       	cp	r1, r24
    1830:	0c f0       	brlt	.+2      	; 0x1834 <main+0xd2>
    1832:	43 c0       	rjmp	.+134    	; 0x18ba <main+0x158>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1834:	fe 01       	movw	r30, r28
    1836:	e7 57       	subi	r30, 0x77	; 119
    1838:	ff 4f       	sbci	r31, 0xFF	; 255
    183a:	60 81       	ld	r22, Z
    183c:	71 81       	ldd	r23, Z+1	; 0x01
    183e:	82 81       	ldd	r24, Z+2	; 0x02
    1840:	93 81       	ldd	r25, Z+3	; 0x03
    1842:	20 e0       	ldi	r18, 0x00	; 0
    1844:	30 e0       	ldi	r19, 0x00	; 0
    1846:	40 e2       	ldi	r20, 0x20	; 32
    1848:	51 e4       	ldi	r21, 0x41	; 65
    184a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    184e:	dc 01       	movw	r26, r24
    1850:	cb 01       	movw	r24, r22
    1852:	8e 01       	movw	r16, r28
    1854:	0d 57       	subi	r16, 0x7D	; 125
    1856:	1f 4f       	sbci	r17, 0xFF	; 255
    1858:	bc 01       	movw	r22, r24
    185a:	cd 01       	movw	r24, r26
    185c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1860:	dc 01       	movw	r26, r24
    1862:	cb 01       	movw	r24, r22
    1864:	f8 01       	movw	r30, r16
    1866:	91 83       	std	Z+1, r25	; 0x01
    1868:	80 83       	st	Z, r24
    186a:	1f c0       	rjmp	.+62     	; 0x18aa <main+0x148>
    186c:	fe 01       	movw	r30, r28
    186e:	ef 57       	subi	r30, 0x7F	; 127
    1870:	ff 4f       	sbci	r31, 0xFF	; 255
    1872:	89 e1       	ldi	r24, 0x19	; 25
    1874:	90 e0       	ldi	r25, 0x00	; 0
    1876:	91 83       	std	Z+1, r25	; 0x01
    1878:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    187a:	fe 01       	movw	r30, r28
    187c:	ef 57       	subi	r30, 0x7F	; 127
    187e:	ff 4f       	sbci	r31, 0xFF	; 255
    1880:	80 81       	ld	r24, Z
    1882:	91 81       	ldd	r25, Z+1	; 0x01
    1884:	01 97       	sbiw	r24, 0x01	; 1
    1886:	f1 f7       	brne	.-4      	; 0x1884 <main+0x122>
    1888:	fe 01       	movw	r30, r28
    188a:	ef 57       	subi	r30, 0x7F	; 127
    188c:	ff 4f       	sbci	r31, 0xFF	; 255
    188e:	91 83       	std	Z+1, r25	; 0x01
    1890:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1892:	de 01       	movw	r26, r28
    1894:	ad 57       	subi	r26, 0x7D	; 125
    1896:	bf 4f       	sbci	r27, 0xFF	; 255
    1898:	fe 01       	movw	r30, r28
    189a:	ed 57       	subi	r30, 0x7D	; 125
    189c:	ff 4f       	sbci	r31, 0xFF	; 255
    189e:	80 81       	ld	r24, Z
    18a0:	91 81       	ldd	r25, Z+1	; 0x01
    18a2:	01 97       	sbiw	r24, 0x01	; 1
    18a4:	11 96       	adiw	r26, 0x01	; 1
    18a6:	9c 93       	st	X, r25
    18a8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18aa:	fe 01       	movw	r30, r28
    18ac:	ed 57       	subi	r30, 0x7D	; 125
    18ae:	ff 4f       	sbci	r31, 0xFF	; 255
    18b0:	80 81       	ld	r24, Z
    18b2:	91 81       	ldd	r25, Z+1	; 0x01
    18b4:	00 97       	sbiw	r24, 0x00	; 0
    18b6:	d1 f6       	brne	.-76     	; 0x186c <main+0x10a>
    18b8:	27 c0       	rjmp	.+78     	; 0x1908 <main+0x1a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18ba:	8e 01       	movw	r16, r28
    18bc:	0d 57       	subi	r16, 0x7D	; 125
    18be:	1f 4f       	sbci	r17, 0xFF	; 255
    18c0:	fe 01       	movw	r30, r28
    18c2:	eb 57       	subi	r30, 0x7B	; 123
    18c4:	ff 4f       	sbci	r31, 0xFF	; 255
    18c6:	60 81       	ld	r22, Z
    18c8:	71 81       	ldd	r23, Z+1	; 0x01
    18ca:	82 81       	ldd	r24, Z+2	; 0x02
    18cc:	93 81       	ldd	r25, Z+3	; 0x03
    18ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18d2:	dc 01       	movw	r26, r24
    18d4:	cb 01       	movw	r24, r22
    18d6:	f8 01       	movw	r30, r16
    18d8:	91 83       	std	Z+1, r25	; 0x01
    18da:	80 83       	st	Z, r24
    18dc:	de 01       	movw	r26, r28
    18de:	a1 58       	subi	r26, 0x81	; 129
    18e0:	bf 4f       	sbci	r27, 0xFF	; 255
    18e2:	fe 01       	movw	r30, r28
    18e4:	ed 57       	subi	r30, 0x7D	; 125
    18e6:	ff 4f       	sbci	r31, 0xFF	; 255
    18e8:	80 81       	ld	r24, Z
    18ea:	91 81       	ldd	r25, Z+1	; 0x01
    18ec:	8d 93       	st	X+, r24
    18ee:	9c 93       	st	X, r25
    18f0:	fe 01       	movw	r30, r28
    18f2:	e1 58       	subi	r30, 0x81	; 129
    18f4:	ff 4f       	sbci	r31, 0xFF	; 255
    18f6:	80 81       	ld	r24, Z
    18f8:	91 81       	ldd	r25, Z+1	; 0x01
    18fa:	01 97       	sbiw	r24, 0x01	; 1
    18fc:	f1 f7       	brne	.-4      	; 0x18fa <main+0x198>
    18fe:	fe 01       	movw	r30, r28
    1900:	e1 58       	subi	r30, 0x81	; 129
    1902:	ff 4f       	sbci	r31, 0xFF	; 255
    1904:	91 83       	std	Z+1, r25	; 0x01
    1906:	80 83       	st	Z, r24
	_delay_ms(1000);
	EEPROM_SendUserName(0b11111110,PassWordCounter);	/*Send the PassWordCounter to eeprom to store it*/
    1908:	fe 01       	movw	r30, r28
    190a:	e9 56       	subi	r30, 0x69	; 105
    190c:	ff 4f       	sbci	r31, 0xFF	; 255
    190e:	8e ef       	ldi	r24, 0xFE	; 254
    1910:	60 81       	ld	r22, Z
    1912:	0e 94 98 09 	call	0x1330	; 0x1330 <EEPROM_SendUserName>
    1916:	fe 01       	movw	r30, r28
    1918:	e5 58       	subi	r30, 0x85	; 133
    191a:	ff 4f       	sbci	r31, 0xFF	; 255
    191c:	80 e0       	ldi	r24, 0x00	; 0
    191e:	90 e0       	ldi	r25, 0x00	; 0
    1920:	aa e7       	ldi	r26, 0x7A	; 122
    1922:	b4 e4       	ldi	r27, 0x44	; 68
    1924:	80 83       	st	Z, r24
    1926:	91 83       	std	Z+1, r25	; 0x01
    1928:	a2 83       	std	Z+2, r26	; 0x02
    192a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    192c:	8e 01       	movw	r16, r28
    192e:	09 58       	subi	r16, 0x89	; 137
    1930:	1f 4f       	sbci	r17, 0xFF	; 255
    1932:	fe 01       	movw	r30, r28
    1934:	e5 58       	subi	r30, 0x85	; 133
    1936:	ff 4f       	sbci	r31, 0xFF	; 255
    1938:	60 81       	ld	r22, Z
    193a:	71 81       	ldd	r23, Z+1	; 0x01
    193c:	82 81       	ldd	r24, Z+2	; 0x02
    193e:	93 81       	ldd	r25, Z+3	; 0x03
    1940:	20 e0       	ldi	r18, 0x00	; 0
    1942:	30 e0       	ldi	r19, 0x00	; 0
    1944:	4a e7       	ldi	r20, 0x7A	; 122
    1946:	53 e4       	ldi	r21, 0x43	; 67
    1948:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    194c:	dc 01       	movw	r26, r24
    194e:	cb 01       	movw	r24, r22
    1950:	f8 01       	movw	r30, r16
    1952:	80 83       	st	Z, r24
    1954:	91 83       	std	Z+1, r25	; 0x01
    1956:	a2 83       	std	Z+2, r26	; 0x02
    1958:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    195a:	fe 01       	movw	r30, r28
    195c:	e9 58       	subi	r30, 0x89	; 137
    195e:	ff 4f       	sbci	r31, 0xFF	; 255
    1960:	60 81       	ld	r22, Z
    1962:	71 81       	ldd	r23, Z+1	; 0x01
    1964:	82 81       	ldd	r24, Z+2	; 0x02
    1966:	93 81       	ldd	r25, Z+3	; 0x03
    1968:	20 e0       	ldi	r18, 0x00	; 0
    196a:	30 e0       	ldi	r19, 0x00	; 0
    196c:	40 e8       	ldi	r20, 0x80	; 128
    196e:	5f e3       	ldi	r21, 0x3F	; 63
    1970:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1974:	88 23       	and	r24, r24
    1976:	44 f4       	brge	.+16     	; 0x1988 <main+0x226>
		__ticks = 1;
    1978:	fe 01       	movw	r30, r28
    197a:	eb 58       	subi	r30, 0x8B	; 139
    197c:	ff 4f       	sbci	r31, 0xFF	; 255
    197e:	81 e0       	ldi	r24, 0x01	; 1
    1980:	90 e0       	ldi	r25, 0x00	; 0
    1982:	91 83       	std	Z+1, r25	; 0x01
    1984:	80 83       	st	Z, r24
    1986:	64 c0       	rjmp	.+200    	; 0x1a50 <main+0x2ee>
	else if (__tmp > 65535)
    1988:	fe 01       	movw	r30, r28
    198a:	e9 58       	subi	r30, 0x89	; 137
    198c:	ff 4f       	sbci	r31, 0xFF	; 255
    198e:	60 81       	ld	r22, Z
    1990:	71 81       	ldd	r23, Z+1	; 0x01
    1992:	82 81       	ldd	r24, Z+2	; 0x02
    1994:	93 81       	ldd	r25, Z+3	; 0x03
    1996:	20 e0       	ldi	r18, 0x00	; 0
    1998:	3f ef       	ldi	r19, 0xFF	; 255
    199a:	4f e7       	ldi	r20, 0x7F	; 127
    199c:	57 e4       	ldi	r21, 0x47	; 71
    199e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    19a2:	18 16       	cp	r1, r24
    19a4:	0c f0       	brlt	.+2      	; 0x19a8 <main+0x246>
    19a6:	43 c0       	rjmp	.+134    	; 0x1a2e <main+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19a8:	fe 01       	movw	r30, r28
    19aa:	e5 58       	subi	r30, 0x85	; 133
    19ac:	ff 4f       	sbci	r31, 0xFF	; 255
    19ae:	60 81       	ld	r22, Z
    19b0:	71 81       	ldd	r23, Z+1	; 0x01
    19b2:	82 81       	ldd	r24, Z+2	; 0x02
    19b4:	93 81       	ldd	r25, Z+3	; 0x03
    19b6:	20 e0       	ldi	r18, 0x00	; 0
    19b8:	30 e0       	ldi	r19, 0x00	; 0
    19ba:	40 e2       	ldi	r20, 0x20	; 32
    19bc:	51 e4       	ldi	r21, 0x41	; 65
    19be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19c2:	dc 01       	movw	r26, r24
    19c4:	cb 01       	movw	r24, r22
    19c6:	8e 01       	movw	r16, r28
    19c8:	0b 58       	subi	r16, 0x8B	; 139
    19ca:	1f 4f       	sbci	r17, 0xFF	; 255
    19cc:	bc 01       	movw	r22, r24
    19ce:	cd 01       	movw	r24, r26
    19d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19d4:	dc 01       	movw	r26, r24
    19d6:	cb 01       	movw	r24, r22
    19d8:	f8 01       	movw	r30, r16
    19da:	91 83       	std	Z+1, r25	; 0x01
    19dc:	80 83       	st	Z, r24
    19de:	1f c0       	rjmp	.+62     	; 0x1a1e <main+0x2bc>
    19e0:	fe 01       	movw	r30, r28
    19e2:	ed 58       	subi	r30, 0x8D	; 141
    19e4:	ff 4f       	sbci	r31, 0xFF	; 255
    19e6:	89 e1       	ldi	r24, 0x19	; 25
    19e8:	90 e0       	ldi	r25, 0x00	; 0
    19ea:	91 83       	std	Z+1, r25	; 0x01
    19ec:	80 83       	st	Z, r24
    19ee:	fe 01       	movw	r30, r28
    19f0:	ed 58       	subi	r30, 0x8D	; 141
    19f2:	ff 4f       	sbci	r31, 0xFF	; 255
    19f4:	80 81       	ld	r24, Z
    19f6:	91 81       	ldd	r25, Z+1	; 0x01
    19f8:	01 97       	sbiw	r24, 0x01	; 1
    19fa:	f1 f7       	brne	.-4      	; 0x19f8 <main+0x296>
    19fc:	fe 01       	movw	r30, r28
    19fe:	ed 58       	subi	r30, 0x8D	; 141
    1a00:	ff 4f       	sbci	r31, 0xFF	; 255
    1a02:	91 83       	std	Z+1, r25	; 0x01
    1a04:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a06:	de 01       	movw	r26, r28
    1a08:	ab 58       	subi	r26, 0x8B	; 139
    1a0a:	bf 4f       	sbci	r27, 0xFF	; 255
    1a0c:	fe 01       	movw	r30, r28
    1a0e:	eb 58       	subi	r30, 0x8B	; 139
    1a10:	ff 4f       	sbci	r31, 0xFF	; 255
    1a12:	80 81       	ld	r24, Z
    1a14:	91 81       	ldd	r25, Z+1	; 0x01
    1a16:	01 97       	sbiw	r24, 0x01	; 1
    1a18:	11 96       	adiw	r26, 0x01	; 1
    1a1a:	9c 93       	st	X, r25
    1a1c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a1e:	fe 01       	movw	r30, r28
    1a20:	eb 58       	subi	r30, 0x8B	; 139
    1a22:	ff 4f       	sbci	r31, 0xFF	; 255
    1a24:	80 81       	ld	r24, Z
    1a26:	91 81       	ldd	r25, Z+1	; 0x01
    1a28:	00 97       	sbiw	r24, 0x00	; 0
    1a2a:	d1 f6       	brne	.-76     	; 0x19e0 <main+0x27e>
    1a2c:	27 c0       	rjmp	.+78     	; 0x1a7c <main+0x31a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a2e:	8e 01       	movw	r16, r28
    1a30:	0b 58       	subi	r16, 0x8B	; 139
    1a32:	1f 4f       	sbci	r17, 0xFF	; 255
    1a34:	fe 01       	movw	r30, r28
    1a36:	e9 58       	subi	r30, 0x89	; 137
    1a38:	ff 4f       	sbci	r31, 0xFF	; 255
    1a3a:	60 81       	ld	r22, Z
    1a3c:	71 81       	ldd	r23, Z+1	; 0x01
    1a3e:	82 81       	ldd	r24, Z+2	; 0x02
    1a40:	93 81       	ldd	r25, Z+3	; 0x03
    1a42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a46:	dc 01       	movw	r26, r24
    1a48:	cb 01       	movw	r24, r22
    1a4a:	f8 01       	movw	r30, r16
    1a4c:	91 83       	std	Z+1, r25	; 0x01
    1a4e:	80 83       	st	Z, r24
    1a50:	de 01       	movw	r26, r28
    1a52:	af 58       	subi	r26, 0x8F	; 143
    1a54:	bf 4f       	sbci	r27, 0xFF	; 255
    1a56:	fe 01       	movw	r30, r28
    1a58:	eb 58       	subi	r30, 0x8B	; 139
    1a5a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a5c:	80 81       	ld	r24, Z
    1a5e:	91 81       	ldd	r25, Z+1	; 0x01
    1a60:	8d 93       	st	X+, r24
    1a62:	9c 93       	st	X, r25
    1a64:	fe 01       	movw	r30, r28
    1a66:	ef 58       	subi	r30, 0x8F	; 143
    1a68:	ff 4f       	sbci	r31, 0xFF	; 255
    1a6a:	80 81       	ld	r24, Z
    1a6c:	91 81       	ldd	r25, Z+1	; 0x01
    1a6e:	01 97       	sbiw	r24, 0x01	; 1
    1a70:	f1 f7       	brne	.-4      	; 0x1a6e <main+0x30c>
    1a72:	fe 01       	movw	r30, r28
    1a74:	ef 58       	subi	r30, 0x8F	; 143
    1a76:	ff 4f       	sbci	r31, 0xFF	; 255
    1a78:	91 83       	std	Z+1, r25	; 0x01
    1a7a:	80 83       	st	Z, r24
	_delay_ms(1000);

	u8 i;							/*To know the exact 5 bytes of the User name and password*/

	TIMER_init();
    1a7c:	0e 94 10 0a 	call	0x1420	; 0x1420 <TIMER_init>
	DC_voidInit();
    1a80:	0e 94 d4 14 	call	0x29a8	; 0x29a8 <DC_voidInit>
	UART_init();
    1a84:	0e 94 f9 0a 	call	0x15f2	; 0x15f2 <UART_init>
	TWI_MasterInit();
    1a88:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <TWI_MasterInit>

	SetPinDirection(DIO_PORTC,PIN0,OUTPUT);
    1a8c:	82 e0       	ldi	r24, 0x02	; 2
    1a8e:	60 e0       	ldi	r22, 0x00	; 0
    1a90:	41 e0       	ldi	r20, 0x01	; 1
    1a92:	0e 94 50 06 	call	0xca0	; 0xca0 <SetPinDirection>

	SetPinDirection(DIO_PORTD,PIN1,OUTPUT);
    1a96:	83 e0       	ldi	r24, 0x03	; 3
    1a98:	61 e0       	ldi	r22, 0x01	; 1
    1a9a:	41 e0       	ldi	r20, 0x01	; 1
    1a9c:	0e 94 50 06 	call	0xca0	; 0xca0 <SetPinDirection>
	SetPinDirection(DIO_PORTD,PIN0,INPUT);
    1aa0:	83 e0       	ldi	r24, 0x03	; 3
    1aa2:	60 e0       	ldi	r22, 0x00	; 0
    1aa4:	40 e0       	ldi	r20, 0x00	; 0
    1aa6:	0e 94 50 06 	call	0xca0	; 0xca0 <SetPinDirection>
	SetPinDirection(DIO_PORTA,PIN0,OUTPUT);
    1aaa:	80 e0       	ldi	r24, 0x00	; 0
    1aac:	60 e0       	ldi	r22, 0x00	; 0
    1aae:	41 e0       	ldi	r20, 0x01	; 1
    1ab0:	0e 94 50 06 	call	0xca0	; 0xca0 <SetPinDirection>

	while(1)
	{
		UART_SendSting("Enter 0 for login or 1 for singup :");
    1ab4:	80 e6       	ldi	r24, 0x60	; 96
    1ab6:	90 e0       	ldi	r25, 0x00	; 0
    1ab8:	0e 94 4a 0b 	call	0x1694	; 0x1694 <UART_SendSting>
		state=UART_ReceiveByte();
    1abc:	0e 94 21 0b 	call	0x1642	; 0x1642 <UART_ReceiveByte>
    1ac0:	fe 01       	movw	r30, r28
    1ac2:	e7 56       	subi	r30, 0x67	; 103
    1ac4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ac6:	80 83       	st	Z, r24
		UART_SendSting("\r\n");
    1ac8:	84 e8       	ldi	r24, 0x84	; 132
    1aca:	90 e0       	ldi	r25, 0x00	; 0
    1acc:	0e 94 4a 0b 	call	0x1694	; 0x1694 <UART_SendSting>
		switch(state)
    1ad0:	fe 01       	movw	r30, r28
    1ad2:	e7 56       	subi	r30, 0x67	; 103
    1ad4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ad6:	80 81       	ld	r24, Z
    1ad8:	28 2f       	mov	r18, r24
    1ada:	30 e0       	ldi	r19, 0x00	; 0
    1adc:	ce 54       	subi	r28, 0x4E	; 78
    1ade:	df 4f       	sbci	r29, 0xFF	; 255
    1ae0:	39 83       	std	Y+1, r19	; 0x01
    1ae2:	28 83       	st	Y, r18
    1ae4:	c2 5b       	subi	r28, 0xB2	; 178
    1ae6:	d0 40       	sbci	r29, 0x00	; 0
    1ae8:	ce 54       	subi	r28, 0x4E	; 78
    1aea:	df 4f       	sbci	r29, 0xFF	; 255
    1aec:	88 81       	ld	r24, Y
    1aee:	99 81       	ldd	r25, Y+1	; 0x01
    1af0:	c2 5b       	subi	r28, 0xB2	; 178
    1af2:	d0 40       	sbci	r29, 0x00	; 0
    1af4:	80 33       	cpi	r24, 0x30	; 48
    1af6:	91 05       	cpc	r25, r1
    1af8:	59 f0       	breq	.+22     	; 0x1b10 <main+0x3ae>
    1afa:	ce 54       	subi	r28, 0x4E	; 78
    1afc:	df 4f       	sbci	r29, 0xFF	; 255
    1afe:	e8 81       	ld	r30, Y
    1b00:	f9 81       	ldd	r31, Y+1	; 0x01
    1b02:	c2 5b       	subi	r28, 0xB2	; 178
    1b04:	d0 40       	sbci	r29, 0x00	; 0
    1b06:	e1 33       	cpi	r30, 0x31	; 49
    1b08:	f1 05       	cpc	r31, r1
    1b0a:	09 f4       	brne	.+2      	; 0x1b0e <main+0x3ac>
    1b0c:	4e c2       	rjmp	.+1180   	; 0x1faa <main+0x848>
    1b0e:	d2 cf       	rjmp	.-92     	; 0x1ab4 <main+0x352>
		{
		case LOGIN:
			EEPROM_ReadUserName(0b11111111,&UserNameCounterRead);	/*Read the location in which the username will be stored*/
    1b10:	9e 01       	movw	r18, r28
    1b12:	2c 55       	subi	r18, 0x5C	; 92
    1b14:	3f 4f       	sbci	r19, 0xFF	; 255
    1b16:	8f ef       	ldi	r24, 0xFF	; 255
    1b18:	b9 01       	movw	r22, r18
    1b1a:	0e 94 ca 09 	call	0x1394	; 0x1394 <EEPROM_ReadUserName>
			EEPROM_SendUserName(0b11111111,++UserNameCounter);		/*Increment the position of the current username then send it to eeprom*/
    1b1e:	de 01       	movw	r26, r28
    1b20:	a8 56       	subi	r26, 0x68	; 104
    1b22:	bf 4f       	sbci	r27, 0xFF	; 255
    1b24:	fe 01       	movw	r30, r28
    1b26:	e8 56       	subi	r30, 0x68	; 104
    1b28:	ff 4f       	sbci	r31, 0xFF	; 255
    1b2a:	80 81       	ld	r24, Z
    1b2c:	8f 5f       	subi	r24, 0xFF	; 255
    1b2e:	8c 93       	st	X, r24
    1b30:	fe 01       	movw	r30, r28
    1b32:	e8 56       	subi	r30, 0x68	; 104
    1b34:	ff 4f       	sbci	r31, 0xFF	; 255
    1b36:	8f ef       	ldi	r24, 0xFF	; 255
    1b38:	60 81       	ld	r22, Z
    1b3a:	0e 94 98 09 	call	0x1330	; 0x1330 <EEPROM_SendUserName>

			/*For loop for user to enter his user name*/
			UART_SendSting("Enter UserName:");
    1b3e:	87 e8       	ldi	r24, 0x87	; 135
    1b40:	90 e0       	ldi	r25, 0x00	; 0
    1b42:	0e 94 4a 0b 	call	0x1694	; 0x1694 <UART_SendSting>
			for(u8 i=UserNameCounterRead*5;i<(UserNameCounterRead*5)+0x05;i++)
    1b46:	fe 01       	movw	r30, r28
    1b48:	ec 55       	subi	r30, 0x5C	; 92
    1b4a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b4c:	80 81       	ld	r24, Z
    1b4e:	28 2f       	mov	r18, r24
    1b50:	30 e0       	ldi	r19, 0x00	; 0
    1b52:	c9 01       	movw	r24, r18
    1b54:	88 0f       	add	r24, r24
    1b56:	99 1f       	adc	r25, r25
    1b58:	88 0f       	add	r24, r24
    1b5a:	99 1f       	adc	r25, r25
    1b5c:	82 0f       	add	r24, r18
    1b5e:	93 1f       	adc	r25, r19
    1b60:	fe 01       	movw	r30, r28
    1b62:	ec 56       	subi	r30, 0x6C	; 108
    1b64:	ff 4f       	sbci	r31, 0xFF	; 255
    1b66:	80 83       	st	Z, r24
    1b68:	db c0       	rjmp	.+438    	; 0x1d20 <main+0x5be>
			{
				UserName[ForLoopCounter] =UART_ReceiveByte();
    1b6a:	80 91 42 02 	lds	r24, 0x0242
    1b6e:	08 2f       	mov	r16, r24
    1b70:	10 e0       	ldi	r17, 0x00	; 0
    1b72:	0e 94 21 0b 	call	0x1642	; 0x1642 <UART_ReceiveByte>
    1b76:	28 2f       	mov	r18, r24
    1b78:	ce 01       	movw	r24, r28
    1b7a:	86 56       	subi	r24, 0x66	; 102
    1b7c:	9f 4f       	sbci	r25, 0xFF	; 255
    1b7e:	fc 01       	movw	r30, r24
    1b80:	e0 0f       	add	r30, r16
    1b82:	f1 1f       	adc	r31, r17
    1b84:	20 83       	st	Z, r18
				EEPROM_SendUserName(UserName[ForLoopCounter],i);
    1b86:	80 91 42 02 	lds	r24, 0x0242
    1b8a:	28 2f       	mov	r18, r24
    1b8c:	30 e0       	ldi	r19, 0x00	; 0
    1b8e:	ce 01       	movw	r24, r28
    1b90:	86 56       	subi	r24, 0x66	; 102
    1b92:	9f 4f       	sbci	r25, 0xFF	; 255
    1b94:	fc 01       	movw	r30, r24
    1b96:	e2 0f       	add	r30, r18
    1b98:	f3 1f       	adc	r31, r19
    1b9a:	80 81       	ld	r24, Z
    1b9c:	fe 01       	movw	r30, r28
    1b9e:	ec 56       	subi	r30, 0x6C	; 108
    1ba0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ba2:	60 81       	ld	r22, Z
    1ba4:	0e 94 98 09 	call	0x1330	; 0x1330 <EEPROM_SendUserName>
    1ba8:	fe 01       	movw	r30, r28
    1baa:	e3 59       	subi	r30, 0x93	; 147
    1bac:	ff 4f       	sbci	r31, 0xFF	; 255
    1bae:	80 e0       	ldi	r24, 0x00	; 0
    1bb0:	90 e0       	ldi	r25, 0x00	; 0
    1bb2:	aa e7       	ldi	r26, 0x7A	; 122
    1bb4:	b4 e4       	ldi	r27, 0x44	; 68
    1bb6:	80 83       	st	Z, r24
    1bb8:	91 83       	std	Z+1, r25	; 0x01
    1bba:	a2 83       	std	Z+2, r26	; 0x02
    1bbc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bbe:	8e 01       	movw	r16, r28
    1bc0:	07 59       	subi	r16, 0x97	; 151
    1bc2:	1f 4f       	sbci	r17, 0xFF	; 255
    1bc4:	fe 01       	movw	r30, r28
    1bc6:	e3 59       	subi	r30, 0x93	; 147
    1bc8:	ff 4f       	sbci	r31, 0xFF	; 255
    1bca:	60 81       	ld	r22, Z
    1bcc:	71 81       	ldd	r23, Z+1	; 0x01
    1bce:	82 81       	ldd	r24, Z+2	; 0x02
    1bd0:	93 81       	ldd	r25, Z+3	; 0x03
    1bd2:	20 e0       	ldi	r18, 0x00	; 0
    1bd4:	30 e0       	ldi	r19, 0x00	; 0
    1bd6:	4a e7       	ldi	r20, 0x7A	; 122
    1bd8:	53 e4       	ldi	r21, 0x43	; 67
    1bda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bde:	dc 01       	movw	r26, r24
    1be0:	cb 01       	movw	r24, r22
    1be2:	f8 01       	movw	r30, r16
    1be4:	80 83       	st	Z, r24
    1be6:	91 83       	std	Z+1, r25	; 0x01
    1be8:	a2 83       	std	Z+2, r26	; 0x02
    1bea:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1bec:	fe 01       	movw	r30, r28
    1bee:	e7 59       	subi	r30, 0x97	; 151
    1bf0:	ff 4f       	sbci	r31, 0xFF	; 255
    1bf2:	60 81       	ld	r22, Z
    1bf4:	71 81       	ldd	r23, Z+1	; 0x01
    1bf6:	82 81       	ldd	r24, Z+2	; 0x02
    1bf8:	93 81       	ldd	r25, Z+3	; 0x03
    1bfa:	20 e0       	ldi	r18, 0x00	; 0
    1bfc:	30 e0       	ldi	r19, 0x00	; 0
    1bfe:	40 e8       	ldi	r20, 0x80	; 128
    1c00:	5f e3       	ldi	r21, 0x3F	; 63
    1c02:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c06:	88 23       	and	r24, r24
    1c08:	44 f4       	brge	.+16     	; 0x1c1a <main+0x4b8>
		__ticks = 1;
    1c0a:	fe 01       	movw	r30, r28
    1c0c:	e9 59       	subi	r30, 0x99	; 153
    1c0e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c10:	81 e0       	ldi	r24, 0x01	; 1
    1c12:	90 e0       	ldi	r25, 0x00	; 0
    1c14:	91 83       	std	Z+1, r25	; 0x01
    1c16:	80 83       	st	Z, r24
    1c18:	64 c0       	rjmp	.+200    	; 0x1ce2 <main+0x580>
	else if (__tmp > 65535)
    1c1a:	fe 01       	movw	r30, r28
    1c1c:	e7 59       	subi	r30, 0x97	; 151
    1c1e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c20:	60 81       	ld	r22, Z
    1c22:	71 81       	ldd	r23, Z+1	; 0x01
    1c24:	82 81       	ldd	r24, Z+2	; 0x02
    1c26:	93 81       	ldd	r25, Z+3	; 0x03
    1c28:	20 e0       	ldi	r18, 0x00	; 0
    1c2a:	3f ef       	ldi	r19, 0xFF	; 255
    1c2c:	4f e7       	ldi	r20, 0x7F	; 127
    1c2e:	57 e4       	ldi	r21, 0x47	; 71
    1c30:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c34:	18 16       	cp	r1, r24
    1c36:	0c f0       	brlt	.+2      	; 0x1c3a <main+0x4d8>
    1c38:	43 c0       	rjmp	.+134    	; 0x1cc0 <main+0x55e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c3a:	fe 01       	movw	r30, r28
    1c3c:	e3 59       	subi	r30, 0x93	; 147
    1c3e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c40:	60 81       	ld	r22, Z
    1c42:	71 81       	ldd	r23, Z+1	; 0x01
    1c44:	82 81       	ldd	r24, Z+2	; 0x02
    1c46:	93 81       	ldd	r25, Z+3	; 0x03
    1c48:	20 e0       	ldi	r18, 0x00	; 0
    1c4a:	30 e0       	ldi	r19, 0x00	; 0
    1c4c:	40 e2       	ldi	r20, 0x20	; 32
    1c4e:	51 e4       	ldi	r21, 0x41	; 65
    1c50:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c54:	dc 01       	movw	r26, r24
    1c56:	cb 01       	movw	r24, r22
    1c58:	8e 01       	movw	r16, r28
    1c5a:	09 59       	subi	r16, 0x99	; 153
    1c5c:	1f 4f       	sbci	r17, 0xFF	; 255
    1c5e:	bc 01       	movw	r22, r24
    1c60:	cd 01       	movw	r24, r26
    1c62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c66:	dc 01       	movw	r26, r24
    1c68:	cb 01       	movw	r24, r22
    1c6a:	f8 01       	movw	r30, r16
    1c6c:	91 83       	std	Z+1, r25	; 0x01
    1c6e:	80 83       	st	Z, r24
    1c70:	1f c0       	rjmp	.+62     	; 0x1cb0 <main+0x54e>
    1c72:	fe 01       	movw	r30, r28
    1c74:	eb 59       	subi	r30, 0x9B	; 155
    1c76:	ff 4f       	sbci	r31, 0xFF	; 255
    1c78:	89 e1       	ldi	r24, 0x19	; 25
    1c7a:	90 e0       	ldi	r25, 0x00	; 0
    1c7c:	91 83       	std	Z+1, r25	; 0x01
    1c7e:	80 83       	st	Z, r24
    1c80:	fe 01       	movw	r30, r28
    1c82:	eb 59       	subi	r30, 0x9B	; 155
    1c84:	ff 4f       	sbci	r31, 0xFF	; 255
    1c86:	80 81       	ld	r24, Z
    1c88:	91 81       	ldd	r25, Z+1	; 0x01
    1c8a:	01 97       	sbiw	r24, 0x01	; 1
    1c8c:	f1 f7       	brne	.-4      	; 0x1c8a <main+0x528>
    1c8e:	fe 01       	movw	r30, r28
    1c90:	eb 59       	subi	r30, 0x9B	; 155
    1c92:	ff 4f       	sbci	r31, 0xFF	; 255
    1c94:	91 83       	std	Z+1, r25	; 0x01
    1c96:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c98:	de 01       	movw	r26, r28
    1c9a:	a9 59       	subi	r26, 0x99	; 153
    1c9c:	bf 4f       	sbci	r27, 0xFF	; 255
    1c9e:	fe 01       	movw	r30, r28
    1ca0:	e9 59       	subi	r30, 0x99	; 153
    1ca2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ca4:	80 81       	ld	r24, Z
    1ca6:	91 81       	ldd	r25, Z+1	; 0x01
    1ca8:	01 97       	sbiw	r24, 0x01	; 1
    1caa:	11 96       	adiw	r26, 0x01	; 1
    1cac:	9c 93       	st	X, r25
    1cae:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cb0:	fe 01       	movw	r30, r28
    1cb2:	e9 59       	subi	r30, 0x99	; 153
    1cb4:	ff 4f       	sbci	r31, 0xFF	; 255
    1cb6:	80 81       	ld	r24, Z
    1cb8:	91 81       	ldd	r25, Z+1	; 0x01
    1cba:	00 97       	sbiw	r24, 0x00	; 0
    1cbc:	d1 f6       	brne	.-76     	; 0x1c72 <main+0x510>
    1cbe:	27 c0       	rjmp	.+78     	; 0x1d0e <main+0x5ac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cc0:	8e 01       	movw	r16, r28
    1cc2:	09 59       	subi	r16, 0x99	; 153
    1cc4:	1f 4f       	sbci	r17, 0xFF	; 255
    1cc6:	fe 01       	movw	r30, r28
    1cc8:	e7 59       	subi	r30, 0x97	; 151
    1cca:	ff 4f       	sbci	r31, 0xFF	; 255
    1ccc:	60 81       	ld	r22, Z
    1cce:	71 81       	ldd	r23, Z+1	; 0x01
    1cd0:	82 81       	ldd	r24, Z+2	; 0x02
    1cd2:	93 81       	ldd	r25, Z+3	; 0x03
    1cd4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cd8:	dc 01       	movw	r26, r24
    1cda:	cb 01       	movw	r24, r22
    1cdc:	f8 01       	movw	r30, r16
    1cde:	91 83       	std	Z+1, r25	; 0x01
    1ce0:	80 83       	st	Z, r24
    1ce2:	de 01       	movw	r26, r28
    1ce4:	ad 59       	subi	r26, 0x9D	; 157
    1ce6:	bf 4f       	sbci	r27, 0xFF	; 255
    1ce8:	fe 01       	movw	r30, r28
    1cea:	e9 59       	subi	r30, 0x99	; 153
    1cec:	ff 4f       	sbci	r31, 0xFF	; 255
    1cee:	80 81       	ld	r24, Z
    1cf0:	91 81       	ldd	r25, Z+1	; 0x01
    1cf2:	8d 93       	st	X+, r24
    1cf4:	9c 93       	st	X, r25
    1cf6:	fe 01       	movw	r30, r28
    1cf8:	ed 59       	subi	r30, 0x9D	; 157
    1cfa:	ff 4f       	sbci	r31, 0xFF	; 255
    1cfc:	80 81       	ld	r24, Z
    1cfe:	91 81       	ldd	r25, Z+1	; 0x01
    1d00:	01 97       	sbiw	r24, 0x01	; 1
    1d02:	f1 f7       	brne	.-4      	; 0x1d00 <main+0x59e>
    1d04:	fe 01       	movw	r30, r28
    1d06:	ed 59       	subi	r30, 0x9D	; 157
    1d08:	ff 4f       	sbci	r31, 0xFF	; 255
    1d0a:	91 83       	std	Z+1, r25	; 0x01
    1d0c:	80 83       	st	Z, r24
			EEPROM_ReadUserName(0b11111111,&UserNameCounterRead);	/*Read the location in which the username will be stored*/
			EEPROM_SendUserName(0b11111111,++UserNameCounter);		/*Increment the position of the current username then send it to eeprom*/

			/*For loop for user to enter his user name*/
			UART_SendSting("Enter UserName:");
			for(u8 i=UserNameCounterRead*5;i<(UserNameCounterRead*5)+0x05;i++)
    1d0e:	de 01       	movw	r26, r28
    1d10:	ac 56       	subi	r26, 0x6C	; 108
    1d12:	bf 4f       	sbci	r27, 0xFF	; 255
    1d14:	fe 01       	movw	r30, r28
    1d16:	ec 56       	subi	r30, 0x6C	; 108
    1d18:	ff 4f       	sbci	r31, 0xFF	; 255
    1d1a:	80 81       	ld	r24, Z
    1d1c:	8f 5f       	subi	r24, 0xFF	; 255
    1d1e:	8c 93       	st	X, r24
    1d20:	fe 01       	movw	r30, r28
    1d22:	ec 56       	subi	r30, 0x6C	; 108
    1d24:	ff 4f       	sbci	r31, 0xFF	; 255
    1d26:	80 81       	ld	r24, Z
    1d28:	48 2f       	mov	r20, r24
    1d2a:	50 e0       	ldi	r21, 0x00	; 0
    1d2c:	fe 01       	movw	r30, r28
    1d2e:	ec 55       	subi	r30, 0x5C	; 92
    1d30:	ff 4f       	sbci	r31, 0xFF	; 255
    1d32:	80 81       	ld	r24, Z
    1d34:	88 2f       	mov	r24, r24
    1d36:	90 e0       	ldi	r25, 0x00	; 0
    1d38:	9c 01       	movw	r18, r24
    1d3a:	2f 5f       	subi	r18, 0xFF	; 255
    1d3c:	3f 4f       	sbci	r19, 0xFF	; 255
    1d3e:	c9 01       	movw	r24, r18
    1d40:	88 0f       	add	r24, r24
    1d42:	99 1f       	adc	r25, r25
    1d44:	88 0f       	add	r24, r24
    1d46:	99 1f       	adc	r25, r25
    1d48:	82 0f       	add	r24, r18
    1d4a:	93 1f       	adc	r25, r19
    1d4c:	48 17       	cp	r20, r24
    1d4e:	59 07       	cpc	r21, r25
    1d50:	0c f4       	brge	.+2      	; 0x1d54 <main+0x5f2>
    1d52:	0b cf       	rjmp	.-490    	; 0x1b6a <main+0x408>
				UserName[ForLoopCounter] =UART_ReceiveByte();
				EEPROM_SendUserName(UserName[ForLoopCounter],i);
				_delay_ms(1000);

			}
			ForLoopCounter=0;
    1d54:	10 92 42 02 	sts	0x0242, r1
			UART_SendSting("\r\nEnter Password:");
    1d58:	87 e9       	ldi	r24, 0x97	; 151
    1d5a:	90 e0       	ldi	r25, 0x00	; 0
    1d5c:	0e 94 4a 0b 	call	0x1694	; 0x1694 <UART_SendSting>
			EEPROM_ReadPassWord(0b11111110,&PassWordCounterRead);	/*Read the location in which the Password will be stored*/
    1d60:	9e 01       	movw	r18, r28
    1d62:	2b 55       	subi	r18, 0x5B	; 91
    1d64:	3f 4f       	sbci	r19, 0xFF	; 255
    1d66:	8e ef       	ldi	r24, 0xFE	; 254
    1d68:	b9 01       	movw	r22, r18
    1d6a:	0e 94 ed 09 	call	0x13da	; 0x13da <EEPROM_ReadPassWord>
			EEPROM_SendPassWord(0b11111110,++PassWordCounter);		/*Increment the position of the current Password then send it to eeprom*/
    1d6e:	de 01       	movw	r26, r28
    1d70:	a9 56       	subi	r26, 0x69	; 105
    1d72:	bf 4f       	sbci	r27, 0xFF	; 255
    1d74:	fe 01       	movw	r30, r28
    1d76:	e9 56       	subi	r30, 0x69	; 105
    1d78:	ff 4f       	sbci	r31, 0xFF	; 255
    1d7a:	80 81       	ld	r24, Z
    1d7c:	8f 5f       	subi	r24, 0xFF	; 255
    1d7e:	8c 93       	st	X, r24
    1d80:	fe 01       	movw	r30, r28
    1d82:	e9 56       	subi	r30, 0x69	; 105
    1d84:	ff 4f       	sbci	r31, 0xFF	; 255
    1d86:	8e ef       	ldi	r24, 0xFE	; 254
    1d88:	60 81       	ld	r22, Z
    1d8a:	0e 94 b1 09 	call	0x1362	; 0x1362 <EEPROM_SendPassWord>
			/*For loop for the user to enter password*/
			for(u8 i=PassWordCounterRead*5;i<(PassWordCounterRead*5)+0x05;i++)
    1d8e:	fe 01       	movw	r30, r28
    1d90:	eb 55       	subi	r30, 0x5B	; 91
    1d92:	ff 4f       	sbci	r31, 0xFF	; 255
    1d94:	80 81       	ld	r24, Z
    1d96:	28 2f       	mov	r18, r24
    1d98:	30 e0       	ldi	r19, 0x00	; 0
    1d9a:	c9 01       	movw	r24, r18
    1d9c:	88 0f       	add	r24, r24
    1d9e:	99 1f       	adc	r25, r25
    1da0:	88 0f       	add	r24, r24
    1da2:	99 1f       	adc	r25, r25
    1da4:	82 0f       	add	r24, r18
    1da6:	93 1f       	adc	r25, r19
    1da8:	fe 01       	movw	r30, r28
    1daa:	ed 56       	subi	r30, 0x6D	; 109
    1dac:	ff 4f       	sbci	r31, 0xFF	; 255
    1dae:	80 83       	st	Z, r24
    1db0:	db c0       	rjmp	.+438    	; 0x1f68 <main+0x806>
			{
				PassWord[ForLoopCounter] =UART_ReceiveByte();
    1db2:	80 91 42 02 	lds	r24, 0x0242
    1db6:	08 2f       	mov	r16, r24
    1db8:	10 e0       	ldi	r17, 0x00	; 0
    1dba:	0e 94 21 0b 	call	0x1642	; 0x1642 <UART_ReceiveByte>
    1dbe:	28 2f       	mov	r18, r24
    1dc0:	ce 01       	movw	r24, r28
    1dc2:	81 56       	subi	r24, 0x61	; 97
    1dc4:	9f 4f       	sbci	r25, 0xFF	; 255
    1dc6:	fc 01       	movw	r30, r24
    1dc8:	e0 0f       	add	r30, r16
    1dca:	f1 1f       	adc	r31, r17
    1dcc:	20 83       	st	Z, r18
				EEPROM_SendPassWord(PassWord[ForLoopCounter],i);
    1dce:	80 91 42 02 	lds	r24, 0x0242
    1dd2:	28 2f       	mov	r18, r24
    1dd4:	30 e0       	ldi	r19, 0x00	; 0
    1dd6:	ce 01       	movw	r24, r28
    1dd8:	81 56       	subi	r24, 0x61	; 97
    1dda:	9f 4f       	sbci	r25, 0xFF	; 255
    1ddc:	fc 01       	movw	r30, r24
    1dde:	e2 0f       	add	r30, r18
    1de0:	f3 1f       	adc	r31, r19
    1de2:	80 81       	ld	r24, Z
    1de4:	fe 01       	movw	r30, r28
    1de6:	ed 56       	subi	r30, 0x6D	; 109
    1de8:	ff 4f       	sbci	r31, 0xFF	; 255
    1dea:	60 81       	ld	r22, Z
    1dec:	0e 94 b1 09 	call	0x1362	; 0x1362 <EEPROM_SendPassWord>
    1df0:	fe 01       	movw	r30, r28
    1df2:	e1 5a       	subi	r30, 0xA1	; 161
    1df4:	ff 4f       	sbci	r31, 0xFF	; 255
    1df6:	80 e0       	ldi	r24, 0x00	; 0
    1df8:	90 e0       	ldi	r25, 0x00	; 0
    1dfa:	aa e7       	ldi	r26, 0x7A	; 122
    1dfc:	b4 e4       	ldi	r27, 0x44	; 68
    1dfe:	80 83       	st	Z, r24
    1e00:	91 83       	std	Z+1, r25	; 0x01
    1e02:	a2 83       	std	Z+2, r26	; 0x02
    1e04:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e06:	8e 01       	movw	r16, r28
    1e08:	05 5a       	subi	r16, 0xA5	; 165
    1e0a:	1f 4f       	sbci	r17, 0xFF	; 255
    1e0c:	fe 01       	movw	r30, r28
    1e0e:	e1 5a       	subi	r30, 0xA1	; 161
    1e10:	ff 4f       	sbci	r31, 0xFF	; 255
    1e12:	60 81       	ld	r22, Z
    1e14:	71 81       	ldd	r23, Z+1	; 0x01
    1e16:	82 81       	ldd	r24, Z+2	; 0x02
    1e18:	93 81       	ldd	r25, Z+3	; 0x03
    1e1a:	20 e0       	ldi	r18, 0x00	; 0
    1e1c:	30 e0       	ldi	r19, 0x00	; 0
    1e1e:	4a e7       	ldi	r20, 0x7A	; 122
    1e20:	53 e4       	ldi	r21, 0x43	; 67
    1e22:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e26:	dc 01       	movw	r26, r24
    1e28:	cb 01       	movw	r24, r22
    1e2a:	f8 01       	movw	r30, r16
    1e2c:	80 83       	st	Z, r24
    1e2e:	91 83       	std	Z+1, r25	; 0x01
    1e30:	a2 83       	std	Z+2, r26	; 0x02
    1e32:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1e34:	fe 01       	movw	r30, r28
    1e36:	e5 5a       	subi	r30, 0xA5	; 165
    1e38:	ff 4f       	sbci	r31, 0xFF	; 255
    1e3a:	60 81       	ld	r22, Z
    1e3c:	71 81       	ldd	r23, Z+1	; 0x01
    1e3e:	82 81       	ldd	r24, Z+2	; 0x02
    1e40:	93 81       	ldd	r25, Z+3	; 0x03
    1e42:	20 e0       	ldi	r18, 0x00	; 0
    1e44:	30 e0       	ldi	r19, 0x00	; 0
    1e46:	40 e8       	ldi	r20, 0x80	; 128
    1e48:	5f e3       	ldi	r21, 0x3F	; 63
    1e4a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e4e:	88 23       	and	r24, r24
    1e50:	44 f4       	brge	.+16     	; 0x1e62 <main+0x700>
		__ticks = 1;
    1e52:	fe 01       	movw	r30, r28
    1e54:	e7 5a       	subi	r30, 0xA7	; 167
    1e56:	ff 4f       	sbci	r31, 0xFF	; 255
    1e58:	81 e0       	ldi	r24, 0x01	; 1
    1e5a:	90 e0       	ldi	r25, 0x00	; 0
    1e5c:	91 83       	std	Z+1, r25	; 0x01
    1e5e:	80 83       	st	Z, r24
    1e60:	64 c0       	rjmp	.+200    	; 0x1f2a <main+0x7c8>
	else if (__tmp > 65535)
    1e62:	fe 01       	movw	r30, r28
    1e64:	e5 5a       	subi	r30, 0xA5	; 165
    1e66:	ff 4f       	sbci	r31, 0xFF	; 255
    1e68:	60 81       	ld	r22, Z
    1e6a:	71 81       	ldd	r23, Z+1	; 0x01
    1e6c:	82 81       	ldd	r24, Z+2	; 0x02
    1e6e:	93 81       	ldd	r25, Z+3	; 0x03
    1e70:	20 e0       	ldi	r18, 0x00	; 0
    1e72:	3f ef       	ldi	r19, 0xFF	; 255
    1e74:	4f e7       	ldi	r20, 0x7F	; 127
    1e76:	57 e4       	ldi	r21, 0x47	; 71
    1e78:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e7c:	18 16       	cp	r1, r24
    1e7e:	0c f0       	brlt	.+2      	; 0x1e82 <main+0x720>
    1e80:	43 c0       	rjmp	.+134    	; 0x1f08 <main+0x7a6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e82:	fe 01       	movw	r30, r28
    1e84:	e1 5a       	subi	r30, 0xA1	; 161
    1e86:	ff 4f       	sbci	r31, 0xFF	; 255
    1e88:	60 81       	ld	r22, Z
    1e8a:	71 81       	ldd	r23, Z+1	; 0x01
    1e8c:	82 81       	ldd	r24, Z+2	; 0x02
    1e8e:	93 81       	ldd	r25, Z+3	; 0x03
    1e90:	20 e0       	ldi	r18, 0x00	; 0
    1e92:	30 e0       	ldi	r19, 0x00	; 0
    1e94:	40 e2       	ldi	r20, 0x20	; 32
    1e96:	51 e4       	ldi	r21, 0x41	; 65
    1e98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e9c:	dc 01       	movw	r26, r24
    1e9e:	cb 01       	movw	r24, r22
    1ea0:	8e 01       	movw	r16, r28
    1ea2:	07 5a       	subi	r16, 0xA7	; 167
    1ea4:	1f 4f       	sbci	r17, 0xFF	; 255
    1ea6:	bc 01       	movw	r22, r24
    1ea8:	cd 01       	movw	r24, r26
    1eaa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1eae:	dc 01       	movw	r26, r24
    1eb0:	cb 01       	movw	r24, r22
    1eb2:	f8 01       	movw	r30, r16
    1eb4:	91 83       	std	Z+1, r25	; 0x01
    1eb6:	80 83       	st	Z, r24
    1eb8:	1f c0       	rjmp	.+62     	; 0x1ef8 <main+0x796>
    1eba:	fe 01       	movw	r30, r28
    1ebc:	e9 5a       	subi	r30, 0xA9	; 169
    1ebe:	ff 4f       	sbci	r31, 0xFF	; 255
    1ec0:	89 e1       	ldi	r24, 0x19	; 25
    1ec2:	90 e0       	ldi	r25, 0x00	; 0
    1ec4:	91 83       	std	Z+1, r25	; 0x01
    1ec6:	80 83       	st	Z, r24
    1ec8:	fe 01       	movw	r30, r28
    1eca:	e9 5a       	subi	r30, 0xA9	; 169
    1ecc:	ff 4f       	sbci	r31, 0xFF	; 255
    1ece:	80 81       	ld	r24, Z
    1ed0:	91 81       	ldd	r25, Z+1	; 0x01
    1ed2:	01 97       	sbiw	r24, 0x01	; 1
    1ed4:	f1 f7       	brne	.-4      	; 0x1ed2 <main+0x770>
    1ed6:	fe 01       	movw	r30, r28
    1ed8:	e9 5a       	subi	r30, 0xA9	; 169
    1eda:	ff 4f       	sbci	r31, 0xFF	; 255
    1edc:	91 83       	std	Z+1, r25	; 0x01
    1ede:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ee0:	de 01       	movw	r26, r28
    1ee2:	a7 5a       	subi	r26, 0xA7	; 167
    1ee4:	bf 4f       	sbci	r27, 0xFF	; 255
    1ee6:	fe 01       	movw	r30, r28
    1ee8:	e7 5a       	subi	r30, 0xA7	; 167
    1eea:	ff 4f       	sbci	r31, 0xFF	; 255
    1eec:	80 81       	ld	r24, Z
    1eee:	91 81       	ldd	r25, Z+1	; 0x01
    1ef0:	01 97       	sbiw	r24, 0x01	; 1
    1ef2:	11 96       	adiw	r26, 0x01	; 1
    1ef4:	9c 93       	st	X, r25
    1ef6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ef8:	fe 01       	movw	r30, r28
    1efa:	e7 5a       	subi	r30, 0xA7	; 167
    1efc:	ff 4f       	sbci	r31, 0xFF	; 255
    1efe:	80 81       	ld	r24, Z
    1f00:	91 81       	ldd	r25, Z+1	; 0x01
    1f02:	00 97       	sbiw	r24, 0x00	; 0
    1f04:	d1 f6       	brne	.-76     	; 0x1eba <main+0x758>
    1f06:	27 c0       	rjmp	.+78     	; 0x1f56 <main+0x7f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f08:	8e 01       	movw	r16, r28
    1f0a:	07 5a       	subi	r16, 0xA7	; 167
    1f0c:	1f 4f       	sbci	r17, 0xFF	; 255
    1f0e:	fe 01       	movw	r30, r28
    1f10:	e5 5a       	subi	r30, 0xA5	; 165
    1f12:	ff 4f       	sbci	r31, 0xFF	; 255
    1f14:	60 81       	ld	r22, Z
    1f16:	71 81       	ldd	r23, Z+1	; 0x01
    1f18:	82 81       	ldd	r24, Z+2	; 0x02
    1f1a:	93 81       	ldd	r25, Z+3	; 0x03
    1f1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f20:	dc 01       	movw	r26, r24
    1f22:	cb 01       	movw	r24, r22
    1f24:	f8 01       	movw	r30, r16
    1f26:	91 83       	std	Z+1, r25	; 0x01
    1f28:	80 83       	st	Z, r24
    1f2a:	de 01       	movw	r26, r28
    1f2c:	ab 5a       	subi	r26, 0xAB	; 171
    1f2e:	bf 4f       	sbci	r27, 0xFF	; 255
    1f30:	fe 01       	movw	r30, r28
    1f32:	e7 5a       	subi	r30, 0xA7	; 167
    1f34:	ff 4f       	sbci	r31, 0xFF	; 255
    1f36:	80 81       	ld	r24, Z
    1f38:	91 81       	ldd	r25, Z+1	; 0x01
    1f3a:	8d 93       	st	X+, r24
    1f3c:	9c 93       	st	X, r25
    1f3e:	fe 01       	movw	r30, r28
    1f40:	eb 5a       	subi	r30, 0xAB	; 171
    1f42:	ff 4f       	sbci	r31, 0xFF	; 255
    1f44:	80 81       	ld	r24, Z
    1f46:	91 81       	ldd	r25, Z+1	; 0x01
    1f48:	01 97       	sbiw	r24, 0x01	; 1
    1f4a:	f1 f7       	brne	.-4      	; 0x1f48 <main+0x7e6>
    1f4c:	fe 01       	movw	r30, r28
    1f4e:	eb 5a       	subi	r30, 0xAB	; 171
    1f50:	ff 4f       	sbci	r31, 0xFF	; 255
    1f52:	91 83       	std	Z+1, r25	; 0x01
    1f54:	80 83       	st	Z, r24
			ForLoopCounter=0;
			UART_SendSting("\r\nEnter Password:");
			EEPROM_ReadPassWord(0b11111110,&PassWordCounterRead);	/*Read the location in which the Password will be stored*/
			EEPROM_SendPassWord(0b11111110,++PassWordCounter);		/*Increment the position of the current Password then send it to eeprom*/
			/*For loop for the user to enter password*/
			for(u8 i=PassWordCounterRead*5;i<(PassWordCounterRead*5)+0x05;i++)
    1f56:	de 01       	movw	r26, r28
    1f58:	ad 56       	subi	r26, 0x6D	; 109
    1f5a:	bf 4f       	sbci	r27, 0xFF	; 255
    1f5c:	fe 01       	movw	r30, r28
    1f5e:	ed 56       	subi	r30, 0x6D	; 109
    1f60:	ff 4f       	sbci	r31, 0xFF	; 255
    1f62:	80 81       	ld	r24, Z
    1f64:	8f 5f       	subi	r24, 0xFF	; 255
    1f66:	8c 93       	st	X, r24
    1f68:	fe 01       	movw	r30, r28
    1f6a:	ed 56       	subi	r30, 0x6D	; 109
    1f6c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f6e:	80 81       	ld	r24, Z
    1f70:	48 2f       	mov	r20, r24
    1f72:	50 e0       	ldi	r21, 0x00	; 0
    1f74:	fe 01       	movw	r30, r28
    1f76:	eb 55       	subi	r30, 0x5B	; 91
    1f78:	ff 4f       	sbci	r31, 0xFF	; 255
    1f7a:	80 81       	ld	r24, Z
    1f7c:	88 2f       	mov	r24, r24
    1f7e:	90 e0       	ldi	r25, 0x00	; 0
    1f80:	9c 01       	movw	r18, r24
    1f82:	2f 5f       	subi	r18, 0xFF	; 255
    1f84:	3f 4f       	sbci	r19, 0xFF	; 255
    1f86:	c9 01       	movw	r24, r18
    1f88:	88 0f       	add	r24, r24
    1f8a:	99 1f       	adc	r25, r25
    1f8c:	88 0f       	add	r24, r24
    1f8e:	99 1f       	adc	r25, r25
    1f90:	82 0f       	add	r24, r18
    1f92:	93 1f       	adc	r25, r19
    1f94:	48 17       	cp	r20, r24
    1f96:	59 07       	cpc	r21, r25
    1f98:	0c f4       	brge	.+2      	; 0x1f9c <main+0x83a>
    1f9a:	0b cf       	rjmp	.-490    	; 0x1db2 <main+0x650>
			{
				PassWord[ForLoopCounter] =UART_ReceiveByte();
				EEPROM_SendPassWord(PassWord[ForLoopCounter],i);
				_delay_ms(1000);
			}
			ForLoopCounter=0;
    1f9c:	10 92 42 02 	sts	0x0242, r1
			UART_SendSting("\r\n");
    1fa0:	84 e8       	ldi	r24, 0x84	; 132
    1fa2:	90 e0       	ldi	r25, 0x00	; 0
    1fa4:	0e 94 4a 0b 	call	0x1694	; 0x1694 <UART_SendSting>
    1fa8:	85 cd       	rjmp	.-1270   	; 0x1ab4 <main+0x352>
			break;

		case SIGNUP:

			for(u8 trials =0;trials<3; trials++)
    1faa:	fe 01       	movw	r30, r28
    1fac:	ee 56       	subi	r30, 0x6E	; 110
    1fae:	ff 4f       	sbci	r31, 0xFF	; 255
    1fb0:	10 82       	st	Z, r1
    1fb2:	06 c2       	rjmp	.+1036   	; 0x23c0 <main+0xc5e>
			{
				UserNameFlag=0;
    1fb4:	fe 01       	movw	r30, r28
    1fb6:	ea 56       	subi	r30, 0x6A	; 106
    1fb8:	ff 4f       	sbci	r31, 0xFF	; 255
    1fba:	10 82       	st	Z, r1
				UART_SendSting("Enter UserName :");
    1fbc:	89 ea       	ldi	r24, 0xA9	; 169
    1fbe:	90 e0       	ldi	r25, 0x00	; 0
    1fc0:	0e 94 4a 0b 	call	0x1694	; 0x1694 <UART_SendSting>
				for(u8 x=0;x<0x05;x++)
    1fc4:	fe 01       	movw	r30, r28
    1fc6:	ef 56       	subi	r30, 0x6F	; 111
    1fc8:	ff 4f       	sbci	r31, 0xFF	; 255
    1fca:	10 82       	st	Z, r1
    1fcc:	19 c0       	rjmp	.+50     	; 0x2000 <main+0x89e>
				{
					UserName[x] =UART_ReceiveByte();
    1fce:	fe 01       	movw	r30, r28
    1fd0:	ef 56       	subi	r30, 0x6F	; 111
    1fd2:	ff 4f       	sbci	r31, 0xFF	; 255
    1fd4:	80 81       	ld	r24, Z
    1fd6:	08 2f       	mov	r16, r24
    1fd8:	10 e0       	ldi	r17, 0x00	; 0
    1fda:	0e 94 21 0b 	call	0x1642	; 0x1642 <UART_ReceiveByte>
    1fde:	28 2f       	mov	r18, r24
    1fe0:	ce 01       	movw	r24, r28
    1fe2:	86 56       	subi	r24, 0x66	; 102
    1fe4:	9f 4f       	sbci	r25, 0xFF	; 255
    1fe6:	fc 01       	movw	r30, r24
    1fe8:	e0 0f       	add	r30, r16
    1fea:	f1 1f       	adc	r31, r17
    1fec:	20 83       	st	Z, r18

			for(u8 trials =0;trials<3; trials++)
			{
				UserNameFlag=0;
				UART_SendSting("Enter UserName :");
				for(u8 x=0;x<0x05;x++)
    1fee:	de 01       	movw	r26, r28
    1ff0:	af 56       	subi	r26, 0x6F	; 111
    1ff2:	bf 4f       	sbci	r27, 0xFF	; 255
    1ff4:	fe 01       	movw	r30, r28
    1ff6:	ef 56       	subi	r30, 0x6F	; 111
    1ff8:	ff 4f       	sbci	r31, 0xFF	; 255
    1ffa:	80 81       	ld	r24, Z
    1ffc:	8f 5f       	subi	r24, 0xFF	; 255
    1ffe:	8c 93       	st	X, r24
    2000:	fe 01       	movw	r30, r28
    2002:	ef 56       	subi	r30, 0x6F	; 111
    2004:	ff 4f       	sbci	r31, 0xFF	; 255
    2006:	80 81       	ld	r24, Z
    2008:	85 30       	cpi	r24, 0x05	; 5
    200a:	08 f3       	brcs	.-62     	; 0x1fce <main+0x86c>
				{
					UserName[x] =UART_ReceiveByte();

				}
				for(i=0x00;i<0x32;i+=0x05)		/*loop that jumps to the first byte of every User name*/
    200c:	fe 01       	movw	r30, r28
    200e:	eb 56       	subi	r30, 0x6B	; 107
    2010:	ff 4f       	sbci	r31, 0xFF	; 255
    2012:	10 82       	st	Z, r1
    2014:	22 c1       	rjmp	.+580    	; 0x225a <main+0xaf8>
				{

					for(u8 j=i;j<(0x05+i);j++)	/*loop to go through each byte of each User name*/
    2016:	fe 01       	movw	r30, r28
    2018:	e0 57       	subi	r30, 0x70	; 112
    201a:	ff 4f       	sbci	r31, 0xFF	; 255
    201c:	de 01       	movw	r26, r28
    201e:	ab 56       	subi	r26, 0x6B	; 107
    2020:	bf 4f       	sbci	r27, 0xFF	; 255
    2022:	8c 91       	ld	r24, X
    2024:	80 83       	st	Z, r24
    2026:	d1 c0       	rjmp	.+418    	; 0x21ca <main+0xa68>
					{

						EEPROM_ReadUserName(j,&ConfirmedUserName[ForLoopCounter]);	/*Store the User name from eeprom into this array*/
    2028:	80 91 42 02 	lds	r24, 0x0242
    202c:	88 2f       	mov	r24, r24
    202e:	90 e0       	ldi	r25, 0x00	; 0
    2030:	9e 01       	movw	r18, r28
    2032:	2a 55       	subi	r18, 0x5A	; 90
    2034:	3f 4f       	sbci	r19, 0xFF	; 255
    2036:	28 0f       	add	r18, r24
    2038:	39 1f       	adc	r19, r25
    203a:	fe 01       	movw	r30, r28
    203c:	e0 57       	subi	r30, 0x70	; 112
    203e:	ff 4f       	sbci	r31, 0xFF	; 255
    2040:	80 81       	ld	r24, Z
    2042:	b9 01       	movw	r22, r18
    2044:	0e 94 ca 09 	call	0x1394	; 0x1394 <EEPROM_ReadUserName>
    2048:	fe 01       	movw	r30, r28
    204a:	ef 5a       	subi	r30, 0xAF	; 175
    204c:	ff 4f       	sbci	r31, 0xFF	; 255
    204e:	80 e0       	ldi	r24, 0x00	; 0
    2050:	90 e0       	ldi	r25, 0x00	; 0
    2052:	a8 ec       	ldi	r26, 0xC8	; 200
    2054:	b2 e4       	ldi	r27, 0x42	; 66
    2056:	80 83       	st	Z, r24
    2058:	91 83       	std	Z+1, r25	; 0x01
    205a:	a2 83       	std	Z+2, r26	; 0x02
    205c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    205e:	8e 01       	movw	r16, r28
    2060:	03 5b       	subi	r16, 0xB3	; 179
    2062:	1f 4f       	sbci	r17, 0xFF	; 255
    2064:	fe 01       	movw	r30, r28
    2066:	ef 5a       	subi	r30, 0xAF	; 175
    2068:	ff 4f       	sbci	r31, 0xFF	; 255
    206a:	60 81       	ld	r22, Z
    206c:	71 81       	ldd	r23, Z+1	; 0x01
    206e:	82 81       	ldd	r24, Z+2	; 0x02
    2070:	93 81       	ldd	r25, Z+3	; 0x03
    2072:	20 e0       	ldi	r18, 0x00	; 0
    2074:	30 e0       	ldi	r19, 0x00	; 0
    2076:	4a e7       	ldi	r20, 0x7A	; 122
    2078:	53 e4       	ldi	r21, 0x43	; 67
    207a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    207e:	dc 01       	movw	r26, r24
    2080:	cb 01       	movw	r24, r22
    2082:	f8 01       	movw	r30, r16
    2084:	80 83       	st	Z, r24
    2086:	91 83       	std	Z+1, r25	; 0x01
    2088:	a2 83       	std	Z+2, r26	; 0x02
    208a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    208c:	fe 01       	movw	r30, r28
    208e:	e3 5b       	subi	r30, 0xB3	; 179
    2090:	ff 4f       	sbci	r31, 0xFF	; 255
    2092:	60 81       	ld	r22, Z
    2094:	71 81       	ldd	r23, Z+1	; 0x01
    2096:	82 81       	ldd	r24, Z+2	; 0x02
    2098:	93 81       	ldd	r25, Z+3	; 0x03
    209a:	20 e0       	ldi	r18, 0x00	; 0
    209c:	30 e0       	ldi	r19, 0x00	; 0
    209e:	40 e8       	ldi	r20, 0x80	; 128
    20a0:	5f e3       	ldi	r21, 0x3F	; 63
    20a2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20a6:	88 23       	and	r24, r24
    20a8:	44 f4       	brge	.+16     	; 0x20ba <main+0x958>
		__ticks = 1;
    20aa:	fe 01       	movw	r30, r28
    20ac:	e5 5b       	subi	r30, 0xB5	; 181
    20ae:	ff 4f       	sbci	r31, 0xFF	; 255
    20b0:	81 e0       	ldi	r24, 0x01	; 1
    20b2:	90 e0       	ldi	r25, 0x00	; 0
    20b4:	91 83       	std	Z+1, r25	; 0x01
    20b6:	80 83       	st	Z, r24
    20b8:	64 c0       	rjmp	.+200    	; 0x2182 <main+0xa20>
	else if (__tmp > 65535)
    20ba:	fe 01       	movw	r30, r28
    20bc:	e3 5b       	subi	r30, 0xB3	; 179
    20be:	ff 4f       	sbci	r31, 0xFF	; 255
    20c0:	60 81       	ld	r22, Z
    20c2:	71 81       	ldd	r23, Z+1	; 0x01
    20c4:	82 81       	ldd	r24, Z+2	; 0x02
    20c6:	93 81       	ldd	r25, Z+3	; 0x03
    20c8:	20 e0       	ldi	r18, 0x00	; 0
    20ca:	3f ef       	ldi	r19, 0xFF	; 255
    20cc:	4f e7       	ldi	r20, 0x7F	; 127
    20ce:	57 e4       	ldi	r21, 0x47	; 71
    20d0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20d4:	18 16       	cp	r1, r24
    20d6:	0c f0       	brlt	.+2      	; 0x20da <main+0x978>
    20d8:	43 c0       	rjmp	.+134    	; 0x2160 <main+0x9fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20da:	fe 01       	movw	r30, r28
    20dc:	ef 5a       	subi	r30, 0xAF	; 175
    20de:	ff 4f       	sbci	r31, 0xFF	; 255
    20e0:	60 81       	ld	r22, Z
    20e2:	71 81       	ldd	r23, Z+1	; 0x01
    20e4:	82 81       	ldd	r24, Z+2	; 0x02
    20e6:	93 81       	ldd	r25, Z+3	; 0x03
    20e8:	20 e0       	ldi	r18, 0x00	; 0
    20ea:	30 e0       	ldi	r19, 0x00	; 0
    20ec:	40 e2       	ldi	r20, 0x20	; 32
    20ee:	51 e4       	ldi	r21, 0x41	; 65
    20f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20f4:	dc 01       	movw	r26, r24
    20f6:	cb 01       	movw	r24, r22
    20f8:	8e 01       	movw	r16, r28
    20fa:	05 5b       	subi	r16, 0xB5	; 181
    20fc:	1f 4f       	sbci	r17, 0xFF	; 255
    20fe:	bc 01       	movw	r22, r24
    2100:	cd 01       	movw	r24, r26
    2102:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2106:	dc 01       	movw	r26, r24
    2108:	cb 01       	movw	r24, r22
    210a:	f8 01       	movw	r30, r16
    210c:	91 83       	std	Z+1, r25	; 0x01
    210e:	80 83       	st	Z, r24
    2110:	1f c0       	rjmp	.+62     	; 0x2150 <main+0x9ee>
    2112:	fe 01       	movw	r30, r28
    2114:	e7 5b       	subi	r30, 0xB7	; 183
    2116:	ff 4f       	sbci	r31, 0xFF	; 255
    2118:	89 e1       	ldi	r24, 0x19	; 25
    211a:	90 e0       	ldi	r25, 0x00	; 0
    211c:	91 83       	std	Z+1, r25	; 0x01
    211e:	80 83       	st	Z, r24
    2120:	fe 01       	movw	r30, r28
    2122:	e7 5b       	subi	r30, 0xB7	; 183
    2124:	ff 4f       	sbci	r31, 0xFF	; 255
    2126:	80 81       	ld	r24, Z
    2128:	91 81       	ldd	r25, Z+1	; 0x01
    212a:	01 97       	sbiw	r24, 0x01	; 1
    212c:	f1 f7       	brne	.-4      	; 0x212a <main+0x9c8>
    212e:	fe 01       	movw	r30, r28
    2130:	e7 5b       	subi	r30, 0xB7	; 183
    2132:	ff 4f       	sbci	r31, 0xFF	; 255
    2134:	91 83       	std	Z+1, r25	; 0x01
    2136:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2138:	de 01       	movw	r26, r28
    213a:	a5 5b       	subi	r26, 0xB5	; 181
    213c:	bf 4f       	sbci	r27, 0xFF	; 255
    213e:	fe 01       	movw	r30, r28
    2140:	e5 5b       	subi	r30, 0xB5	; 181
    2142:	ff 4f       	sbci	r31, 0xFF	; 255
    2144:	80 81       	ld	r24, Z
    2146:	91 81       	ldd	r25, Z+1	; 0x01
    2148:	01 97       	sbiw	r24, 0x01	; 1
    214a:	11 96       	adiw	r26, 0x01	; 1
    214c:	9c 93       	st	X, r25
    214e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2150:	fe 01       	movw	r30, r28
    2152:	e5 5b       	subi	r30, 0xB5	; 181
    2154:	ff 4f       	sbci	r31, 0xFF	; 255
    2156:	80 81       	ld	r24, Z
    2158:	91 81       	ldd	r25, Z+1	; 0x01
    215a:	00 97       	sbiw	r24, 0x00	; 0
    215c:	d1 f6       	brne	.-76     	; 0x2112 <main+0x9b0>
    215e:	27 c0       	rjmp	.+78     	; 0x21ae <main+0xa4c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2160:	8e 01       	movw	r16, r28
    2162:	05 5b       	subi	r16, 0xB5	; 181
    2164:	1f 4f       	sbci	r17, 0xFF	; 255
    2166:	fe 01       	movw	r30, r28
    2168:	e3 5b       	subi	r30, 0xB3	; 179
    216a:	ff 4f       	sbci	r31, 0xFF	; 255
    216c:	60 81       	ld	r22, Z
    216e:	71 81       	ldd	r23, Z+1	; 0x01
    2170:	82 81       	ldd	r24, Z+2	; 0x02
    2172:	93 81       	ldd	r25, Z+3	; 0x03
    2174:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2178:	dc 01       	movw	r26, r24
    217a:	cb 01       	movw	r24, r22
    217c:	f8 01       	movw	r30, r16
    217e:	91 83       	std	Z+1, r25	; 0x01
    2180:	80 83       	st	Z, r24
    2182:	de 01       	movw	r26, r28
    2184:	a9 5b       	subi	r26, 0xB9	; 185
    2186:	bf 4f       	sbci	r27, 0xFF	; 255
    2188:	fe 01       	movw	r30, r28
    218a:	e5 5b       	subi	r30, 0xB5	; 181
    218c:	ff 4f       	sbci	r31, 0xFF	; 255
    218e:	80 81       	ld	r24, Z
    2190:	91 81       	ldd	r25, Z+1	; 0x01
    2192:	8d 93       	st	X+, r24
    2194:	9c 93       	st	X, r25
    2196:	fe 01       	movw	r30, r28
    2198:	e9 5b       	subi	r30, 0xB9	; 185
    219a:	ff 4f       	sbci	r31, 0xFF	; 255
    219c:	80 81       	ld	r24, Z
    219e:	91 81       	ldd	r25, Z+1	; 0x01
    21a0:	01 97       	sbiw	r24, 0x01	; 1
    21a2:	f1 f7       	brne	.-4      	; 0x21a0 <main+0xa3e>
    21a4:	fe 01       	movw	r30, r28
    21a6:	e9 5b       	subi	r30, 0xB9	; 185
    21a8:	ff 4f       	sbci	r31, 0xFF	; 255
    21aa:	91 83       	std	Z+1, r25	; 0x01
    21ac:	80 83       	st	Z, r24
						_delay_ms(100);
						ForLoopCounter++;
    21ae:	80 91 42 02 	lds	r24, 0x0242
    21b2:	8f 5f       	subi	r24, 0xFF	; 255
    21b4:	80 93 42 02 	sts	0x0242, r24

				}
				for(i=0x00;i<0x32;i+=0x05)		/*loop that jumps to the first byte of every User name*/
				{

					for(u8 j=i;j<(0x05+i);j++)	/*loop to go through each byte of each User name*/
    21b8:	de 01       	movw	r26, r28
    21ba:	a0 57       	subi	r26, 0x70	; 112
    21bc:	bf 4f       	sbci	r27, 0xFF	; 255
    21be:	fe 01       	movw	r30, r28
    21c0:	e0 57       	subi	r30, 0x70	; 112
    21c2:	ff 4f       	sbci	r31, 0xFF	; 255
    21c4:	80 81       	ld	r24, Z
    21c6:	8f 5f       	subi	r24, 0xFF	; 255
    21c8:	8c 93       	st	X, r24
    21ca:	fe 01       	movw	r30, r28
    21cc:	e0 57       	subi	r30, 0x70	; 112
    21ce:	ff 4f       	sbci	r31, 0xFF	; 255
    21d0:	80 81       	ld	r24, Z
    21d2:	28 2f       	mov	r18, r24
    21d4:	30 e0       	ldi	r19, 0x00	; 0
    21d6:	fe 01       	movw	r30, r28
    21d8:	eb 56       	subi	r30, 0x6B	; 107
    21da:	ff 4f       	sbci	r31, 0xFF	; 255
    21dc:	80 81       	ld	r24, Z
    21de:	88 2f       	mov	r24, r24
    21e0:	90 e0       	ldi	r25, 0x00	; 0
    21e2:	05 96       	adiw	r24, 0x05	; 5
    21e4:	28 17       	cp	r18, r24
    21e6:	39 07       	cpc	r19, r25
    21e8:	0c f4       	brge	.+2      	; 0x21ec <main+0xa8a>
    21ea:	1e cf       	rjmp	.-452    	; 0x2028 <main+0x8c6>
						EEPROM_ReadUserName(j,&ConfirmedUserName[ForLoopCounter]);	/*Store the User name from eeprom into this array*/
						_delay_ms(100);
						ForLoopCounter++;

					}
					ForLoopCounter=0;
    21ec:	10 92 42 02 	sts	0x0242, r1
					if(stringcmp(UserName,ConfirmedUserName) == 1)
    21f0:	ce 01       	movw	r24, r28
    21f2:	86 56       	subi	r24, 0x66	; 102
    21f4:	9f 4f       	sbci	r25, 0xFF	; 255
    21f6:	9e 01       	movw	r18, r28
    21f8:	2a 55       	subi	r18, 0x5A	; 90
    21fa:	3f 4f       	sbci	r19, 0xFF	; 255
    21fc:	b9 01       	movw	r22, r18
    21fe:	0e 94 9f 14 	call	0x293e	; 0x293e <stringcmp>
    2202:	81 30       	cpi	r24, 0x01	; 1
    2204:	71 f4       	brne	.+28     	; 0x2222 <main+0xac0>
					{
						UART_SendSting("\r\nWelcome ");
    2206:	8a eb       	ldi	r24, 0xBA	; 186
    2208:	90 e0       	ldi	r25, 0x00	; 0
    220a:	0e 94 4a 0b 	call	0x1694	; 0x1694 <UART_SendSting>
						UART_SendSting(UserName);
    220e:	ce 01       	movw	r24, r28
    2210:	86 56       	subi	r24, 0x66	; 102
    2212:	9f 4f       	sbci	r25, 0xFF	; 255
    2214:	0e 94 4a 0b 	call	0x1694	; 0x1694 <UART_SendSting>
						UART_SendSting("\r\n");
    2218:	84 e8       	ldi	r24, 0x84	; 132
    221a:	90 e0       	ldi	r25, 0x00	; 0
    221c:	0e 94 4a 0b 	call	0x1694	; 0x1694 <UART_SendSting>
    2220:	d6 c0       	rjmp	.+428    	; 0x23ce <main+0xc6c>
						goto label;				/*Jumps to the end of the loop*/
					}
					else
					{
						UserNameFlag++;						/*Increment the flag if the comparison equals 0*/
    2222:	de 01       	movw	r26, r28
    2224:	aa 56       	subi	r26, 0x6A	; 106
    2226:	bf 4f       	sbci	r27, 0xFF	; 255
    2228:	fe 01       	movw	r30, r28
    222a:	ea 56       	subi	r30, 0x6A	; 106
    222c:	ff 4f       	sbci	r31, 0xFF	; 255
    222e:	80 81       	ld	r24, Z
    2230:	8f 5f       	subi	r24, 0xFF	; 255
    2232:	8c 93       	st	X, r24
						if(UserNameFlag ==10)
    2234:	fe 01       	movw	r30, r28
    2236:	ea 56       	subi	r30, 0x6A	; 106
    2238:	ff 4f       	sbci	r31, 0xFF	; 255
    223a:	80 81       	ld	r24, Z
    223c:	8a 30       	cpi	r24, 0x0A	; 10
    223e:	21 f4       	brne	.+8      	; 0x2248 <main+0xae6>
						{
							UART_SendSting("\r\nWrong UserName Try again\r\n");
    2240:	85 ec       	ldi	r24, 0xC5	; 197
    2242:	90 e0       	ldi	r25, 0x00	; 0
    2244:	0e 94 4a 0b 	call	0x1694	; 0x1694 <UART_SendSting>
				for(u8 x=0;x<0x05;x++)
				{
					UserName[x] =UART_ReceiveByte();

				}
				for(i=0x00;i<0x32;i+=0x05)		/*loop that jumps to the first byte of every User name*/
    2248:	de 01       	movw	r26, r28
    224a:	ab 56       	subi	r26, 0x6B	; 107
    224c:	bf 4f       	sbci	r27, 0xFF	; 255
    224e:	fe 01       	movw	r30, r28
    2250:	eb 56       	subi	r30, 0x6B	; 107
    2252:	ff 4f       	sbci	r31, 0xFF	; 255
    2254:	80 81       	ld	r24, Z
    2256:	8b 5f       	subi	r24, 0xFB	; 251
    2258:	8c 93       	st	X, r24
    225a:	fe 01       	movw	r30, r28
    225c:	eb 56       	subi	r30, 0x6B	; 107
    225e:	ff 4f       	sbci	r31, 0xFF	; 255
    2260:	80 81       	ld	r24, Z
    2262:	82 33       	cpi	r24, 0x32	; 50
    2264:	08 f4       	brcc	.+2      	; 0x2268 <main+0xb06>
    2266:	d7 ce       	rjmp	.-594    	; 0x2016 <main+0x8b4>
						{
							UART_SendSting("\r\nWrong UserName Try again\r\n");
						}
					}
				}
				if((trials == 2) && (stringcmp(UserName,ConfirmedUserName) == 0))
    2268:	fe 01       	movw	r30, r28
    226a:	ee 56       	subi	r30, 0x6E	; 110
    226c:	ff 4f       	sbci	r31, 0xFF	; 255
    226e:	80 81       	ld	r24, Z
    2270:	82 30       	cpi	r24, 0x02	; 2
    2272:	09 f0       	breq	.+2      	; 0x2276 <main+0xb14>
    2274:	9c c0       	rjmp	.+312    	; 0x23ae <main+0xc4c>
    2276:	ce 01       	movw	r24, r28
    2278:	86 56       	subi	r24, 0x66	; 102
    227a:	9f 4f       	sbci	r25, 0xFF	; 255
    227c:	9e 01       	movw	r18, r28
    227e:	2a 55       	subi	r18, 0x5A	; 90
    2280:	3f 4f       	sbci	r19, 0xFF	; 255
    2282:	b9 01       	movw	r22, r18
    2284:	0e 94 9f 14 	call	0x293e	; 0x293e <stringcmp>
    2288:	88 23       	and	r24, r24
    228a:	09 f0       	breq	.+2      	; 0x228e <main+0xb2c>
    228c:	90 c0       	rjmp	.+288    	; 0x23ae <main+0xc4c>
				{
					SetPinValue(DIO_PORTC,PIN0,HIGH);
    228e:	82 e0       	ldi	r24, 0x02	; 2
    2290:	60 e0       	ldi	r22, 0x00	; 0
    2292:	41 e0       	ldi	r20, 0x01	; 1
    2294:	0e 94 b0 07 	call	0xf60	; 0xf60 <SetPinValue>
    2298:	fe 01       	movw	r30, r28
    229a:	ed 5b       	subi	r30, 0xBD	; 189
    229c:	ff 4f       	sbci	r31, 0xFF	; 255
    229e:	80 e0       	ldi	r24, 0x00	; 0
    22a0:	90 e4       	ldi	r25, 0x40	; 64
    22a2:	ac e9       	ldi	r26, 0x9C	; 156
    22a4:	b5 e4       	ldi	r27, 0x45	; 69
    22a6:	80 83       	st	Z, r24
    22a8:	91 83       	std	Z+1, r25	; 0x01
    22aa:	a2 83       	std	Z+2, r26	; 0x02
    22ac:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22ae:	8e 01       	movw	r16, r28
    22b0:	01 5c       	subi	r16, 0xC1	; 193
    22b2:	1f 4f       	sbci	r17, 0xFF	; 255
    22b4:	fe 01       	movw	r30, r28
    22b6:	ed 5b       	subi	r30, 0xBD	; 189
    22b8:	ff 4f       	sbci	r31, 0xFF	; 255
    22ba:	60 81       	ld	r22, Z
    22bc:	71 81       	ldd	r23, Z+1	; 0x01
    22be:	82 81       	ldd	r24, Z+2	; 0x02
    22c0:	93 81       	ldd	r25, Z+3	; 0x03
    22c2:	20 e0       	ldi	r18, 0x00	; 0
    22c4:	30 e0       	ldi	r19, 0x00	; 0
    22c6:	4a e7       	ldi	r20, 0x7A	; 122
    22c8:	53 e4       	ldi	r21, 0x43	; 67
    22ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22ce:	dc 01       	movw	r26, r24
    22d0:	cb 01       	movw	r24, r22
    22d2:	f8 01       	movw	r30, r16
    22d4:	80 83       	st	Z, r24
    22d6:	91 83       	std	Z+1, r25	; 0x01
    22d8:	a2 83       	std	Z+2, r26	; 0x02
    22da:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    22dc:	fe 01       	movw	r30, r28
    22de:	ff 96       	adiw	r30, 0x3f	; 63
    22e0:	60 81       	ld	r22, Z
    22e2:	71 81       	ldd	r23, Z+1	; 0x01
    22e4:	82 81       	ldd	r24, Z+2	; 0x02
    22e6:	93 81       	ldd	r25, Z+3	; 0x03
    22e8:	20 e0       	ldi	r18, 0x00	; 0
    22ea:	30 e0       	ldi	r19, 0x00	; 0
    22ec:	40 e8       	ldi	r20, 0x80	; 128
    22ee:	5f e3       	ldi	r21, 0x3F	; 63
    22f0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    22f4:	88 23       	and	r24, r24
    22f6:	2c f4       	brge	.+10     	; 0x2302 <main+0xba0>
		__ticks = 1;
    22f8:	81 e0       	ldi	r24, 0x01	; 1
    22fa:	90 e0       	ldi	r25, 0x00	; 0
    22fc:	9e af       	std	Y+62, r25	; 0x3e
    22fe:	8d af       	std	Y+61, r24	; 0x3d
    2300:	46 c0       	rjmp	.+140    	; 0x238e <main+0xc2c>
	else if (__tmp > 65535)
    2302:	fe 01       	movw	r30, r28
    2304:	ff 96       	adiw	r30, 0x3f	; 63
    2306:	60 81       	ld	r22, Z
    2308:	71 81       	ldd	r23, Z+1	; 0x01
    230a:	82 81       	ldd	r24, Z+2	; 0x02
    230c:	93 81       	ldd	r25, Z+3	; 0x03
    230e:	20 e0       	ldi	r18, 0x00	; 0
    2310:	3f ef       	ldi	r19, 0xFF	; 255
    2312:	4f e7       	ldi	r20, 0x7F	; 127
    2314:	57 e4       	ldi	r21, 0x47	; 71
    2316:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    231a:	18 16       	cp	r1, r24
    231c:	64 f5       	brge	.+88     	; 0x2376 <main+0xc14>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    231e:	fe 01       	movw	r30, r28
    2320:	ed 5b       	subi	r30, 0xBD	; 189
    2322:	ff 4f       	sbci	r31, 0xFF	; 255
    2324:	60 81       	ld	r22, Z
    2326:	71 81       	ldd	r23, Z+1	; 0x01
    2328:	82 81       	ldd	r24, Z+2	; 0x02
    232a:	93 81       	ldd	r25, Z+3	; 0x03
    232c:	20 e0       	ldi	r18, 0x00	; 0
    232e:	30 e0       	ldi	r19, 0x00	; 0
    2330:	40 e2       	ldi	r20, 0x20	; 32
    2332:	51 e4       	ldi	r21, 0x41	; 65
    2334:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2338:	dc 01       	movw	r26, r24
    233a:	cb 01       	movw	r24, r22
    233c:	bc 01       	movw	r22, r24
    233e:	cd 01       	movw	r24, r26
    2340:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2344:	dc 01       	movw	r26, r24
    2346:	cb 01       	movw	r24, r22
    2348:	9e af       	std	Y+62, r25	; 0x3e
    234a:	8d af       	std	Y+61, r24	; 0x3d
    234c:	0f c0       	rjmp	.+30     	; 0x236c <main+0xc0a>
    234e:	89 e1       	ldi	r24, 0x19	; 25
    2350:	90 e0       	ldi	r25, 0x00	; 0
    2352:	9c af       	std	Y+60, r25	; 0x3c
    2354:	8b af       	std	Y+59, r24	; 0x3b
    2356:	8b ad       	ldd	r24, Y+59	; 0x3b
    2358:	9c ad       	ldd	r25, Y+60	; 0x3c
    235a:	01 97       	sbiw	r24, 0x01	; 1
    235c:	f1 f7       	brne	.-4      	; 0x235a <main+0xbf8>
    235e:	9c af       	std	Y+60, r25	; 0x3c
    2360:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2362:	8d ad       	ldd	r24, Y+61	; 0x3d
    2364:	9e ad       	ldd	r25, Y+62	; 0x3e
    2366:	01 97       	sbiw	r24, 0x01	; 1
    2368:	9e af       	std	Y+62, r25	; 0x3e
    236a:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    236c:	8d ad       	ldd	r24, Y+61	; 0x3d
    236e:	9e ad       	ldd	r25, Y+62	; 0x3e
    2370:	00 97       	sbiw	r24, 0x00	; 0
    2372:	69 f7       	brne	.-38     	; 0x234e <main+0xbec>
    2374:	16 c0       	rjmp	.+44     	; 0x23a2 <main+0xc40>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2376:	fe 01       	movw	r30, r28
    2378:	ff 96       	adiw	r30, 0x3f	; 63
    237a:	60 81       	ld	r22, Z
    237c:	71 81       	ldd	r23, Z+1	; 0x01
    237e:	82 81       	ldd	r24, Z+2	; 0x02
    2380:	93 81       	ldd	r25, Z+3	; 0x03
    2382:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2386:	dc 01       	movw	r26, r24
    2388:	cb 01       	movw	r24, r22
    238a:	9e af       	std	Y+62, r25	; 0x3e
    238c:	8d af       	std	Y+61, r24	; 0x3d
    238e:	8d ad       	ldd	r24, Y+61	; 0x3d
    2390:	9e ad       	ldd	r25, Y+62	; 0x3e
    2392:	9a af       	std	Y+58, r25	; 0x3a
    2394:	89 af       	std	Y+57, r24	; 0x39
    2396:	89 ad       	ldd	r24, Y+57	; 0x39
    2398:	9a ad       	ldd	r25, Y+58	; 0x3a
    239a:	01 97       	sbiw	r24, 0x01	; 1
    239c:	f1 f7       	brne	.-4      	; 0x239a <main+0xc38>
    239e:	9a af       	std	Y+58, r25	; 0x3a
    23a0:	89 af       	std	Y+57, r24	; 0x39
					_delay_ms(5000);
					SetPinValue(DIO_PORTC,PIN0,LOW);
    23a2:	82 e0       	ldi	r24, 0x02	; 2
    23a4:	60 e0       	ldi	r22, 0x00	; 0
    23a6:	40 e0       	ldi	r20, 0x00	; 0
    23a8:	0e 94 b0 07 	call	0xf60	; 0xf60 <SetPinValue>
    23ac:	83 cb       	rjmp	.-2298   	; 0x1ab4 <main+0x352>
			UART_SendSting("\r\n");
			break;

		case SIGNUP:

			for(u8 trials =0;trials<3; trials++)
    23ae:	de 01       	movw	r26, r28
    23b0:	ae 56       	subi	r26, 0x6E	; 110
    23b2:	bf 4f       	sbci	r27, 0xFF	; 255
    23b4:	fe 01       	movw	r30, r28
    23b6:	ee 56       	subi	r30, 0x6E	; 110
    23b8:	ff 4f       	sbci	r31, 0xFF	; 255
    23ba:	80 81       	ld	r24, Z
    23bc:	8f 5f       	subi	r24, 0xFF	; 255
    23be:	8c 93       	st	X, r24
    23c0:	fe 01       	movw	r30, r28
    23c2:	ee 56       	subi	r30, 0x6E	; 110
    23c4:	ff 4f       	sbci	r31, 0xFF	; 255
    23c6:	80 81       	ld	r24, Z
    23c8:	83 30       	cpi	r24, 0x03	; 3
    23ca:	08 f4       	brcc	.+2      	; 0x23ce <main+0xc6c>
    23cc:	f3 cd       	rjmp	.-1050   	; 0x1fb4 <main+0x852>

					goto label2;
				}
			}
			label:
			ForLoopCounter=0;
    23ce:	10 92 42 02 	sts	0x0242, r1
			for(u8 trials =0;trials<3; trials++)
    23d2:	fe 01       	movw	r30, r28
    23d4:	e1 57       	subi	r30, 0x71	; 113
    23d6:	ff 4f       	sbci	r31, 0xFF	; 255
    23d8:	10 82       	st	Z, r1
    23da:	a9 c2       	rjmp	.+1362   	; 0x292e <main+0x11cc>
			{
				UART_SendSting("Enter PassWord :");
    23dc:	82 ee       	ldi	r24, 0xE2	; 226
    23de:	90 e0       	ldi	r25, 0x00	; 0
    23e0:	0e 94 4a 0b 	call	0x1694	; 0x1694 <UART_SendSting>
				for(u8 x=0;x<0x05;x++)
    23e4:	fe 01       	movw	r30, r28
    23e6:	e2 57       	subi	r30, 0x72	; 114
    23e8:	ff 4f       	sbci	r31, 0xFF	; 255
    23ea:	10 82       	st	Z, r1
    23ec:	19 c0       	rjmp	.+50     	; 0x2420 <main+0xcbe>
				{
					PassWord[x] =UART_ReceiveByte();
    23ee:	fe 01       	movw	r30, r28
    23f0:	e2 57       	subi	r30, 0x72	; 114
    23f2:	ff 4f       	sbci	r31, 0xFF	; 255
    23f4:	80 81       	ld	r24, Z
    23f6:	08 2f       	mov	r16, r24
    23f8:	10 e0       	ldi	r17, 0x00	; 0
    23fa:	0e 94 21 0b 	call	0x1642	; 0x1642 <UART_ReceiveByte>
    23fe:	28 2f       	mov	r18, r24
    2400:	ce 01       	movw	r24, r28
    2402:	81 56       	subi	r24, 0x61	; 97
    2404:	9f 4f       	sbci	r25, 0xFF	; 255
    2406:	fc 01       	movw	r30, r24
    2408:	e0 0f       	add	r30, r16
    240a:	f1 1f       	adc	r31, r17
    240c:	20 83       	st	Z, r18
			label:
			ForLoopCounter=0;
			for(u8 trials =0;trials<3; trials++)
			{
				UART_SendSting("Enter PassWord :");
				for(u8 x=0;x<0x05;x++)
    240e:	de 01       	movw	r26, r28
    2410:	a2 57       	subi	r26, 0x72	; 114
    2412:	bf 4f       	sbci	r27, 0xFF	; 255
    2414:	fe 01       	movw	r30, r28
    2416:	e2 57       	subi	r30, 0x72	; 114
    2418:	ff 4f       	sbci	r31, 0xFF	; 255
    241a:	80 81       	ld	r24, Z
    241c:	8f 5f       	subi	r24, 0xFF	; 255
    241e:	8c 93       	st	X, r24
    2420:	fe 01       	movw	r30, r28
    2422:	e2 57       	subi	r30, 0x72	; 114
    2424:	ff 4f       	sbci	r31, 0xFF	; 255
    2426:	80 81       	ld	r24, Z
    2428:	85 30       	cpi	r24, 0x05	; 5
    242a:	08 f3       	brcs	.-62     	; 0x23ee <main+0xc8c>
				{
					PassWord[x] =UART_ReceiveByte();

				}

				for(u8 j=i;j<(0x05+i);j++)	/*Now that we have known the location of the User name lets loop through his password */
    242c:	fe 01       	movw	r30, r28
    242e:	e3 57       	subi	r30, 0x73	; 115
    2430:	ff 4f       	sbci	r31, 0xFF	; 255
    2432:	de 01       	movw	r26, r28
    2434:	ab 56       	subi	r26, 0x6B	; 107
    2436:	bf 4f       	sbci	r27, 0xFF	; 255
    2438:	8c 91       	ld	r24, X
    243a:	80 83       	st	Z, r24
    243c:	90 c0       	rjmp	.+288    	; 0x255e <main+0xdfc>
				{

					EEPROM_ReadPassWord(j,&ConfirmedPassWord[ForLoopCounter]);	/*Store the Password from eeprom into this array*/
    243e:	80 91 42 02 	lds	r24, 0x0242
    2442:	88 2f       	mov	r24, r24
    2444:	90 e0       	ldi	r25, 0x00	; 0
    2446:	9e 01       	movw	r18, r28
    2448:	25 55       	subi	r18, 0x55	; 85
    244a:	3f 4f       	sbci	r19, 0xFF	; 255
    244c:	28 0f       	add	r18, r24
    244e:	39 1f       	adc	r19, r25
    2450:	fe 01       	movw	r30, r28
    2452:	e3 57       	subi	r30, 0x73	; 115
    2454:	ff 4f       	sbci	r31, 0xFF	; 255
    2456:	80 81       	ld	r24, Z
    2458:	b9 01       	movw	r22, r18
    245a:	0e 94 ed 09 	call	0x13da	; 0x13da <EEPROM_ReadPassWord>
    245e:	80 e0       	ldi	r24, 0x00	; 0
    2460:	90 e0       	ldi	r25, 0x00	; 0
    2462:	a8 ec       	ldi	r26, 0xC8	; 200
    2464:	b2 e4       	ldi	r27, 0x42	; 66
    2466:	8d ab       	std	Y+53, r24	; 0x35
    2468:	9e ab       	std	Y+54, r25	; 0x36
    246a:	af ab       	std	Y+55, r26	; 0x37
    246c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    246e:	6d a9       	ldd	r22, Y+53	; 0x35
    2470:	7e a9       	ldd	r23, Y+54	; 0x36
    2472:	8f a9       	ldd	r24, Y+55	; 0x37
    2474:	98 ad       	ldd	r25, Y+56	; 0x38
    2476:	20 e0       	ldi	r18, 0x00	; 0
    2478:	30 e0       	ldi	r19, 0x00	; 0
    247a:	4a e7       	ldi	r20, 0x7A	; 122
    247c:	53 e4       	ldi	r21, 0x43	; 67
    247e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2482:	dc 01       	movw	r26, r24
    2484:	cb 01       	movw	r24, r22
    2486:	89 ab       	std	Y+49, r24	; 0x31
    2488:	9a ab       	std	Y+50, r25	; 0x32
    248a:	ab ab       	std	Y+51, r26	; 0x33
    248c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    248e:	69 a9       	ldd	r22, Y+49	; 0x31
    2490:	7a a9       	ldd	r23, Y+50	; 0x32
    2492:	8b a9       	ldd	r24, Y+51	; 0x33
    2494:	9c a9       	ldd	r25, Y+52	; 0x34
    2496:	20 e0       	ldi	r18, 0x00	; 0
    2498:	30 e0       	ldi	r19, 0x00	; 0
    249a:	40 e8       	ldi	r20, 0x80	; 128
    249c:	5f e3       	ldi	r21, 0x3F	; 63
    249e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    24a2:	88 23       	and	r24, r24
    24a4:	2c f4       	brge	.+10     	; 0x24b0 <main+0xd4e>
		__ticks = 1;
    24a6:	81 e0       	ldi	r24, 0x01	; 1
    24a8:	90 e0       	ldi	r25, 0x00	; 0
    24aa:	98 ab       	std	Y+48, r25	; 0x30
    24ac:	8f a7       	std	Y+47, r24	; 0x2f
    24ae:	3f c0       	rjmp	.+126    	; 0x252e <main+0xdcc>
	else if (__tmp > 65535)
    24b0:	69 a9       	ldd	r22, Y+49	; 0x31
    24b2:	7a a9       	ldd	r23, Y+50	; 0x32
    24b4:	8b a9       	ldd	r24, Y+51	; 0x33
    24b6:	9c a9       	ldd	r25, Y+52	; 0x34
    24b8:	20 e0       	ldi	r18, 0x00	; 0
    24ba:	3f ef       	ldi	r19, 0xFF	; 255
    24bc:	4f e7       	ldi	r20, 0x7F	; 127
    24be:	57 e4       	ldi	r21, 0x47	; 71
    24c0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    24c4:	18 16       	cp	r1, r24
    24c6:	4c f5       	brge	.+82     	; 0x251a <main+0xdb8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24c8:	6d a9       	ldd	r22, Y+53	; 0x35
    24ca:	7e a9       	ldd	r23, Y+54	; 0x36
    24cc:	8f a9       	ldd	r24, Y+55	; 0x37
    24ce:	98 ad       	ldd	r25, Y+56	; 0x38
    24d0:	20 e0       	ldi	r18, 0x00	; 0
    24d2:	30 e0       	ldi	r19, 0x00	; 0
    24d4:	40 e2       	ldi	r20, 0x20	; 32
    24d6:	51 e4       	ldi	r21, 0x41	; 65
    24d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24dc:	dc 01       	movw	r26, r24
    24de:	cb 01       	movw	r24, r22
    24e0:	bc 01       	movw	r22, r24
    24e2:	cd 01       	movw	r24, r26
    24e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24e8:	dc 01       	movw	r26, r24
    24ea:	cb 01       	movw	r24, r22
    24ec:	98 ab       	std	Y+48, r25	; 0x30
    24ee:	8f a7       	std	Y+47, r24	; 0x2f
    24f0:	0f c0       	rjmp	.+30     	; 0x2510 <main+0xdae>
    24f2:	89 e1       	ldi	r24, 0x19	; 25
    24f4:	90 e0       	ldi	r25, 0x00	; 0
    24f6:	9e a7       	std	Y+46, r25	; 0x2e
    24f8:	8d a7       	std	Y+45, r24	; 0x2d
    24fa:	8d a5       	ldd	r24, Y+45	; 0x2d
    24fc:	9e a5       	ldd	r25, Y+46	; 0x2e
    24fe:	01 97       	sbiw	r24, 0x01	; 1
    2500:	f1 f7       	brne	.-4      	; 0x24fe <main+0xd9c>
    2502:	9e a7       	std	Y+46, r25	; 0x2e
    2504:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2506:	8f a5       	ldd	r24, Y+47	; 0x2f
    2508:	98 a9       	ldd	r25, Y+48	; 0x30
    250a:	01 97       	sbiw	r24, 0x01	; 1
    250c:	98 ab       	std	Y+48, r25	; 0x30
    250e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2510:	8f a5       	ldd	r24, Y+47	; 0x2f
    2512:	98 a9       	ldd	r25, Y+48	; 0x30
    2514:	00 97       	sbiw	r24, 0x00	; 0
    2516:	69 f7       	brne	.-38     	; 0x24f2 <main+0xd90>
    2518:	14 c0       	rjmp	.+40     	; 0x2542 <main+0xde0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    251a:	69 a9       	ldd	r22, Y+49	; 0x31
    251c:	7a a9       	ldd	r23, Y+50	; 0x32
    251e:	8b a9       	ldd	r24, Y+51	; 0x33
    2520:	9c a9       	ldd	r25, Y+52	; 0x34
    2522:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2526:	dc 01       	movw	r26, r24
    2528:	cb 01       	movw	r24, r22
    252a:	98 ab       	std	Y+48, r25	; 0x30
    252c:	8f a7       	std	Y+47, r24	; 0x2f
    252e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2530:	98 a9       	ldd	r25, Y+48	; 0x30
    2532:	9c a7       	std	Y+44, r25	; 0x2c
    2534:	8b a7       	std	Y+43, r24	; 0x2b
    2536:	8b a5       	ldd	r24, Y+43	; 0x2b
    2538:	9c a5       	ldd	r25, Y+44	; 0x2c
    253a:	01 97       	sbiw	r24, 0x01	; 1
    253c:	f1 f7       	brne	.-4      	; 0x253a <main+0xdd8>
    253e:	9c a7       	std	Y+44, r25	; 0x2c
    2540:	8b a7       	std	Y+43, r24	; 0x2b
					_delay_ms(100);
					ForLoopCounter++;
    2542:	80 91 42 02 	lds	r24, 0x0242
    2546:	8f 5f       	subi	r24, 0xFF	; 255
    2548:	80 93 42 02 	sts	0x0242, r24
				{
					PassWord[x] =UART_ReceiveByte();

				}

				for(u8 j=i;j<(0x05+i);j++)	/*Now that we have known the location of the User name lets loop through his password */
    254c:	de 01       	movw	r26, r28
    254e:	a3 57       	subi	r26, 0x73	; 115
    2550:	bf 4f       	sbci	r27, 0xFF	; 255
    2552:	fe 01       	movw	r30, r28
    2554:	e3 57       	subi	r30, 0x73	; 115
    2556:	ff 4f       	sbci	r31, 0xFF	; 255
    2558:	80 81       	ld	r24, Z
    255a:	8f 5f       	subi	r24, 0xFF	; 255
    255c:	8c 93       	st	X, r24
    255e:	fe 01       	movw	r30, r28
    2560:	e3 57       	subi	r30, 0x73	; 115
    2562:	ff 4f       	sbci	r31, 0xFF	; 255
    2564:	80 81       	ld	r24, Z
    2566:	28 2f       	mov	r18, r24
    2568:	30 e0       	ldi	r19, 0x00	; 0
    256a:	fe 01       	movw	r30, r28
    256c:	eb 56       	subi	r30, 0x6B	; 107
    256e:	ff 4f       	sbci	r31, 0xFF	; 255
    2570:	80 81       	ld	r24, Z
    2572:	88 2f       	mov	r24, r24
    2574:	90 e0       	ldi	r25, 0x00	; 0
    2576:	05 96       	adiw	r24, 0x05	; 5
    2578:	28 17       	cp	r18, r24
    257a:	39 07       	cpc	r19, r25
    257c:	0c f4       	brge	.+2      	; 0x2580 <main+0xe1e>
    257e:	5f cf       	rjmp	.-322    	; 0x243e <main+0xcdc>

					EEPROM_ReadPassWord(j,&ConfirmedPassWord[ForLoopCounter]);	/*Store the Password from eeprom into this array*/
					_delay_ms(100);
					ForLoopCounter++;
				}
				ForLoopCounter=0;
    2580:	10 92 42 02 	sts	0x0242, r1
				if(stringcmp(PassWord,ConfirmedPassWord) == 1)
    2584:	ce 01       	movw	r24, r28
    2586:	81 56       	subi	r24, 0x61	; 97
    2588:	9f 4f       	sbci	r25, 0xFF	; 255
    258a:	9e 01       	movw	r18, r28
    258c:	25 55       	subi	r18, 0x55	; 85
    258e:	3f 4f       	sbci	r19, 0xFF	; 255
    2590:	b9 01       	movw	r22, r18
    2592:	0e 94 9f 14 	call	0x293e	; 0x293e <stringcmp>
    2596:	81 30       	cpi	r24, 0x01	; 1
    2598:	09 f0       	breq	.+2      	; 0x259c <main+0xe3a>
    259a:	2d c1       	rjmp	.+602    	; 0x27f6 <main+0x1094>
				{
					UART_SendSting("\r\n");
    259c:	84 e8       	ldi	r24, 0x84	; 132
    259e:	90 e0       	ldi	r25, 0x00	; 0
    25a0:	0e 94 4a 0b 	call	0x1694	; 0x1694 <UART_SendSting>
					UART_SendSting("Enter 2 for Led or 3 for Motor :");
    25a4:	83 ef       	ldi	r24, 0xF3	; 243
    25a6:	90 e0       	ldi	r25, 0x00	; 0
    25a8:	0e 94 4a 0b 	call	0x1694	; 0x1694 <UART_SendSting>
					UART_SendSting("\r\n");
    25ac:	84 e8       	ldi	r24, 0x84	; 132
    25ae:	90 e0       	ldi	r25, 0x00	; 0
    25b0:	0e 94 4a 0b 	call	0x1694	; 0x1694 <UART_SendSting>
					state=UART_ReceiveByte();
    25b4:	0e 94 21 0b 	call	0x1642	; 0x1642 <UART_ReceiveByte>
    25b8:	fe 01       	movw	r30, r28
    25ba:	e7 56       	subi	r30, 0x67	; 103
    25bc:	ff 4f       	sbci	r31, 0xFF	; 255
    25be:	80 83       	st	Z, r24
					switch(state)
    25c0:	fe 01       	movw	r30, r28
    25c2:	e7 56       	subi	r30, 0x67	; 103
    25c4:	ff 4f       	sbci	r31, 0xFF	; 255
    25c6:	80 81       	ld	r24, Z
    25c8:	28 2f       	mov	r18, r24
    25ca:	30 e0       	ldi	r19, 0x00	; 0
    25cc:	c0 55       	subi	r28, 0x50	; 80
    25ce:	df 4f       	sbci	r29, 0xFF	; 255
    25d0:	39 83       	std	Y+1, r19	; 0x01
    25d2:	28 83       	st	Y, r18
    25d4:	c0 5b       	subi	r28, 0xB0	; 176
    25d6:	d0 40       	sbci	r29, 0x00	; 0
    25d8:	c0 55       	subi	r28, 0x50	; 80
    25da:	df 4f       	sbci	r29, 0xFF	; 255
    25dc:	88 81       	ld	r24, Y
    25de:	99 81       	ldd	r25, Y+1	; 0x01
    25e0:	c0 5b       	subi	r28, 0xB0	; 176
    25e2:	d0 40       	sbci	r29, 0x00	; 0
    25e4:	82 33       	cpi	r24, 0x32	; 50
    25e6:	91 05       	cpc	r25, r1
    25e8:	51 f0       	breq	.+20     	; 0x25fe <main+0xe9c>
    25ea:	c0 55       	subi	r28, 0x50	; 80
    25ec:	df 4f       	sbci	r29, 0xFF	; 255
    25ee:	e8 81       	ld	r30, Y
    25f0:	f9 81       	ldd	r31, Y+1	; 0x01
    25f2:	c0 5b       	subi	r28, 0xB0	; 176
    25f4:	d0 40       	sbci	r29, 0x00	; 0
    25f6:	e3 33       	cpi	r30, 0x33	; 51
    25f8:	f1 05       	cpc	r31, r1
    25fa:	39 f0       	breq	.+14     	; 0x260a <main+0xea8>
    25fc:	f7 c0       	rjmp	.+494    	; 0x27ec <main+0x108a>
					{
					case LED:
						SetPinValue(DIO_PORTA,PIN0,HIGH);
    25fe:	80 e0       	ldi	r24, 0x00	; 0
    2600:	60 e0       	ldi	r22, 0x00	; 0
    2602:	41 e0       	ldi	r20, 0x01	; 1
    2604:	0e 94 b0 07 	call	0xf60	; 0xf60 <SetPinValue>
    2608:	55 ca       	rjmp	.-2902   	; 0x1ab4 <main+0x352>
						break;
					case MOTOR:
						DC_Rotate(CW,100);
    260a:	80 e0       	ldi	r24, 0x00	; 0
    260c:	64 e6       	ldi	r22, 0x64	; 100
    260e:	0e 94 ef 14 	call	0x29de	; 0x29de <DC_Rotate>
    2612:	80 e0       	ldi	r24, 0x00	; 0
    2614:	90 e4       	ldi	r25, 0x40	; 64
    2616:	ac e1       	ldi	r26, 0x1C	; 28
    2618:	b6 e4       	ldi	r27, 0x46	; 70
    261a:	8f a3       	std	Y+39, r24	; 0x27
    261c:	98 a7       	std	Y+40, r25	; 0x28
    261e:	a9 a7       	std	Y+41, r26	; 0x29
    2620:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2622:	6f a1       	ldd	r22, Y+39	; 0x27
    2624:	78 a5       	ldd	r23, Y+40	; 0x28
    2626:	89 a5       	ldd	r24, Y+41	; 0x29
    2628:	9a a5       	ldd	r25, Y+42	; 0x2a
    262a:	20 e0       	ldi	r18, 0x00	; 0
    262c:	30 e0       	ldi	r19, 0x00	; 0
    262e:	4a e7       	ldi	r20, 0x7A	; 122
    2630:	53 e4       	ldi	r21, 0x43	; 67
    2632:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2636:	dc 01       	movw	r26, r24
    2638:	cb 01       	movw	r24, r22
    263a:	8b a3       	std	Y+35, r24	; 0x23
    263c:	9c a3       	std	Y+36, r25	; 0x24
    263e:	ad a3       	std	Y+37, r26	; 0x25
    2640:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2642:	6b a1       	ldd	r22, Y+35	; 0x23
    2644:	7c a1       	ldd	r23, Y+36	; 0x24
    2646:	8d a1       	ldd	r24, Y+37	; 0x25
    2648:	9e a1       	ldd	r25, Y+38	; 0x26
    264a:	20 e0       	ldi	r18, 0x00	; 0
    264c:	30 e0       	ldi	r19, 0x00	; 0
    264e:	40 e8       	ldi	r20, 0x80	; 128
    2650:	5f e3       	ldi	r21, 0x3F	; 63
    2652:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2656:	88 23       	and	r24, r24
    2658:	2c f4       	brge	.+10     	; 0x2664 <main+0xf02>
		__ticks = 1;
    265a:	81 e0       	ldi	r24, 0x01	; 1
    265c:	90 e0       	ldi	r25, 0x00	; 0
    265e:	9a a3       	std	Y+34, r25	; 0x22
    2660:	89 a3       	std	Y+33, r24	; 0x21
    2662:	3f c0       	rjmp	.+126    	; 0x26e2 <main+0xf80>
	else if (__tmp > 65535)
    2664:	6b a1       	ldd	r22, Y+35	; 0x23
    2666:	7c a1       	ldd	r23, Y+36	; 0x24
    2668:	8d a1       	ldd	r24, Y+37	; 0x25
    266a:	9e a1       	ldd	r25, Y+38	; 0x26
    266c:	20 e0       	ldi	r18, 0x00	; 0
    266e:	3f ef       	ldi	r19, 0xFF	; 255
    2670:	4f e7       	ldi	r20, 0x7F	; 127
    2672:	57 e4       	ldi	r21, 0x47	; 71
    2674:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2678:	18 16       	cp	r1, r24
    267a:	4c f5       	brge	.+82     	; 0x26ce <main+0xf6c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    267c:	6f a1       	ldd	r22, Y+39	; 0x27
    267e:	78 a5       	ldd	r23, Y+40	; 0x28
    2680:	89 a5       	ldd	r24, Y+41	; 0x29
    2682:	9a a5       	ldd	r25, Y+42	; 0x2a
    2684:	20 e0       	ldi	r18, 0x00	; 0
    2686:	30 e0       	ldi	r19, 0x00	; 0
    2688:	40 e2       	ldi	r20, 0x20	; 32
    268a:	51 e4       	ldi	r21, 0x41	; 65
    268c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2690:	dc 01       	movw	r26, r24
    2692:	cb 01       	movw	r24, r22
    2694:	bc 01       	movw	r22, r24
    2696:	cd 01       	movw	r24, r26
    2698:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    269c:	dc 01       	movw	r26, r24
    269e:	cb 01       	movw	r24, r22
    26a0:	9a a3       	std	Y+34, r25	; 0x22
    26a2:	89 a3       	std	Y+33, r24	; 0x21
    26a4:	0f c0       	rjmp	.+30     	; 0x26c4 <main+0xf62>
    26a6:	89 e1       	ldi	r24, 0x19	; 25
    26a8:	90 e0       	ldi	r25, 0x00	; 0
    26aa:	98 a3       	std	Y+32, r25	; 0x20
    26ac:	8f 8f       	std	Y+31, r24	; 0x1f
    26ae:	8f 8d       	ldd	r24, Y+31	; 0x1f
    26b0:	98 a1       	ldd	r25, Y+32	; 0x20
    26b2:	01 97       	sbiw	r24, 0x01	; 1
    26b4:	f1 f7       	brne	.-4      	; 0x26b2 <main+0xf50>
    26b6:	98 a3       	std	Y+32, r25	; 0x20
    26b8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26ba:	89 a1       	ldd	r24, Y+33	; 0x21
    26bc:	9a a1       	ldd	r25, Y+34	; 0x22
    26be:	01 97       	sbiw	r24, 0x01	; 1
    26c0:	9a a3       	std	Y+34, r25	; 0x22
    26c2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26c4:	89 a1       	ldd	r24, Y+33	; 0x21
    26c6:	9a a1       	ldd	r25, Y+34	; 0x22
    26c8:	00 97       	sbiw	r24, 0x00	; 0
    26ca:	69 f7       	brne	.-38     	; 0x26a6 <main+0xf44>
    26cc:	14 c0       	rjmp	.+40     	; 0x26f6 <main+0xf94>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26ce:	6b a1       	ldd	r22, Y+35	; 0x23
    26d0:	7c a1       	ldd	r23, Y+36	; 0x24
    26d2:	8d a1       	ldd	r24, Y+37	; 0x25
    26d4:	9e a1       	ldd	r25, Y+38	; 0x26
    26d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26da:	dc 01       	movw	r26, r24
    26dc:	cb 01       	movw	r24, r22
    26de:	9a a3       	std	Y+34, r25	; 0x22
    26e0:	89 a3       	std	Y+33, r24	; 0x21
    26e2:	89 a1       	ldd	r24, Y+33	; 0x21
    26e4:	9a a1       	ldd	r25, Y+34	; 0x22
    26e6:	9e 8f       	std	Y+30, r25	; 0x1e
    26e8:	8d 8f       	std	Y+29, r24	; 0x1d
    26ea:	8d 8d       	ldd	r24, Y+29	; 0x1d
    26ec:	9e 8d       	ldd	r25, Y+30	; 0x1e
    26ee:	01 97       	sbiw	r24, 0x01	; 1
    26f0:	f1 f7       	brne	.-4      	; 0x26ee <main+0xf8c>
    26f2:	9e 8f       	std	Y+30, r25	; 0x1e
    26f4:	8d 8f       	std	Y+29, r24	; 0x1d
						_delay_ms(10000);
						DC_Rotate(CCW,100);
    26f6:	81 e0       	ldi	r24, 0x01	; 1
    26f8:	64 e6       	ldi	r22, 0x64	; 100
    26fa:	0e 94 ef 14 	call	0x29de	; 0x29de <DC_Rotate>
    26fe:	80 e0       	ldi	r24, 0x00	; 0
    2700:	90 e4       	ldi	r25, 0x40	; 64
    2702:	ac e1       	ldi	r26, 0x1C	; 28
    2704:	b6 e4       	ldi	r27, 0x46	; 70
    2706:	89 8f       	std	Y+25, r24	; 0x19
    2708:	9a 8f       	std	Y+26, r25	; 0x1a
    270a:	ab 8f       	std	Y+27, r26	; 0x1b
    270c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    270e:	69 8d       	ldd	r22, Y+25	; 0x19
    2710:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2712:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2714:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2716:	20 e0       	ldi	r18, 0x00	; 0
    2718:	30 e0       	ldi	r19, 0x00	; 0
    271a:	4a e7       	ldi	r20, 0x7A	; 122
    271c:	53 e4       	ldi	r21, 0x43	; 67
    271e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2722:	dc 01       	movw	r26, r24
    2724:	cb 01       	movw	r24, r22
    2726:	8d 8b       	std	Y+21, r24	; 0x15
    2728:	9e 8b       	std	Y+22, r25	; 0x16
    272a:	af 8b       	std	Y+23, r26	; 0x17
    272c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    272e:	6d 89       	ldd	r22, Y+21	; 0x15
    2730:	7e 89       	ldd	r23, Y+22	; 0x16
    2732:	8f 89       	ldd	r24, Y+23	; 0x17
    2734:	98 8d       	ldd	r25, Y+24	; 0x18
    2736:	20 e0       	ldi	r18, 0x00	; 0
    2738:	30 e0       	ldi	r19, 0x00	; 0
    273a:	40 e8       	ldi	r20, 0x80	; 128
    273c:	5f e3       	ldi	r21, 0x3F	; 63
    273e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2742:	88 23       	and	r24, r24
    2744:	2c f4       	brge	.+10     	; 0x2750 <main+0xfee>
		__ticks = 1;
    2746:	81 e0       	ldi	r24, 0x01	; 1
    2748:	90 e0       	ldi	r25, 0x00	; 0
    274a:	9c 8b       	std	Y+20, r25	; 0x14
    274c:	8b 8b       	std	Y+19, r24	; 0x13
    274e:	3f c0       	rjmp	.+126    	; 0x27ce <main+0x106c>
	else if (__tmp > 65535)
    2750:	6d 89       	ldd	r22, Y+21	; 0x15
    2752:	7e 89       	ldd	r23, Y+22	; 0x16
    2754:	8f 89       	ldd	r24, Y+23	; 0x17
    2756:	98 8d       	ldd	r25, Y+24	; 0x18
    2758:	20 e0       	ldi	r18, 0x00	; 0
    275a:	3f ef       	ldi	r19, 0xFF	; 255
    275c:	4f e7       	ldi	r20, 0x7F	; 127
    275e:	57 e4       	ldi	r21, 0x47	; 71
    2760:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2764:	18 16       	cp	r1, r24
    2766:	4c f5       	brge	.+82     	; 0x27ba <main+0x1058>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2768:	69 8d       	ldd	r22, Y+25	; 0x19
    276a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    276c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    276e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2770:	20 e0       	ldi	r18, 0x00	; 0
    2772:	30 e0       	ldi	r19, 0x00	; 0
    2774:	40 e2       	ldi	r20, 0x20	; 32
    2776:	51 e4       	ldi	r21, 0x41	; 65
    2778:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    277c:	dc 01       	movw	r26, r24
    277e:	cb 01       	movw	r24, r22
    2780:	bc 01       	movw	r22, r24
    2782:	cd 01       	movw	r24, r26
    2784:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2788:	dc 01       	movw	r26, r24
    278a:	cb 01       	movw	r24, r22
    278c:	9c 8b       	std	Y+20, r25	; 0x14
    278e:	8b 8b       	std	Y+19, r24	; 0x13
    2790:	0f c0       	rjmp	.+30     	; 0x27b0 <main+0x104e>
    2792:	89 e1       	ldi	r24, 0x19	; 25
    2794:	90 e0       	ldi	r25, 0x00	; 0
    2796:	9a 8b       	std	Y+18, r25	; 0x12
    2798:	89 8b       	std	Y+17, r24	; 0x11
    279a:	89 89       	ldd	r24, Y+17	; 0x11
    279c:	9a 89       	ldd	r25, Y+18	; 0x12
    279e:	01 97       	sbiw	r24, 0x01	; 1
    27a0:	f1 f7       	brne	.-4      	; 0x279e <main+0x103c>
    27a2:	9a 8b       	std	Y+18, r25	; 0x12
    27a4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27a6:	8b 89       	ldd	r24, Y+19	; 0x13
    27a8:	9c 89       	ldd	r25, Y+20	; 0x14
    27aa:	01 97       	sbiw	r24, 0x01	; 1
    27ac:	9c 8b       	std	Y+20, r25	; 0x14
    27ae:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27b0:	8b 89       	ldd	r24, Y+19	; 0x13
    27b2:	9c 89       	ldd	r25, Y+20	; 0x14
    27b4:	00 97       	sbiw	r24, 0x00	; 0
    27b6:	69 f7       	brne	.-38     	; 0x2792 <main+0x1030>
    27b8:	14 c0       	rjmp	.+40     	; 0x27e2 <main+0x1080>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27ba:	6d 89       	ldd	r22, Y+21	; 0x15
    27bc:	7e 89       	ldd	r23, Y+22	; 0x16
    27be:	8f 89       	ldd	r24, Y+23	; 0x17
    27c0:	98 8d       	ldd	r25, Y+24	; 0x18
    27c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27c6:	dc 01       	movw	r26, r24
    27c8:	cb 01       	movw	r24, r22
    27ca:	9c 8b       	std	Y+20, r25	; 0x14
    27cc:	8b 8b       	std	Y+19, r24	; 0x13
    27ce:	8b 89       	ldd	r24, Y+19	; 0x13
    27d0:	9c 89       	ldd	r25, Y+20	; 0x14
    27d2:	98 8b       	std	Y+16, r25	; 0x10
    27d4:	8f 87       	std	Y+15, r24	; 0x0f
    27d6:	8f 85       	ldd	r24, Y+15	; 0x0f
    27d8:	98 89       	ldd	r25, Y+16	; 0x10
    27da:	01 97       	sbiw	r24, 0x01	; 1
    27dc:	f1 f7       	brne	.-4      	; 0x27da <main+0x1078>
    27de:	98 8b       	std	Y+16, r25	; 0x10
    27e0:	8f 87       	std	Y+15, r24	; 0x0f
						_delay_ms(10000);
						DC_Rotate(OFF,0);
    27e2:	82 e0       	ldi	r24, 0x02	; 2
    27e4:	60 e0       	ldi	r22, 0x00	; 0
    27e6:	0e 94 ef 14 	call	0x29de	; 0x29de <DC_Rotate>
    27ea:	64 c9       	rjmp	.-3384   	; 0x1ab4 <main+0x352>
						break;
					default:
						UART_SendSting("Wrong operation\r\n");
    27ec:	84 e1       	ldi	r24, 0x14	; 20
    27ee:	91 e0       	ldi	r25, 0x01	; 1
    27f0:	0e 94 4a 0b 	call	0x1694	; 0x1694 <UART_SendSting>
    27f4:	5f c9       	rjmp	.-3394   	; 0x1ab4 <main+0x352>
					}
					goto label2;
				}
				else
				{
					UART_SendSting("\r\nWrong Password\r\n");
    27f6:	86 e2       	ldi	r24, 0x26	; 38
    27f8:	91 e0       	ldi	r25, 0x01	; 1
    27fa:	0e 94 4a 0b 	call	0x1694	; 0x1694 <UART_SendSting>
				}
				if((trials == 2) && (stringcmp(PassWord,ConfirmedPassWord) != 1))
    27fe:	fe 01       	movw	r30, r28
    2800:	e1 57       	subi	r30, 0x71	; 113
    2802:	ff 4f       	sbci	r31, 0xFF	; 255
    2804:	80 81       	ld	r24, Z
    2806:	82 30       	cpi	r24, 0x02	; 2
    2808:	09 f0       	breq	.+2      	; 0x280c <main+0x10aa>
    280a:	88 c0       	rjmp	.+272    	; 0x291c <main+0x11ba>
    280c:	ce 01       	movw	r24, r28
    280e:	81 56       	subi	r24, 0x61	; 97
    2810:	9f 4f       	sbci	r25, 0xFF	; 255
    2812:	9e 01       	movw	r18, r28
    2814:	25 55       	subi	r18, 0x55	; 85
    2816:	3f 4f       	sbci	r19, 0xFF	; 255
    2818:	b9 01       	movw	r22, r18
    281a:	0e 94 9f 14 	call	0x293e	; 0x293e <stringcmp>
    281e:	81 30       	cpi	r24, 0x01	; 1
    2820:	09 f4       	brne	.+2      	; 0x2824 <main+0x10c2>
    2822:	7c c0       	rjmp	.+248    	; 0x291c <main+0x11ba>
				{
					SetPinValue(DIO_PORTC,PIN0,HIGH);
    2824:	82 e0       	ldi	r24, 0x02	; 2
    2826:	60 e0       	ldi	r22, 0x00	; 0
    2828:	41 e0       	ldi	r20, 0x01	; 1
    282a:	0e 94 b0 07 	call	0xf60	; 0xf60 <SetPinValue>
    282e:	80 e0       	ldi	r24, 0x00	; 0
    2830:	90 e4       	ldi	r25, 0x40	; 64
    2832:	ac e9       	ldi	r26, 0x9C	; 156
    2834:	b5 e4       	ldi	r27, 0x45	; 69
    2836:	8b 87       	std	Y+11, r24	; 0x0b
    2838:	9c 87       	std	Y+12, r25	; 0x0c
    283a:	ad 87       	std	Y+13, r26	; 0x0d
    283c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    283e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2840:	7c 85       	ldd	r23, Y+12	; 0x0c
    2842:	8d 85       	ldd	r24, Y+13	; 0x0d
    2844:	9e 85       	ldd	r25, Y+14	; 0x0e
    2846:	20 e0       	ldi	r18, 0x00	; 0
    2848:	30 e0       	ldi	r19, 0x00	; 0
    284a:	4a e7       	ldi	r20, 0x7A	; 122
    284c:	53 e4       	ldi	r21, 0x43	; 67
    284e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2852:	dc 01       	movw	r26, r24
    2854:	cb 01       	movw	r24, r22
    2856:	8f 83       	std	Y+7, r24	; 0x07
    2858:	98 87       	std	Y+8, r25	; 0x08
    285a:	a9 87       	std	Y+9, r26	; 0x09
    285c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    285e:	6f 81       	ldd	r22, Y+7	; 0x07
    2860:	78 85       	ldd	r23, Y+8	; 0x08
    2862:	89 85       	ldd	r24, Y+9	; 0x09
    2864:	9a 85       	ldd	r25, Y+10	; 0x0a
    2866:	20 e0       	ldi	r18, 0x00	; 0
    2868:	30 e0       	ldi	r19, 0x00	; 0
    286a:	40 e8       	ldi	r20, 0x80	; 128
    286c:	5f e3       	ldi	r21, 0x3F	; 63
    286e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2872:	88 23       	and	r24, r24
    2874:	2c f4       	brge	.+10     	; 0x2880 <main+0x111e>
		__ticks = 1;
    2876:	81 e0       	ldi	r24, 0x01	; 1
    2878:	90 e0       	ldi	r25, 0x00	; 0
    287a:	9e 83       	std	Y+6, r25	; 0x06
    287c:	8d 83       	std	Y+5, r24	; 0x05
    287e:	3f c0       	rjmp	.+126    	; 0x28fe <main+0x119c>
	else if (__tmp > 65535)
    2880:	6f 81       	ldd	r22, Y+7	; 0x07
    2882:	78 85       	ldd	r23, Y+8	; 0x08
    2884:	89 85       	ldd	r24, Y+9	; 0x09
    2886:	9a 85       	ldd	r25, Y+10	; 0x0a
    2888:	20 e0       	ldi	r18, 0x00	; 0
    288a:	3f ef       	ldi	r19, 0xFF	; 255
    288c:	4f e7       	ldi	r20, 0x7F	; 127
    288e:	57 e4       	ldi	r21, 0x47	; 71
    2890:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2894:	18 16       	cp	r1, r24
    2896:	4c f5       	brge	.+82     	; 0x28ea <main+0x1188>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2898:	6b 85       	ldd	r22, Y+11	; 0x0b
    289a:	7c 85       	ldd	r23, Y+12	; 0x0c
    289c:	8d 85       	ldd	r24, Y+13	; 0x0d
    289e:	9e 85       	ldd	r25, Y+14	; 0x0e
    28a0:	20 e0       	ldi	r18, 0x00	; 0
    28a2:	30 e0       	ldi	r19, 0x00	; 0
    28a4:	40 e2       	ldi	r20, 0x20	; 32
    28a6:	51 e4       	ldi	r21, 0x41	; 65
    28a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28ac:	dc 01       	movw	r26, r24
    28ae:	cb 01       	movw	r24, r22
    28b0:	bc 01       	movw	r22, r24
    28b2:	cd 01       	movw	r24, r26
    28b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28b8:	dc 01       	movw	r26, r24
    28ba:	cb 01       	movw	r24, r22
    28bc:	9e 83       	std	Y+6, r25	; 0x06
    28be:	8d 83       	std	Y+5, r24	; 0x05
    28c0:	0f c0       	rjmp	.+30     	; 0x28e0 <main+0x117e>
    28c2:	89 e1       	ldi	r24, 0x19	; 25
    28c4:	90 e0       	ldi	r25, 0x00	; 0
    28c6:	9c 83       	std	Y+4, r25	; 0x04
    28c8:	8b 83       	std	Y+3, r24	; 0x03
    28ca:	8b 81       	ldd	r24, Y+3	; 0x03
    28cc:	9c 81       	ldd	r25, Y+4	; 0x04
    28ce:	01 97       	sbiw	r24, 0x01	; 1
    28d0:	f1 f7       	brne	.-4      	; 0x28ce <main+0x116c>
    28d2:	9c 83       	std	Y+4, r25	; 0x04
    28d4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28d6:	8d 81       	ldd	r24, Y+5	; 0x05
    28d8:	9e 81       	ldd	r25, Y+6	; 0x06
    28da:	01 97       	sbiw	r24, 0x01	; 1
    28dc:	9e 83       	std	Y+6, r25	; 0x06
    28de:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28e0:	8d 81       	ldd	r24, Y+5	; 0x05
    28e2:	9e 81       	ldd	r25, Y+6	; 0x06
    28e4:	00 97       	sbiw	r24, 0x00	; 0
    28e6:	69 f7       	brne	.-38     	; 0x28c2 <main+0x1160>
    28e8:	14 c0       	rjmp	.+40     	; 0x2912 <main+0x11b0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28ea:	6f 81       	ldd	r22, Y+7	; 0x07
    28ec:	78 85       	ldd	r23, Y+8	; 0x08
    28ee:	89 85       	ldd	r24, Y+9	; 0x09
    28f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    28f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28f6:	dc 01       	movw	r26, r24
    28f8:	cb 01       	movw	r24, r22
    28fa:	9e 83       	std	Y+6, r25	; 0x06
    28fc:	8d 83       	std	Y+5, r24	; 0x05
    28fe:	8d 81       	ldd	r24, Y+5	; 0x05
    2900:	9e 81       	ldd	r25, Y+6	; 0x06
    2902:	9a 83       	std	Y+2, r25	; 0x02
    2904:	89 83       	std	Y+1, r24	; 0x01
    2906:	89 81       	ldd	r24, Y+1	; 0x01
    2908:	9a 81       	ldd	r25, Y+2	; 0x02
    290a:	01 97       	sbiw	r24, 0x01	; 1
    290c:	f1 f7       	brne	.-4      	; 0x290a <main+0x11a8>
    290e:	9a 83       	std	Y+2, r25	; 0x02
    2910:	89 83       	std	Y+1, r24	; 0x01
					_delay_ms(5000);
					SetPinValue(DIO_PORTC,PIN0,LOW);
    2912:	82 e0       	ldi	r24, 0x02	; 2
    2914:	60 e0       	ldi	r22, 0x00	; 0
    2916:	40 e0       	ldi	r20, 0x00	; 0
    2918:	0e 94 b0 07 	call	0xf60	; 0xf60 <SetPinValue>
					goto label2;
				}
			}
			label:
			ForLoopCounter=0;
			for(u8 trials =0;trials<3; trials++)
    291c:	de 01       	movw	r26, r28
    291e:	a1 57       	subi	r26, 0x71	; 113
    2920:	bf 4f       	sbci	r27, 0xFF	; 255
    2922:	fe 01       	movw	r30, r28
    2924:	e1 57       	subi	r30, 0x71	; 113
    2926:	ff 4f       	sbci	r31, 0xFF	; 255
    2928:	80 81       	ld	r24, Z
    292a:	8f 5f       	subi	r24, 0xFF	; 255
    292c:	8c 93       	st	X, r24
    292e:	fe 01       	movw	r30, r28
    2930:	e1 57       	subi	r30, 0x71	; 113
    2932:	ff 4f       	sbci	r31, 0xFF	; 255
    2934:	80 81       	ld	r24, Z
    2936:	83 30       	cpi	r24, 0x03	; 3
    2938:	08 f4       	brcc	.+2      	; 0x293c <main+0x11da>
    293a:	50 cd       	rjmp	.-1376   	; 0x23dc <main+0xc7a>
    293c:	bb c8       	rjmp	.-3722   	; 0x1ab4 <main+0x352>

0000293e <stringcmp>:
	}

}

u8 stringcmp(u8 *UserName,u8 *ConfirmedUserName)
{	u8 Confirmed=1;
    293e:	df 93       	push	r29
    2940:	cf 93       	push	r28
    2942:	00 d0       	rcall	.+0      	; 0x2944 <stringcmp+0x6>
    2944:	00 d0       	rcall	.+0      	; 0x2946 <stringcmp+0x8>
    2946:	00 d0       	rcall	.+0      	; 0x2948 <stringcmp+0xa>
    2948:	cd b7       	in	r28, 0x3d	; 61
    294a:	de b7       	in	r29, 0x3e	; 62
    294c:	9c 83       	std	Y+4, r25	; 0x04
    294e:	8b 83       	std	Y+3, r24	; 0x03
    2950:	7e 83       	std	Y+6, r23	; 0x06
    2952:	6d 83       	std	Y+5, r22	; 0x05
    2954:	81 e0       	ldi	r24, 0x01	; 1
    2956:	8a 83       	std	Y+2, r24	; 0x02
for(u8 i=0;i<5;i++)
    2958:	19 82       	std	Y+1, r1	; 0x01
    295a:	19 c0       	rjmp	.+50     	; 0x298e <stringcmp+0x50>
{
	if(UserName[i] == ConfirmedUserName[i])
    295c:	89 81       	ldd	r24, Y+1	; 0x01
    295e:	28 2f       	mov	r18, r24
    2960:	30 e0       	ldi	r19, 0x00	; 0
    2962:	8b 81       	ldd	r24, Y+3	; 0x03
    2964:	9c 81       	ldd	r25, Y+4	; 0x04
    2966:	fc 01       	movw	r30, r24
    2968:	e2 0f       	add	r30, r18
    296a:	f3 1f       	adc	r31, r19
    296c:	40 81       	ld	r20, Z
    296e:	89 81       	ldd	r24, Y+1	; 0x01
    2970:	28 2f       	mov	r18, r24
    2972:	30 e0       	ldi	r19, 0x00	; 0
    2974:	8d 81       	ldd	r24, Y+5	; 0x05
    2976:	9e 81       	ldd	r25, Y+6	; 0x06
    2978:	fc 01       	movw	r30, r24
    297a:	e2 0f       	add	r30, r18
    297c:	f3 1f       	adc	r31, r19
    297e:	80 81       	ld	r24, Z
    2980:	48 17       	cp	r20, r24
    2982:	11 f0       	breq	.+4      	; 0x2988 <stringcmp+0x4a>
		continue;
	else
	{
		Confirmed=0;
    2984:	1a 82       	std	Y+2, r1	; 0x02
    2986:	06 c0       	rjmp	.+12     	; 0x2994 <stringcmp+0x56>

}

u8 stringcmp(u8 *UserName,u8 *ConfirmedUserName)
{	u8 Confirmed=1;
for(u8 i=0;i<5;i++)
    2988:	89 81       	ldd	r24, Y+1	; 0x01
    298a:	8f 5f       	subi	r24, 0xFF	; 255
    298c:	89 83       	std	Y+1, r24	; 0x01
    298e:	89 81       	ldd	r24, Y+1	; 0x01
    2990:	85 30       	cpi	r24, 0x05	; 5
    2992:	20 f3       	brcs	.-56     	; 0x295c <stringcmp+0x1e>
	{
		Confirmed=0;
		break;
	}
}
return Confirmed;
    2994:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2996:	26 96       	adiw	r28, 0x06	; 6
    2998:	0f b6       	in	r0, 0x3f	; 63
    299a:	f8 94       	cli
    299c:	de bf       	out	0x3e, r29	; 62
    299e:	0f be       	out	0x3f, r0	; 63
    29a0:	cd bf       	out	0x3d, r28	; 61
    29a2:	cf 91       	pop	r28
    29a4:	df 91       	pop	r29
    29a6:	08 95       	ret

000029a8 <DC_voidInit>:
#include "motor.h"

#include "DIO.h"
#include "TIMER.h"
void DC_voidInit(void)
{
    29a8:	df 93       	push	r29
    29aa:	cf 93       	push	r28
    29ac:	cd b7       	in	r28, 0x3d	; 61
    29ae:	de b7       	in	r29, 0x3e	; 62
 SetPinDirection(DC_MOTOR_PORT1,DC_MOTOR_PIN0,OUTPUT);
    29b0:	83 e0       	ldi	r24, 0x03	; 3
    29b2:	66 e0       	ldi	r22, 0x06	; 6
    29b4:	41 e0       	ldi	r20, 0x01	; 1
    29b6:	0e 94 50 06 	call	0xca0	; 0xca0 <SetPinDirection>
 SetPinDirection(DC_MOTOR_PORT2,DC_MOTOR_PIN1,OUTPUT);
    29ba:	83 e0       	ldi	r24, 0x03	; 3
    29bc:	67 e0       	ldi	r22, 0x07	; 7
    29be:	41 e0       	ldi	r20, 0x01	; 1
    29c0:	0e 94 50 06 	call	0xca0	; 0xca0 <SetPinDirection>
 SetPinValue(DC_MOTOR_PORT1,DC_MOTOR_PIN0,LOW);
    29c4:	83 e0       	ldi	r24, 0x03	; 3
    29c6:	66 e0       	ldi	r22, 0x06	; 6
    29c8:	40 e0       	ldi	r20, 0x00	; 0
    29ca:	0e 94 b0 07 	call	0xf60	; 0xf60 <SetPinValue>
 SetPinValue(DC_MOTOR_PORT2,DC_MOTOR_PIN1,LOW);
    29ce:	83 e0       	ldi	r24, 0x03	; 3
    29d0:	67 e0       	ldi	r22, 0x07	; 7
    29d2:	40 e0       	ldi	r20, 0x00	; 0
    29d4:	0e 94 b0 07 	call	0xf60	; 0xf60 <SetPinValue>
}
    29d8:	cf 91       	pop	r28
    29da:	df 91       	pop	r29
    29dc:	08 95       	ret

000029de <DC_Rotate>:
void DC_Rotate(States state,u8 speed)
{
    29de:	df 93       	push	r29
    29e0:	cf 93       	push	r28
    29e2:	00 d0       	rcall	.+0      	; 0x29e4 <DC_Rotate+0x6>
    29e4:	00 d0       	rcall	.+0      	; 0x29e6 <DC_Rotate+0x8>
    29e6:	cd b7       	in	r28, 0x3d	; 61
    29e8:	de b7       	in	r29, 0x3e	; 62
    29ea:	89 83       	std	Y+1, r24	; 0x01
    29ec:	6a 83       	std	Y+2, r22	; 0x02
	Timer0_PWM_Init(speed);
    29ee:	8a 81       	ldd	r24, Y+2	; 0x02
    29f0:	0e 94 4f 0a 	call	0x149e	; 0x149e <Timer0_PWM_Init>

	switch(state)
    29f4:	89 81       	ldd	r24, Y+1	; 0x01
    29f6:	28 2f       	mov	r18, r24
    29f8:	30 e0       	ldi	r19, 0x00	; 0
    29fa:	3c 83       	std	Y+4, r19	; 0x04
    29fc:	2b 83       	std	Y+3, r18	; 0x03
    29fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2a00:	9c 81       	ldd	r25, Y+4	; 0x04
    2a02:	81 30       	cpi	r24, 0x01	; 1
    2a04:	91 05       	cpc	r25, r1
    2a06:	a1 f0       	breq	.+40     	; 0x2a30 <DC_Rotate+0x52>
    2a08:	2b 81       	ldd	r18, Y+3	; 0x03
    2a0a:	3c 81       	ldd	r19, Y+4	; 0x04
    2a0c:	22 30       	cpi	r18, 0x02	; 2
    2a0e:	31 05       	cpc	r19, r1
    2a10:	d1 f0       	breq	.+52     	; 0x2a46 <DC_Rotate+0x68>
    2a12:	8b 81       	ldd	r24, Y+3	; 0x03
    2a14:	9c 81       	ldd	r25, Y+4	; 0x04
    2a16:	00 97       	sbiw	r24, 0x00	; 0
    2a18:	01 f5       	brne	.+64     	; 0x2a5a <DC_Rotate+0x7c>
	{
	case CW  : SetPinValue(DC_MOTOR_PORT1,DC_MOTOR_PIN0,HIGH); SetPinValue(DC_MOTOR_PORT2,DC_MOTOR_PIN1,LOW); break;
    2a1a:	83 e0       	ldi	r24, 0x03	; 3
    2a1c:	66 e0       	ldi	r22, 0x06	; 6
    2a1e:	41 e0       	ldi	r20, 0x01	; 1
    2a20:	0e 94 b0 07 	call	0xf60	; 0xf60 <SetPinValue>
    2a24:	83 e0       	ldi	r24, 0x03	; 3
    2a26:	67 e0       	ldi	r22, 0x07	; 7
    2a28:	40 e0       	ldi	r20, 0x00	; 0
    2a2a:	0e 94 b0 07 	call	0xf60	; 0xf60 <SetPinValue>
    2a2e:	15 c0       	rjmp	.+42     	; 0x2a5a <DC_Rotate+0x7c>
    case CCW : SetPinValue(DC_MOTOR_PORT1,DC_MOTOR_PIN0,LOW); SetPinValue(DC_MOTOR_PORT2,DC_MOTOR_PIN1,HIGH); break;
    2a30:	83 e0       	ldi	r24, 0x03	; 3
    2a32:	66 e0       	ldi	r22, 0x06	; 6
    2a34:	40 e0       	ldi	r20, 0x00	; 0
    2a36:	0e 94 b0 07 	call	0xf60	; 0xf60 <SetPinValue>
    2a3a:	83 e0       	ldi	r24, 0x03	; 3
    2a3c:	67 e0       	ldi	r22, 0x07	; 7
    2a3e:	41 e0       	ldi	r20, 0x01	; 1
    2a40:	0e 94 b0 07 	call	0xf60	; 0xf60 <SetPinValue>
    2a44:	0a c0       	rjmp	.+20     	; 0x2a5a <DC_Rotate+0x7c>
	case OFF : SetPinValue(DC_MOTOR_PORT1,DC_MOTOR_PIN0,LOW); SetPinValue(DC_MOTOR_PORT2,DC_MOTOR_PIN1,LOW); break;
    2a46:	83 e0       	ldi	r24, 0x03	; 3
    2a48:	66 e0       	ldi	r22, 0x06	; 6
    2a4a:	40 e0       	ldi	r20, 0x00	; 0
    2a4c:	0e 94 b0 07 	call	0xf60	; 0xf60 <SetPinValue>
    2a50:	83 e0       	ldi	r24, 0x03	; 3
    2a52:	67 e0       	ldi	r22, 0x07	; 7
    2a54:	40 e0       	ldi	r20, 0x00	; 0
    2a56:	0e 94 b0 07 	call	0xf60	; 0xf60 <SetPinValue>
	}
}
    2a5a:	0f 90       	pop	r0
    2a5c:	0f 90       	pop	r0
    2a5e:	0f 90       	pop	r0
    2a60:	0f 90       	pop	r0
    2a62:	cf 91       	pop	r28
    2a64:	df 91       	pop	r29
    2a66:	08 95       	ret

00002a68 <TWI_init>:

#include <avr/io.h>
#include "twi2.h"
#include "BIT_MATH.h"
void TWI_init(const TWI_ConfigType * Config_Ptr)
{
    2a68:	cf 92       	push	r12
    2a6a:	df 92       	push	r13
    2a6c:	ef 92       	push	r14
    2a6e:	ff 92       	push	r15
    2a70:	0f 93       	push	r16
    2a72:	1f 93       	push	r17
    2a74:	df 93       	push	r29
    2a76:	cf 93       	push	r28
    2a78:	00 d0       	rcall	.+0      	; 0x2a7a <TWI_init+0x12>
    2a7a:	cd b7       	in	r28, 0x3d	; 61
    2a7c:	de b7       	in	r29, 0x3e	; 62
    2a7e:	9a 83       	std	Y+2, r25	; 0x02
    2a80:	89 83       	std	Y+1, r24	; 0x01
    /*
     * Insert the required Prescaler on TWSR Register
     * It will occupy the first two bits as the other bits are Read Only
     */
	TWSR = Config_Ptr->prescaler;
    2a82:	a1 e2       	ldi	r26, 0x21	; 33
    2a84:	b0 e0       	ldi	r27, 0x00	; 0
    2a86:	e9 81       	ldd	r30, Y+1	; 0x01
    2a88:	fa 81       	ldd	r31, Y+2	; 0x02
    2a8a:	84 81       	ldd	r24, Z+4	; 0x04
    2a8c:	8c 93       	st	X, r24

	/*
	 * Calculate the division factor for the bit rate generator
	 * then Insert it on TWBR Register ( It will occupy the whole Register )
	 */
	TWBR = ( ( F_CPU / Config_Ptr->mode ) - 16 ) / ( 2 * ( 4 ^ Config_Ptr->prescaler ) );
    2a8e:	cc 24       	eor	r12, r12
    2a90:	dd 24       	eor	r13, r13
    2a92:	68 94       	set
    2a94:	c5 f8       	bld	r12, 5
    2a96:	e9 81       	ldd	r30, Y+1	; 0x01
    2a98:	fa 81       	ldd	r31, Y+2	; 0x02
    2a9a:	20 81       	ld	r18, Z
    2a9c:	31 81       	ldd	r19, Z+1	; 0x01
    2a9e:	42 81       	ldd	r20, Z+2	; 0x02
    2aa0:	53 81       	ldd	r21, Z+3	; 0x03
    2aa2:	80 e4       	ldi	r24, 0x40	; 64
    2aa4:	92 e4       	ldi	r25, 0x42	; 66
    2aa6:	af e0       	ldi	r26, 0x0F	; 15
    2aa8:	b0 e0       	ldi	r27, 0x00	; 0
    2aaa:	bc 01       	movw	r22, r24
    2aac:	cd 01       	movw	r24, r26
    2aae:	0e 94 fc 15 	call	0x2bf8	; 0x2bf8 <__udivmodsi4>
    2ab2:	da 01       	movw	r26, r20
    2ab4:	c9 01       	movw	r24, r18
    2ab6:	0f 2e       	mov	r0, r31
    2ab8:	f0 ef       	ldi	r31, 0xF0	; 240
    2aba:	ef 2e       	mov	r14, r31
    2abc:	ff ef       	ldi	r31, 0xFF	; 255
    2abe:	ff 2e       	mov	r15, r31
    2ac0:	ff ef       	ldi	r31, 0xFF	; 255
    2ac2:	0f 2f       	mov	r16, r31
    2ac4:	ff ef       	ldi	r31, 0xFF	; 255
    2ac6:	1f 2f       	mov	r17, r31
    2ac8:	f0 2d       	mov	r31, r0
    2aca:	e8 0e       	add	r14, r24
    2acc:	f9 1e       	adc	r15, r25
    2ace:	0a 1f       	adc	r16, r26
    2ad0:	1b 1f       	adc	r17, r27
    2ad2:	e9 81       	ldd	r30, Y+1	; 0x01
    2ad4:	fa 81       	ldd	r31, Y+2	; 0x02
    2ad6:	94 81       	ldd	r25, Z+4	; 0x04
    2ad8:	84 e0       	ldi	r24, 0x04	; 4
    2ada:	89 27       	eor	r24, r25
    2adc:	88 2f       	mov	r24, r24
    2ade:	90 e0       	ldi	r25, 0x00	; 0
    2ae0:	88 0f       	add	r24, r24
    2ae2:	99 1f       	adc	r25, r25
    2ae4:	9c 01       	movw	r18, r24
    2ae6:	44 27       	eor	r20, r20
    2ae8:	37 fd       	sbrc	r19, 7
    2aea:	40 95       	com	r20
    2aec:	54 2f       	mov	r21, r20
    2aee:	c8 01       	movw	r24, r16
    2af0:	b7 01       	movw	r22, r14
    2af2:	0e 94 fc 15 	call	0x2bf8	; 0x2bf8 <__udivmodsi4>
    2af6:	da 01       	movw	r26, r20
    2af8:	c9 01       	movw	r24, r18
    2afa:	f6 01       	movw	r30, r12
    2afc:	80 83       	st	Z, r24
    /*
     * Insert Two Wire Bus address: my address if any master device want to call me
     * The address occupy only last 7 Bits So we shift the address one to the left
     * As General Call Recognition: Off >> TWGCE = 0
     */
    TWAR = (Config_Ptr->slaveAddress) << 1;
    2afe:	a2 e2       	ldi	r26, 0x22	; 34
    2b00:	b0 e0       	ldi	r27, 0x00	; 0
    2b02:	e9 81       	ldd	r30, Y+1	; 0x01
    2b04:	fa 81       	ldd	r31, Y+2	; 0x02
    2b06:	85 81       	ldd	r24, Z+5	; 0x05
    2b08:	88 0f       	add	r24, r24
    2b0a:	8c 93       	st	X, r24

    TWCR = (1<<TWEN); /* enable TWI */
    2b0c:	e6 e5       	ldi	r30, 0x56	; 86
    2b0e:	f0 e0       	ldi	r31, 0x00	; 0
    2b10:	84 e0       	ldi	r24, 0x04	; 4
    2b12:	80 83       	st	Z, r24
}
    2b14:	0f 90       	pop	r0
    2b16:	0f 90       	pop	r0
    2b18:	cf 91       	pop	r28
    2b1a:	df 91       	pop	r29
    2b1c:	1f 91       	pop	r17
    2b1e:	0f 91       	pop	r16
    2b20:	ff 90       	pop	r15
    2b22:	ef 90       	pop	r14
    2b24:	df 90       	pop	r13
    2b26:	cf 90       	pop	r12
    2b28:	08 95       	ret

00002b2a <TWI_start>:

void TWI_start(void)
{
    2b2a:	df 93       	push	r29
    2b2c:	cf 93       	push	r28
    2b2e:	cd b7       	in	r28, 0x3d	; 61
    2b30:	de b7       	in	r29, 0x3e	; 62
    /*
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    2b32:	e6 e5       	ldi	r30, 0x56	; 86
    2b34:	f0 e0       	ldi	r31, 0x00	; 0
    2b36:	84 ea       	ldi	r24, 0xA4	; 164
    2b38:	80 83       	st	Z, r24

    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(GET_BIT(TWCR,TWINT)==0);
    2b3a:	e6 e5       	ldi	r30, 0x56	; 86
    2b3c:	f0 e0       	ldi	r31, 0x00	; 0
    2b3e:	80 81       	ld	r24, Z
    2b40:	88 23       	and	r24, r24
    2b42:	dc f7       	brge	.-10     	; 0x2b3a <TWI_start+0x10>
}
    2b44:	cf 91       	pop	r28
    2b46:	df 91       	pop	r29
    2b48:	08 95       	ret

00002b4a <TWI_stop>:

void TWI_stop(void)
{
    2b4a:	df 93       	push	r29
    2b4c:	cf 93       	push	r28
    2b4e:	cd b7       	in	r28, 0x3d	; 61
    2b50:	de b7       	in	r29, 0x3e	; 62
    /*
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    2b52:	e6 e5       	ldi	r30, 0x56	; 86
    2b54:	f0 e0       	ldi	r31, 0x00	; 0
    2b56:	84 e9       	ldi	r24, 0x94	; 148
    2b58:	80 83       	st	Z, r24
}
    2b5a:	cf 91       	pop	r28
    2b5c:	df 91       	pop	r29
    2b5e:	08 95       	ret

00002b60 <TWI_writeByte>:

void TWI_writeByte(u8 data)
{
    2b60:	df 93       	push	r29
    2b62:	cf 93       	push	r28
    2b64:	0f 92       	push	r0
    2b66:	cd b7       	in	r28, 0x3d	; 61
    2b68:	de b7       	in	r29, 0x3e	; 62
    2b6a:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    2b6c:	e3 e2       	ldi	r30, 0x23	; 35
    2b6e:	f0 e0       	ldi	r31, 0x00	; 0
    2b70:	89 81       	ldd	r24, Y+1	; 0x01
    2b72:	80 83       	st	Z, r24
    /*
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    2b74:	e6 e5       	ldi	r30, 0x56	; 86
    2b76:	f0 e0       	ldi	r31, 0x00	; 0
    2b78:	84 e8       	ldi	r24, 0x84	; 132
    2b7a:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(GET_BIT(TWCR,TWINT)==0);
    2b7c:	e6 e5       	ldi	r30, 0x56	; 86
    2b7e:	f0 e0       	ldi	r31, 0x00	; 0
    2b80:	80 81       	ld	r24, Z
    2b82:	88 23       	and	r24, r24
    2b84:	dc f7       	brge	.-10     	; 0x2b7c <TWI_writeByte+0x1c>
}
    2b86:	0f 90       	pop	r0
    2b88:	cf 91       	pop	r28
    2b8a:	df 91       	pop	r29
    2b8c:	08 95       	ret

00002b8e <TWI_readByteWithACK>:

u8 TWI_readByteWithACK(void)
{
    2b8e:	df 93       	push	r29
    2b90:	cf 93       	push	r28
    2b92:	cd b7       	in	r28, 0x3d	; 61
    2b94:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    2b96:	e6 e5       	ldi	r30, 0x56	; 86
    2b98:	f0 e0       	ldi	r31, 0x00	; 0
    2b9a:	84 ec       	ldi	r24, 0xC4	; 196
    2b9c:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(GET_BIT(TWCR,TWINT)==0);
    2b9e:	e6 e5       	ldi	r30, 0x56	; 86
    2ba0:	f0 e0       	ldi	r31, 0x00	; 0
    2ba2:	80 81       	ld	r24, Z
    2ba4:	88 23       	and	r24, r24
    2ba6:	dc f7       	brge	.-10     	; 0x2b9e <TWI_readByteWithACK+0x10>
    /* Read Data */
    return TWDR;
    2ba8:	e3 e2       	ldi	r30, 0x23	; 35
    2baa:	f0 e0       	ldi	r31, 0x00	; 0
    2bac:	80 81       	ld	r24, Z
}
    2bae:	cf 91       	pop	r28
    2bb0:	df 91       	pop	r29
    2bb2:	08 95       	ret

00002bb4 <TWI_readByteWithNACK>:

u8 TWI_readByteWithNACK(void)
{
    2bb4:	df 93       	push	r29
    2bb6:	cf 93       	push	r28
    2bb8:	cd b7       	in	r28, 0x3d	; 61
    2bba:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    2bbc:	e6 e5       	ldi	r30, 0x56	; 86
    2bbe:	f0 e0       	ldi	r31, 0x00	; 0
    2bc0:	84 e8       	ldi	r24, 0x84	; 132
    2bc2:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(GET_BIT(TWCR,TWINT)==0);
    2bc4:	e6 e5       	ldi	r30, 0x56	; 86
    2bc6:	f0 e0       	ldi	r31, 0x00	; 0
    2bc8:	80 81       	ld	r24, Z
    2bca:	88 23       	and	r24, r24
    2bcc:	dc f7       	brge	.-10     	; 0x2bc4 <TWI_readByteWithNACK+0x10>
    /* Read Data */
    return TWDR;
    2bce:	e3 e2       	ldi	r30, 0x23	; 35
    2bd0:	f0 e0       	ldi	r31, 0x00	; 0
    2bd2:	80 81       	ld	r24, Z
}
    2bd4:	cf 91       	pop	r28
    2bd6:	df 91       	pop	r29
    2bd8:	08 95       	ret

00002bda <TWI_getStatus>:

u8 TWI_getStatus(void)
{
    2bda:	df 93       	push	r29
    2bdc:	cf 93       	push	r28
    2bde:	0f 92       	push	r0
    2be0:	cd b7       	in	r28, 0x3d	; 61
    2be2:	de b7       	in	r29, 0x3e	; 62
    u8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    2be4:	e1 e2       	ldi	r30, 0x21	; 33
    2be6:	f0 e0       	ldi	r31, 0x00	; 0
    2be8:	80 81       	ld	r24, Z
    2bea:	88 7f       	andi	r24, 0xF8	; 248
    2bec:	89 83       	std	Y+1, r24	; 0x01
    return status;
    2bee:	89 81       	ldd	r24, Y+1	; 0x01
}
    2bf0:	0f 90       	pop	r0
    2bf2:	cf 91       	pop	r28
    2bf4:	df 91       	pop	r29
    2bf6:	08 95       	ret

00002bf8 <__udivmodsi4>:
    2bf8:	a1 e2       	ldi	r26, 0x21	; 33
    2bfa:	1a 2e       	mov	r1, r26
    2bfc:	aa 1b       	sub	r26, r26
    2bfe:	bb 1b       	sub	r27, r27
    2c00:	fd 01       	movw	r30, r26
    2c02:	0d c0       	rjmp	.+26     	; 0x2c1e <__udivmodsi4_ep>

00002c04 <__udivmodsi4_loop>:
    2c04:	aa 1f       	adc	r26, r26
    2c06:	bb 1f       	adc	r27, r27
    2c08:	ee 1f       	adc	r30, r30
    2c0a:	ff 1f       	adc	r31, r31
    2c0c:	a2 17       	cp	r26, r18
    2c0e:	b3 07       	cpc	r27, r19
    2c10:	e4 07       	cpc	r30, r20
    2c12:	f5 07       	cpc	r31, r21
    2c14:	20 f0       	brcs	.+8      	; 0x2c1e <__udivmodsi4_ep>
    2c16:	a2 1b       	sub	r26, r18
    2c18:	b3 0b       	sbc	r27, r19
    2c1a:	e4 0b       	sbc	r30, r20
    2c1c:	f5 0b       	sbc	r31, r21

00002c1e <__udivmodsi4_ep>:
    2c1e:	66 1f       	adc	r22, r22
    2c20:	77 1f       	adc	r23, r23
    2c22:	88 1f       	adc	r24, r24
    2c24:	99 1f       	adc	r25, r25
    2c26:	1a 94       	dec	r1
    2c28:	69 f7       	brne	.-38     	; 0x2c04 <__udivmodsi4_loop>
    2c2a:	60 95       	com	r22
    2c2c:	70 95       	com	r23
    2c2e:	80 95       	com	r24
    2c30:	90 95       	com	r25
    2c32:	9b 01       	movw	r18, r22
    2c34:	ac 01       	movw	r20, r24
    2c36:	bd 01       	movw	r22, r26
    2c38:	cf 01       	movw	r24, r30
    2c3a:	08 95       	ret

00002c3c <__prologue_saves__>:
    2c3c:	2f 92       	push	r2
    2c3e:	3f 92       	push	r3
    2c40:	4f 92       	push	r4
    2c42:	5f 92       	push	r5
    2c44:	6f 92       	push	r6
    2c46:	7f 92       	push	r7
    2c48:	8f 92       	push	r8
    2c4a:	9f 92       	push	r9
    2c4c:	af 92       	push	r10
    2c4e:	bf 92       	push	r11
    2c50:	cf 92       	push	r12
    2c52:	df 92       	push	r13
    2c54:	ef 92       	push	r14
    2c56:	ff 92       	push	r15
    2c58:	0f 93       	push	r16
    2c5a:	1f 93       	push	r17
    2c5c:	cf 93       	push	r28
    2c5e:	df 93       	push	r29
    2c60:	cd b7       	in	r28, 0x3d	; 61
    2c62:	de b7       	in	r29, 0x3e	; 62
    2c64:	ca 1b       	sub	r28, r26
    2c66:	db 0b       	sbc	r29, r27
    2c68:	0f b6       	in	r0, 0x3f	; 63
    2c6a:	f8 94       	cli
    2c6c:	de bf       	out	0x3e, r29	; 62
    2c6e:	0f be       	out	0x3f, r0	; 63
    2c70:	cd bf       	out	0x3d, r28	; 61
    2c72:	09 94       	ijmp

00002c74 <__epilogue_restores__>:
    2c74:	2a 88       	ldd	r2, Y+18	; 0x12
    2c76:	39 88       	ldd	r3, Y+17	; 0x11
    2c78:	48 88       	ldd	r4, Y+16	; 0x10
    2c7a:	5f 84       	ldd	r5, Y+15	; 0x0f
    2c7c:	6e 84       	ldd	r6, Y+14	; 0x0e
    2c7e:	7d 84       	ldd	r7, Y+13	; 0x0d
    2c80:	8c 84       	ldd	r8, Y+12	; 0x0c
    2c82:	9b 84       	ldd	r9, Y+11	; 0x0b
    2c84:	aa 84       	ldd	r10, Y+10	; 0x0a
    2c86:	b9 84       	ldd	r11, Y+9	; 0x09
    2c88:	c8 84       	ldd	r12, Y+8	; 0x08
    2c8a:	df 80       	ldd	r13, Y+7	; 0x07
    2c8c:	ee 80       	ldd	r14, Y+6	; 0x06
    2c8e:	fd 80       	ldd	r15, Y+5	; 0x05
    2c90:	0c 81       	ldd	r16, Y+4	; 0x04
    2c92:	1b 81       	ldd	r17, Y+3	; 0x03
    2c94:	aa 81       	ldd	r26, Y+2	; 0x02
    2c96:	b9 81       	ldd	r27, Y+1	; 0x01
    2c98:	ce 0f       	add	r28, r30
    2c9a:	d1 1d       	adc	r29, r1
    2c9c:	0f b6       	in	r0, 0x3f	; 63
    2c9e:	f8 94       	cli
    2ca0:	de bf       	out	0x3e, r29	; 62
    2ca2:	0f be       	out	0x3f, r0	; 63
    2ca4:	cd bf       	out	0x3d, r28	; 61
    2ca6:	ed 01       	movw	r28, r26
    2ca8:	08 95       	ret

00002caa <_exit>:
    2caa:	f8 94       	cli

00002cac <__stop_program>:
    2cac:	ff cf       	rjmp	.-2      	; 0x2cac <__stop_program>
